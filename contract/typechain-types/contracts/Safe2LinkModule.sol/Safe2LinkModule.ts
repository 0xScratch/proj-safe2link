/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Safe2LinkModule {
  export type LinkStruct = {
    pubKey20: AddressLike;
    amount: BigNumberish;
    tokenAddress: AddressLike;
    claimed: boolean;
    timestamp: BigNumberish;
    account: AddressLike;
  };

  export type LinkStructOutput = [
    pubKey20: string,
    amount: bigint,
    tokenAddress: string,
    claimed: boolean,
    timestamp: bigint,
    account: string
  ] & {
    pubKey20: string;
    amount: bigint;
    tokenAddress: string;
    claimed: boolean;
    timestamp: bigint;
    account: string;
  };
}

export interface Safe2LinkModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NAME"
      | "VERSION"
      | "claimLink"
      | "createLink"
      | "getAllLinks"
      | "getLink"
      | "getLinkCount"
      | "getSigner"
      | "links"
      | "tokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LinkEvent" | "MessageEvent" | "WithdrawEvent"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimLink",
    values: [BigNumberish, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createLink",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllLinks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLink",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSigner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "links", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimLink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createLink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllLinks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLinkCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "links", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
}

export namespace LinkEventEvent {
  export type InputTuple = [
    _index: BigNumberish,
    _amount: BigNumberish,
    _senderAddress: AddressLike
  ];
  export type OutputTuple = [
    _index: bigint,
    _amount: bigint,
    _senderAddress: string
  ];
  export interface OutputObject {
    _index: bigint;
    _amount: bigint;
    _senderAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageEventEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEventEvent {
  export type InputTuple = [
    _index: BigNumberish,
    _amount: BigNumberish,
    _recipientAddress: AddressLike
  ];
  export type OutputTuple = [
    _index: bigint,
    _amount: bigint,
    _recipientAddress: string
  ];
  export interface OutputObject {
    _index: bigint;
    _amount: bigint;
    _recipientAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Safe2LinkModule extends BaseContract {
  connect(runner?: ContractRunner | null): Safe2LinkModule;
  waitForDeployment(): Promise<this>;

  interface: Safe2LinkModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  claimLink: TypedContractMethod<
    [
      _index: BigNumberish,
      _recipientAddress: AddressLike,
      _recipientAddressHash: BytesLike,
      _signature: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  createLink: TypedContractMethod<
    [_tokenAddress: AddressLike, _amount: BigNumberish, _pubKey20: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getAllLinks: TypedContractMethod<
    [],
    [Safe2LinkModule.LinkStructOutput[]],
    "view"
  >;

  getLink: TypedContractMethod<
    [_index: BigNumberish],
    [Safe2LinkModule.LinkStructOutput],
    "view"
  >;

  getLinkCount: TypedContractMethod<[], [bigint], "view">;

  getSigner: TypedContractMethod<
    [messageHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  links: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint, string] & {
        pubKey20: string;
        amount: bigint;
        tokenAddress: string;
        claimed: boolean;
        timestamp: bigint;
        account: string;
      }
    ],
    "view"
  >;

  tokens: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimLink"
  ): TypedContractMethod<
    [
      _index: BigNumberish,
      _recipientAddress: AddressLike,
      _recipientAddressHash: BytesLike,
      _signature: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLink"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _amount: BigNumberish, _pubKey20: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllLinks"
  ): TypedContractMethod<[], [Safe2LinkModule.LinkStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getLink"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [Safe2LinkModule.LinkStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLinkCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSigner"
  ): TypedContractMethod<
    [messageHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "links"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint, string] & {
        pubKey20: string;
        amount: bigint;
        tokenAddress: string;
        claimed: boolean;
        timestamp: bigint;
        account: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "LinkEvent"
  ): TypedContractEvent<
    LinkEventEvent.InputTuple,
    LinkEventEvent.OutputTuple,
    LinkEventEvent.OutputObject
  >;
  getEvent(
    key: "MessageEvent"
  ): TypedContractEvent<
    MessageEventEvent.InputTuple,
    MessageEventEvent.OutputTuple,
    MessageEventEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawEvent"
  ): TypedContractEvent<
    WithdrawEventEvent.InputTuple,
    WithdrawEventEvent.OutputTuple,
    WithdrawEventEvent.OutputObject
  >;

  filters: {
    "LinkEvent(uint256,uint256,address)": TypedContractEvent<
      LinkEventEvent.InputTuple,
      LinkEventEvent.OutputTuple,
      LinkEventEvent.OutputObject
    >;
    LinkEvent: TypedContractEvent<
      LinkEventEvent.InputTuple,
      LinkEventEvent.OutputTuple,
      LinkEventEvent.OutputObject
    >;

    "MessageEvent(string)": TypedContractEvent<
      MessageEventEvent.InputTuple,
      MessageEventEvent.OutputTuple,
      MessageEventEvent.OutputObject
    >;
    MessageEvent: TypedContractEvent<
      MessageEventEvent.InputTuple,
      MessageEventEvent.OutputTuple,
      MessageEventEvent.OutputObject
    >;

    "WithdrawEvent(uint256,uint256,address)": TypedContractEvent<
      WithdrawEventEvent.InputTuple,
      WithdrawEventEvent.OutputTuple,
      WithdrawEventEvent.OutputObject
    >;
    WithdrawEvent: TypedContractEvent<
      WithdrawEventEvent.InputTuple,
      WithdrawEventEvent.OutputTuple,
      WithdrawEventEvent.OutputObject
    >;
  };
}
