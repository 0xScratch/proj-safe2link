{"id":"8efdcbd7f1f515dd4ba6c58a3ed31111","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/Enum.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.19;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n"},"contracts/Safe2LinkModule.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./Enum.sol\";\n\n\ninterface GnosisSafe {\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external returns (bool success);\n}\n\ncontract Safe2LinkModule  {\n    string public constant NAME = \"Safe2Link Module\";\n    string public constant VERSION = \"0.1.0\";\n\n\n    // Safe -> Delegate -> Tokens\n    mapping(address => mapping(address => address[])) public tokens;\n    // Safe -> Delegates double linked list entry points\n\n\n    struct Link {\n        address pubKey20; // (20 bytes) last 20 bytes of the hash of the public key for the deposit\n        uint256 amount; // (32 bytes) amount of the asset being sent\n        ///// tokenAddress, contractType, tokenId, claimed & timestamp are stored in a single 32 byte word\n        address tokenAddress; // (20 bytes) address of the asset being sent. 0x0 for eth\n        bool claimed; // (1 byte) has this deposit been claimed\n        uint40 timestamp; // ( 5 bytes) timestamp of the deposit\n        address account; // (20 bytes) address of the sender\n    }\n\n\n    Link[] public links; // array of deposits\n\n\n    // events\n    event LinkEvent(\n        uint256 indexed _index, uint256 _amount, address indexed _senderAddress\n    );\n    event WithdrawEvent(\n        uint256 indexed _index, uint256 _amount, address indexed _recipientAddress\n    ); \n\n    event MessageEvent(string message);\n\n\n\n    /**\n     * @notice Function to make a deposit\n     * @dev For token deposits, allowance must be set before calling this function\n     * @param _tokenAddress address of the token being sent. 0x0 for eth\n     * @param _amount uint256 of the amount of tokens being sent (if erc20)\n     * @param _pubKey20 last 20 bytes of the public key of the deposit signer\n     * @return uint256 index of the deposit\n     */\n    function createLink(\n        address _tokenAddress,\n        uint256 _amount,\n        address _pubKey20\n    ) public returns (uint256) {\n\n\n     // create link\n        links.push(\n            Link({\n                tokenAddress: _tokenAddress,\n                amount: _amount,\n                claimed: false,\n                pubKey20: _pubKey20,\n                account: msg.sender,\n                timestamp: uint40(block.timestamp)\n            })\n        );\n\n        // emit the deposit event\n        emit LinkEvent(links.length - 1, _amount, msg.sender);\n\n        // return id of new deposit\n        return links.length - 1;\n    }\n\n\n\n\n    /**\n     * @param _index uint256 index of the deposit\n     * @param _recipientAddress address of the recipient\n     * @param _recipientAddressHash bytes32 hash of the recipient address (prefixed with \"\\x19Ethereum Signed Message:\\n32\")\n     * @param _signature bytes signature of the recipient address (65 bytes)\n     * @return bool true if successful\n     */\n    function claimLink(\n        uint256 _index,\n        address _recipientAddress,\n        bytes32 _recipientAddressHash,\n        bytes memory _signature\n    ) external returns (bool) {\n        // check that the link exists and that it isn't already withdrawn\n        require(_index < links.length, \"LINK INDEX DOES NOT EXIST\");\n        Link memory _link = links[_index];\n        require(_link.claimed == false, \"LINK ALREADY WITHDRAWN\");\n        // check that the recipientAddress hashes to the same value as recipientAddressHash\n        require(\n            _recipientAddressHash == ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_recipientAddress))),\n            \"HASHES DO NOT MATCH\"\n        );\n        // check that the signer is the same as the one stored in the deposit\n        address linkSigner = getSigner(_recipientAddressHash, _signature);\n        require(linkSigner == _link.pubKey20, \"WRONG SIGNATURE\");\n\n        // emit the withdraw event\n        emit WithdrawEvent(_index, _link.amount, _recipientAddress);\n\n        // mark as claimed\n        links[_index].claimed = true;\n\n\n        // Transfer token\n        transfer(GnosisSafe(_link.account), _link.tokenAddress, payable(_recipientAddress), _link.amount);\n\n        return true;\n    }\n\n\n    /**\n     * @param messageHash bytes32 hash of the message\n     * @param signature bytes signature of the message\n     * @return address of the signer\n     */\n    function getSigner(bytes32 messageHash, bytes memory signature) public pure returns (address) {\n        address signer = ECDSA.recover(messageHash, signature);\n        return signer;\n    }\n\n    function transfer(GnosisSafe safe, address token, address payable to, uint256 amount) private {\n        if (token == address(0)) {\n            // solium-disable-next-line security/no-send\n            require(safe.execTransactionFromModule(to, amount, \"\", Enum.Operation.Call), \"Could not execute ether transfer\");\n        } else {\n            bytes memory data = abi.encodeWithSignature(\"transfer(address,uint256)\", to, amount);\n            require(safe.execTransactionFromModule(token, 0, data, Enum.Operation.Call), \"Could not execute token transfer\");\n        }\n    }\n\n\n    /**\n     * @notice Simple way to get the total number of deposits\n     * @return uint256 number of deposits\n     */\n    function getLinkCount() external view returns (uint256) {\n        return links.length;\n    }\n\n    /**\n     * @notice Simple way to get single deposit\n     * @param _index uint256 index of the deposit\n     * @return Deposit struct\n     */\n    function getLink(uint256 _index) external view returns (Link memory) {\n        return links[_index];\n    }\n\n    /**\n     * @notice Get all links in contract\n     * @return Links[] array of deposits\n     */\n    function getAllLinks() external view returns (Link[] memory) {\n        return links;\n    }\n\n\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1460],"SignedMath":[1565],"Strings":[228]},"id":229,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":229,"sourceUnit":1461,"src":"126:25:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":229,"sourceUnit":1566,"src":"152:31:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"185:34:0","text":" @dev String operations."},"fullyImplemented":true,"id":228,"linearizedBaseContracts":[228],"name":"Strings","nameLocation":"228:7:0","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":7,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:0","nodeType":"VariableDeclaration","scope":228,"src":"242:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":5,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:0","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":6,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":10,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:0","nodeType":"VariableDeclaration","scope":228,"src":"302:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":8,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":9,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:0","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":57,"nodeType":"Block","src":"518:625:0","statements":[{"id":56,"nodeType":"UncheckedBlock","src":"528:609:0","statements":[{"assignments":[19],"declarations":[{"constant":false,"id":19,"mutability":"mutable","name":"length","nameLocation":"560:6:0","nodeType":"VariableDeclaration","scope":56,"src":"552:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":18,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":26,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":22,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"580:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":20,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"569:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1460_$","typeString":"type(library Math)"}},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:0","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1297,"src":"569:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":24,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:0"},{"assignments":[28],"declarations":[{"constant":false,"id":28,"mutability":"mutable","name":"buffer","nameLocation":"618:6:0","nodeType":"VariableDeclaration","scope":56,"src":"604:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":27,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":33,"initialValue":{"arguments":[{"id":31,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"638:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":30,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":29,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:0"},{"assignments":[35],"declarations":[{"constant":false,"id":35,"mutability":"mutable","name":"ptr","nameLocation":"667:3:0","nodeType":"VariableDeclaration","scope":56,"src":"659:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":34,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":36,"nodeType":"VariableDeclarationStatement","src":"659:11:0"},{"AST":{"nodeType":"YulBlock","src":"740:67:0","statements":[{"nodeType":"YulAssignment","src":"758:35:0","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:0","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:0"},"nodeType":"YulFunctionCall","src":"777:15:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:0"},"nodeType":"YulFunctionCall","src":"765:28:0"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:0"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":28,"isOffset":false,"isSlot":false,"src":"769:6:0","valueSize":1},{"declaration":19,"isOffset":false,"isSlot":false,"src":"785:6:0","valueSize":1},{"declaration":35,"isOffset":false,"isSlot":false,"src":"758:3:0","valueSize":1}],"id":37,"nodeType":"InlineAssembly","src":"731:76:0"},{"body":{"id":52,"nodeType":"Block","src":"833:267:0","statements":[{"expression":{"id":40,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:0","subExpression":{"id":39,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"851:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":41,"nodeType":"ExpressionStatement","src":"851:5:0"},{"AST":{"nodeType":"YulBlock","src":"934:84:0","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:0"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:0","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:0"},"nodeType":"YulFunctionCall","src":"974:14:0"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:0"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:0"},"nodeType":"YulFunctionCall","src":"969:30:0"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:0"},"nodeType":"YulFunctionCall","src":"956:44:0"},"nodeType":"YulExpressionStatement","src":"956:44:0"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":7,"isOffset":false,"isSlot":false,"src":"990:8:0","valueSize":1},{"declaration":35,"isOffset":false,"isSlot":false,"src":"964:3:0","valueSize":1},{"declaration":13,"isOffset":false,"isSlot":false,"src":"978:5:0","valueSize":1}],"id":42,"nodeType":"InlineAssembly","src":"925:93:0"},{"expression":{"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":43,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1035:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":44,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":46,"nodeType":"ExpressionStatement","src":"1035:11:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":47,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1068:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":48,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":51,"nodeType":"IfStatement","src":"1064:21:0","trueBody":{"id":50,"nodeType":"Break","src":"1080:5:0"}}]},"condition":{"hexValue":"74727565","id":38,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":53,"nodeType":"WhileStatement","src":"820:280:0"},{"expression":{"id":54,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1120:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":17,"id":55,"nodeType":"Return","src":"1113:13:0"}]}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"352:90:0","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":58,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:0","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"value","nameLocation":"473:5:0","nodeType":"VariableDeclaration","scope":58,"src":"465:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:0"},"returnParameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":58,"src":"503:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":15,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:0"},"scope":228,"src":"447:696:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":85,"nodeType":"Block","src":"1313:103:0","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":70,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":61,"src":"1354:5:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":71,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":74,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:0","trueExpression":{"hexValue":"2d","id":73,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":79,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":61,"src":"1400:5:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":77,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"1385:10:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$1565_$","typeString":"type(library SignedMath)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:0","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":1564,"src":"1385:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":80,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":76,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[58,86],"referencedDeclaration":58,"src":"1376:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":68,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":69,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":67,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":66,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:0","typeDescriptions":{}}},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":65,"id":84,"nodeType":"Return","src":"1323:86:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1149:89:0","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":86,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:0","nodeType":"FunctionDefinition","parameters":{"id":62,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"value","nameLocation":"1268:5:0","nodeType":"VariableDeclaration","scope":86,"src":"1261:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":60,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:0"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":86,"src":"1298:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":63,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:0"},"scope":228,"src":"1243:173:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":105,"nodeType":"Block","src":"1595:100:0","statements":[{"id":104,"nodeType":"UncheckedBlock","src":"1605:84:0","statements":[{"expression":{"arguments":[{"id":95,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":89,"src":"1648:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":98,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":89,"src":"1667:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":96,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"1655:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1460_$","typeString":"type(library Math)"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:0","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1420,"src":"1655:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":94,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[106,182,202],"referencedDeclaration":182,"src":"1636:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":93,"id":103,"nodeType":"Return","src":"1629:49:0"}]}]},"documentation":{"id":87,"nodeType":"StructuredDocumentation","src":"1422:94:0","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":106,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:0","nodeType":"FunctionDefinition","parameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":89,"mutability":"mutable","name":"value","nameLocation":"1550:5:0","nodeType":"VariableDeclaration","scope":106,"src":"1542:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":88,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:0"},"returnParameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":106,"src":"1580:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":91,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:0"},"scope":228,"src":"1521:174:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":181,"nodeType":"Block","src":"1908:347:0","statements":[{"assignments":[117],"declarations":[{"constant":false,"id":117,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:0","nodeType":"VariableDeclaration","scope":181,"src":"1918:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":116,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":126,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":121,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1954:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":118,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:0"},{"expression":{"id":131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":127,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"1975:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":129,"indexExpression":{"hexValue":"30","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":132,"nodeType":"ExpressionStatement","src":"1975:15:0"},{"expression":{"id":137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":133,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2000:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":135,"indexExpression":{"hexValue":"31","id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":138,"nodeType":"ExpressionStatement","src":"2000:15:0"},{"body":{"id":167,"nodeType":"Block","src":"2070:83:0","statements":[{"expression":{"id":161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":153,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2084:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":155,"indexExpression":{"id":154,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2091:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":156,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2096:8:0","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":160,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2105:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:0","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":162,"nodeType":"ExpressionStatement","src":"2084:33:0"},{"expression":{"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":163,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2131:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":166,"nodeType":"ExpressionStatement","src":"2131:11:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":147,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2058:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":168,"initializationExpression":{"assignments":[140],"declarations":[{"constant":false,"id":140,"mutability":"mutable","name":"i","nameLocation":"2038:1:0","nodeType":"VariableDeclaration","scope":168,"src":"2030:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":139,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":146,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":142,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2046:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:0"},"loopExpression":{"expression":{"id":151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:0","subExpression":{"id":150,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2067:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":152,"nodeType":"ExpressionStatement","src":"2065:3:0"},"nodeType":"ForStatement","src":"2025:128:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2170:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":169,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":175,"nodeType":"ExpressionStatement","src":"2162:55:0"},{"expression":{"arguments":[{"id":178,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2241:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":176,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:0","typeDescriptions":{}}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":115,"id":180,"nodeType":"Return","src":"2227:21:0"}]},"documentation":{"id":107,"nodeType":"StructuredDocumentation","src":"1701:112:0","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":182,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:0","nodeType":"FunctionDefinition","parameters":{"id":112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"value","nameLocation":"1847:5:0","nodeType":"VariableDeclaration","scope":182,"src":"1839:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":108,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":111,"mutability":"mutable","name":"length","nameLocation":"1862:6:0","nodeType":"VariableDeclaration","scope":182,"src":"1854:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":110,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:0"},"returnParameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":182,"src":"1893:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":113,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:0"},"scope":228,"src":"1818:437:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":201,"nodeType":"Block","src":"2480:76:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":195,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"2525:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":193,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:0","typeDescriptions":{}}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:0","typeDescriptions":{}}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":198,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2533:15:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":190,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[106,182,202],"referencedDeclaration":182,"src":"2497:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":189,"id":200,"nodeType":"Return","src":"2490:59:0"}]},"documentation":{"id":183,"nodeType":"StructuredDocumentation","src":"2261:141:0","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":202,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:0","nodeType":"FunctionDefinition","parameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"addr","nameLocation":"2436:4:0","nodeType":"VariableDeclaration","scope":202,"src":"2428:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":184,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:0"},"returnParameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":202,"src":"2465:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":187,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:0"},"scope":228,"src":"2407:149:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"2711:66:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":215,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"2744:1:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":213,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:0","typeDescriptions":{}}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":212,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":221,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"2767:1:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":219,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:0","typeDescriptions":{}}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":218,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":211,"id":225,"nodeType":"Return","src":"2721:49:0"}]},"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"2562:66:0","text":" @dev Returns true if the two strings are equal."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:0","nodeType":"FunctionDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"a","nameLocation":"2662:1:0","nodeType":"VariableDeclaration","scope":227,"src":"2648:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":204,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":207,"mutability":"mutable","name":"b","nameLocation":"2679:1:0","nodeType":"VariableDeclaration","scope":227,"src":"2665:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":206,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:0"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":227,"src":"2705:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":209,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:0"},"scope":228,"src":"2633:144:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":229,"src":"220:2559:0","usedErrors":[]}],"src":"101:2679:0"},"id":0},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[594],"Math":[1460],"SignedMath":[1565],"Strings":[228]},"id":595,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":230,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":231,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":229,"src":"137:24:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"163:205:1","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":594,"linearizedBaseContracts":[594],"name":"ECDSA","nameLocation":"377:5:1","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":238,"members":[{"id":233,"name":"NoError","nameLocation":"417:7:1","nodeType":"EnumValue","src":"417:7:1"},{"id":234,"name":"InvalidSignature","nameLocation":"434:16:1","nodeType":"EnumValue","src":"434:16:1"},{"id":235,"name":"InvalidSignatureLength","nameLocation":"460:22:1","nodeType":"EnumValue","src":"460:22:1"},{"id":236,"name":"InvalidSignatureS","nameLocation":"492:17:1","nodeType":"EnumValue","src":"492:17:1"},{"id":237,"name":"InvalidSignatureV","nameLocation":"519:17:1","nodeType":"EnumValue","src":"519:17:1"}],"name":"RecoverError","nameLocation":"394:12:1","nodeType":"EnumDefinition","src":"389:175:1"},{"body":{"id":281,"nodeType":"Block","src":"624:457:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":244,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"638:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":245,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"647:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$238_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:1","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":233,"src":"647:20:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":250,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"734:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":251,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"743:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$238_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:1","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":234,"src":"743:29:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":259,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"843:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":260,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"852:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$238_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:1","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":235,"src":"852:35:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":268,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"965:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":269,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"974:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$238_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:1","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":236,"src":"974:30:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":277,"nodeType":"IfStatement","src":"961:114:1","trueBody":{"id":276,"nodeType":"Block","src":"1006:69:1","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":272,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":275,"nodeType":"ExpressionStatement","src":"1020:44:1"}]}},"id":278,"nodeType":"IfStatement","src":"839:236:1","trueBody":{"id":267,"nodeType":"Block","src":"889:66:1","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":263,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":266,"nodeType":"ExpressionStatement","src":"903:41:1"}]}},"id":279,"nodeType":"IfStatement","src":"730:345:1","trueBody":{"id":258,"nodeType":"Block","src":"774:59:1","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":254,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":257,"nodeType":"ExpressionStatement","src":"788:34:1"}]}},"id":280,"nodeType":"IfStatement","src":"634:441:1","trueBody":{"id":249,"nodeType":"Block","src":"669:55:1","statements":[{"functionReturnParameters":243,"id":248,"nodeType":"Return","src":"683:7:1"}]}}]},"id":282,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:1","nodeType":"FunctionDefinition","parameters":{"id":242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"error","nameLocation":"604:5:1","nodeType":"VariableDeclaration","scope":282,"src":"591:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":240,"nodeType":"UserDefinedTypeName","pathNode":{"id":239,"name":"RecoverError","nameLocations":["591:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"591:12:1"},"referencedDeclaration":238,"src":"591:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:1"},"returnParameters":{"id":243,"nodeType":"ParameterList","parameters":[],"src":"624:0:1"},"scope":594,"src":"570:511:1","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":327,"nodeType":"Block","src":"2249:626:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":295,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"2263:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:1","memberName":"length","nodeType":"MemberAccess","src":"2263:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:1","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":325,"nodeType":"Block","src":"2788:81:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":317,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:1","typeDescriptions":{}}},"id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":321,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"2822:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$238_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:1","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":235,"src":"2822:35:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}}],"id":323,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":294,"id":324,"nodeType":"Return","src":"2802:56:1"}]},"id":326,"nodeType":"IfStatement","src":"2259:610:1","trueBody":{"id":316,"nodeType":"Block","src":"2287:495:1","statements":[{"assignments":[300],"declarations":[{"constant":false,"id":300,"mutability":"mutable","name":"r","nameLocation":"2309:1:1","nodeType":"VariableDeclaration","scope":316,"src":"2301:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":301,"nodeType":"VariableDeclarationStatement","src":"2301:9:1"},{"assignments":[303],"declarations":[{"constant":false,"id":303,"mutability":"mutable","name":"s","nameLocation":"2332:1:1","nodeType":"VariableDeclaration","scope":316,"src":"2324:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":304,"nodeType":"VariableDeclarationStatement","src":"2324:9:1"},{"assignments":[306],"declarations":[{"constant":false,"id":306,"mutability":"mutable","name":"v","nameLocation":"2353:1:1","nodeType":"VariableDeclaration","scope":316,"src":"2347:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":305,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":307,"nodeType":"VariableDeclarationStatement","src":"2347:7:1"},{"AST":{"nodeType":"YulBlock","src":"2555:171:1","statements":[{"nodeType":"YulAssignment","src":"2573:32:1","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:1"},"nodeType":"YulFunctionCall","src":"2584:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:1"},"nodeType":"YulFunctionCall","src":"2578:27:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:1"}]},{"nodeType":"YulAssignment","src":"2622:32:1","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:1","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:1"},"nodeType":"YulFunctionCall","src":"2633:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:1"},"nodeType":"YulFunctionCall","src":"2627:27:1"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:1"}]},{"nodeType":"YulAssignment","src":"2671:41:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:1","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:1","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:1"},"nodeType":"YulFunctionCall","src":"2690:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:1"},"nodeType":"YulFunctionCall","src":"2684:27:1"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:1"},"nodeType":"YulFunctionCall","src":"2676:36:1"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":300,"isOffset":false,"isSlot":false,"src":"2573:1:1","valueSize":1},{"declaration":303,"isOffset":false,"isSlot":false,"src":"2622:1:1","valueSize":1},{"declaration":287,"isOffset":false,"isSlot":false,"src":"2588:9:1","valueSize":1},{"declaration":287,"isOffset":false,"isSlot":false,"src":"2637:9:1","valueSize":1},{"declaration":287,"isOffset":false,"isSlot":false,"src":"2694:9:1","valueSize":1},{"declaration":306,"isOffset":false,"isSlot":false,"src":"2671:1:1","valueSize":1}],"id":308,"nodeType":"InlineAssembly","src":"2546:180:1"},{"expression":{"arguments":[{"id":310,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"2757:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":311,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"2763:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":312,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"2766:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":313,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2769:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":309,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[328,402,496],"referencedDeclaration":496,"src":"2746:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":294,"id":315,"nodeType":"Return","src":"2739:32:1"}]}}]},"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"1087:1053:1","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":328,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:1","nodeType":"FunctionDefinition","parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"hash","nameLocation":"2173:4:1","nodeType":"VariableDeclaration","scope":328,"src":"2165:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":284,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":287,"mutability":"mutable","name":"signature","nameLocation":"2192:9:1","nodeType":"VariableDeclaration","scope":328,"src":"2179:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":286,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:1"},"returnParameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":328,"src":"2226:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":289,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":293,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":328,"src":"2235:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":292,"nodeType":"UserDefinedTypeName","pathNode":{"id":291,"name":"RecoverError","nameLocations":["2235:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"2235:12:1"},"referencedDeclaration":238,"src":"2235:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:1"},"scope":594,"src":"2145:730:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":354,"nodeType":"Block","src":"3748:140:1","statements":[{"assignments":[339,342],"declarations":[{"constant":false,"id":339,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:1","nodeType":"VariableDeclaration","scope":354,"src":"3759:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":338,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":342,"mutability":"mutable","name":"error","nameLocation":"3791:5:1","nodeType":"VariableDeclaration","scope":354,"src":"3778:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":341,"nodeType":"UserDefinedTypeName","pathNode":{"id":340,"name":"RecoverError","nameLocations":["3778:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"3778:12:1"},"referencedDeclaration":238,"src":"3778:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":347,"initialValue":{"arguments":[{"id":344,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"3811:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":345,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"3817:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":343,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[328,402,496],"referencedDeclaration":328,"src":"3800:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:1"},{"expression":{"arguments":[{"id":349,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"3849:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}],"id":348,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"3837:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$238_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":351,"nodeType":"ExpressionStatement","src":"3837:18:1"},{"expression":{"id":352,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"3872:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":337,"id":353,"nodeType":"Return","src":"3865:16:1"}]},"documentation":{"id":329,"nodeType":"StructuredDocumentation","src":"2881:775:1","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":355,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:1","nodeType":"FunctionDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"hash","nameLocation":"3686:4:1","nodeType":"VariableDeclaration","scope":355,"src":"3678:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":333,"mutability":"mutable","name":"signature","nameLocation":"3705:9:1","nodeType":"VariableDeclaration","scope":355,"src":"3692:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":332,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:1"},"returnParameters":{"id":337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":355,"src":"3739:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:1"},"scope":594,"src":"3661:227:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":401,"nodeType":"Block","src":"4245:203:1","statements":[{"assignments":[371],"declarations":[{"constant":false,"id":371,"mutability":"mutable","name":"s","nameLocation":"4263:1:1","nodeType":"VariableDeclaration","scope":401,"src":"4255:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":378,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":372,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"4267:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4280:66:1","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4272:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4272:7:1","typeDescriptions":{}}},"id":376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4267:80:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4255:92:1"},{"assignments":[380],"declarations":[{"constant":false,"id":380,"mutability":"mutable","name":"v","nameLocation":"4363:1:1","nodeType":"VariableDeclaration","scope":401,"src":"4357:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":379,"name":"uint8","nodeType":"ElementaryTypeName","src":"4357:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":393,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":385,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"4382:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4374:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":383,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:1","typeDescriptions":{}}},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4374:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4389:3:1","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4374:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":389,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4373:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:2:1","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4373:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4367:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":381,"name":"uint8","nodeType":"ElementaryTypeName","src":"4367:5:1","typeDescriptions":{}}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4357:42:1"},{"expression":{"arguments":[{"id":395,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"4427:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":396,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"4433:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":397,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"4436:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":398,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"4439:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":394,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[328,402,496],"referencedDeclaration":496,"src":"4416:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4416:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":369,"id":400,"nodeType":"Return","src":"4409:32:1"}]},"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"3894:243:1","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":402,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:1","nodeType":"FunctionDefinition","parameters":{"id":363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"hash","nameLocation":"4170:4:1","nodeType":"VariableDeclaration","scope":402,"src":"4162:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":360,"mutability":"mutable","name":"r","nameLocation":"4184:1:1","nodeType":"VariableDeclaration","scope":402,"src":"4176:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":362,"mutability":"mutable","name":"vs","nameLocation":"4195:2:1","nodeType":"VariableDeclaration","scope":402,"src":"4187:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4187:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:37:1"},"returnParameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":402,"src":"4222:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":364,"name":"address","nodeType":"ElementaryTypeName","src":"4222:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":402,"src":"4231:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":367,"nodeType":"UserDefinedTypeName","pathNode":{"id":366,"name":"RecoverError","nameLocations":["4231:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"4231:12:1"},"referencedDeclaration":238,"src":"4231:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4221:23:1"},"scope":594,"src":"4142:306:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":431,"nodeType":"Block","src":"4699:136:1","statements":[{"assignments":[415,418],"declarations":[{"constant":false,"id":415,"mutability":"mutable","name":"recovered","nameLocation":"4718:9:1","nodeType":"VariableDeclaration","scope":431,"src":"4710:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":414,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"error","nameLocation":"4742:5:1","nodeType":"VariableDeclaration","scope":431,"src":"4729:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":417,"nodeType":"UserDefinedTypeName","pathNode":{"id":416,"name":"RecoverError","nameLocations":["4729:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"4729:12:1"},"referencedDeclaration":238,"src":"4729:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":424,"initialValue":{"arguments":[{"id":420,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"4762:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":421,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"4768:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":422,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"4771:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":419,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[328,402,496],"referencedDeclaration":402,"src":"4751:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4709:65:1"},{"expression":{"arguments":[{"id":426,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4796:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}],"id":425,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"4784:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$238_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":428,"nodeType":"ExpressionStatement","src":"4784:18:1"},{"expression":{"id":429,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"4819:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":413,"id":430,"nodeType":"Return","src":"4812:16:1"}]},"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"4454:154:1","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":432,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4622:7:1","nodeType":"FunctionDefinition","parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"hash","nameLocation":"4638:4:1","nodeType":"VariableDeclaration","scope":432,"src":"4630:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":407,"mutability":"mutable","name":"r","nameLocation":"4652:1:1","nodeType":"VariableDeclaration","scope":432,"src":"4644:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"vs","nameLocation":"4663:2:1","nodeType":"VariableDeclaration","scope":432,"src":"4655:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":408,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4629:37:1"},"returnParameters":{"id":413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":432,"src":"4690:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":411,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4689:9:1"},"scope":594,"src":"4613:222:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":495,"nodeType":"Block","src":"5120:1345:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":451,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"6016:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6008:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":449,"name":"uint256","nodeType":"ElementaryTypeName","src":"6008:7:1","typeDescriptions":{}}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:66:1","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6008:79:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":464,"nodeType":"IfStatement","src":"6004:161:1","trueBody":{"id":463,"nodeType":"Block","src":"6089:76:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":455,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:1","typeDescriptions":{}}},"id":458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":459,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"6123:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$238_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6136:17:1","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":236,"src":"6123:30:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}}],"id":461,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6110:44:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":448,"id":462,"nodeType":"Return","src":"6103:51:1"}]}},{"assignments":[466],"declarations":[{"constant":false,"id":466,"mutability":"mutable","name":"signer","nameLocation":"6267:6:1","nodeType":"VariableDeclaration","scope":495,"src":"6259:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"6259:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":473,"initialValue":{"arguments":[{"id":468,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"6286:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":469,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"6292:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":470,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6295:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":471,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"6298:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":467,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6276:9:1","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6276:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6259:41:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":474,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"6314:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6332:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6324:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":475,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:1","typeDescriptions":{}}},"id":478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6324:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6314:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":489,"nodeType":"IfStatement","src":"6310:101:1","trueBody":{"id":488,"nodeType":"Block","src":"6336:75:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":480,"name":"address","nodeType":"ElementaryTypeName","src":"6358:7:1","typeDescriptions":{}}},"id":483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":484,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"6370:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$238_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6383:16:1","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":234,"src":"6370:29:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}}],"id":486,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:43:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":448,"id":487,"nodeType":"Return","src":"6350:50:1"}]}},{"expression":{"components":[{"id":490,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"6429:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":491,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"6437:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$238_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6450:7:1","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":233,"src":"6437:20:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}}],"id":493,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6428:30:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":448,"id":494,"nodeType":"Return","src":"6421:37:1"}]},"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"4841:163:1","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":496,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5018:10:1","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"hash","nameLocation":"5037:4:1","nodeType":"VariableDeclaration","scope":496,"src":"5029:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":434,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5029:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":437,"mutability":"mutable","name":"v","nameLocation":"5049:1:1","nodeType":"VariableDeclaration","scope":496,"src":"5043:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":436,"name":"uint8","nodeType":"ElementaryTypeName","src":"5043:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"r","nameLocation":"5060:1:1","nodeType":"VariableDeclaration","scope":496,"src":"5052:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5052:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"s","nameLocation":"5071:1:1","nodeType":"VariableDeclaration","scope":496,"src":"5063:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5028:45:1"},"returnParameters":{"id":448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":496,"src":"5097:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":496,"src":"5106:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":446,"nodeType":"UserDefinedTypeName","pathNode":{"id":445,"name":"RecoverError","nameLocations":["5106:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"5106:12:1"},"referencedDeclaration":238,"src":"5106:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5096:23:1"},"scope":594,"src":"5009:1456:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":528,"nodeType":"Block","src":"6692:138:1","statements":[{"assignments":[511,514],"declarations":[{"constant":false,"id":511,"mutability":"mutable","name":"recovered","nameLocation":"6711:9:1","nodeType":"VariableDeclaration","scope":528,"src":"6703:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":514,"mutability":"mutable","name":"error","nameLocation":"6735:5:1","nodeType":"VariableDeclaration","scope":528,"src":"6722:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":513,"nodeType":"UserDefinedTypeName","pathNode":{"id":512,"name":"RecoverError","nameLocations":["6722:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":238,"src":"6722:12:1"},"referencedDeclaration":238,"src":"6722:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":521,"initialValue":{"arguments":[{"id":516,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"6755:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":517,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"6761:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":518,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"6764:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":519,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"6767:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":515,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[328,402,496],"referencedDeclaration":496,"src":"6744:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6744:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$238_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6702:67:1"},{"expression":{"arguments":[{"id":523,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"6791:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$238","typeString":"enum ECDSA.RecoverError"}],"id":522,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"6779:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$238_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6779:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":525,"nodeType":"ExpressionStatement","src":"6779:18:1"},{"expression":{"id":526,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"6814:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":509,"id":527,"nodeType":"Return","src":"6807:16:1"}]},"documentation":{"id":497,"nodeType":"StructuredDocumentation","src":"6471:122:1","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":529,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6607:7:1","nodeType":"FunctionDefinition","parameters":{"id":506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"hash","nameLocation":"6623:4:1","nodeType":"VariableDeclaration","scope":529,"src":"6615:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":498,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6615:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"v","nameLocation":"6635:1:1","nodeType":"VariableDeclaration","scope":529,"src":"6629:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":500,"name":"uint8","nodeType":"ElementaryTypeName","src":"6629:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":503,"mutability":"mutable","name":"r","nameLocation":"6646:1:1","nodeType":"VariableDeclaration","scope":529,"src":"6638:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":502,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"s","nameLocation":"6657:1:1","nodeType":"VariableDeclaration","scope":529,"src":"6649:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":504,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6649:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6614:45:1"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":529,"src":"6683:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":507,"name":"address","nodeType":"ElementaryTypeName","src":"6683:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6682:9:1"},"scope":594,"src":"6598:232:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":538,"nodeType":"Block","src":"7206:310:1","statements":[{"AST":{"nodeType":"YulBlock","src":"7362:148:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7383:4:1","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7389:34:1","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7376:6:1"},"nodeType":"YulFunctionCall","src":"7376:48:1"},"nodeType":"YulExpressionStatement","src":"7376:48:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7444:4:1","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7450:4:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7437:6:1"},"nodeType":"YulFunctionCall","src":"7437:18:1"},"nodeType":"YulExpressionStatement","src":"7437:18:1"},{"nodeType":"YulAssignment","src":"7468:32:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7489:4:1","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7495:4:1","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7479:9:1"},"nodeType":"YulFunctionCall","src":"7479:21:1"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7468:7:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":532,"isOffset":false,"isSlot":false,"src":"7450:4:1","valueSize":1},{"declaration":535,"isOffset":false,"isSlot":false,"src":"7468:7:1","valueSize":1}],"id":537,"nodeType":"InlineAssembly","src":"7353:157:1"}]},"documentation":{"id":530,"nodeType":"StructuredDocumentation","src":"6836:279:1","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":539,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7129:22:1","nodeType":"FunctionDefinition","parameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":532,"mutability":"mutable","name":"hash","nameLocation":"7160:4:1","nodeType":"VariableDeclaration","scope":539,"src":"7152:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":531,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7152:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7151:14:1"},"returnParameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"message","nameLocation":"7197:7:1","nodeType":"VariableDeclaration","scope":539,"src":"7189:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":534,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7189:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7188:17:1"},"scope":594,"src":"7120:396:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":560,"nodeType":"Block","src":"7881:116:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7925:32:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":553,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"7976:1:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:1","memberName":"length","nodeType":"MemberAccess","src":"7976:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":551,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7959:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$228_$","typeString":"type(library Strings)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7967:8:1","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":58,"src":"7959:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":556,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"7987:1:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":548,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7908:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7912:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"7908:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":547,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7898:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:92:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":546,"id":559,"nodeType":"Return","src":"7891:99:1"}]},"documentation":{"id":540,"nodeType":"StructuredDocumentation","src":"7522:274:1","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":561,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7810:22:1","nodeType":"FunctionDefinition","parameters":{"id":543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":542,"mutability":"mutable","name":"s","nameLocation":"7846:1:1","nodeType":"VariableDeclaration","scope":561,"src":"7833:14:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":541,"name":"bytes","nodeType":"ElementaryTypeName","src":"7833:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7832:16:1"},"returnParameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":561,"src":"7872:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7872:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7871:9:1"},"scope":594,"src":"7801:196:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":572,"nodeType":"Block","src":"8443:290:1","statements":[{"AST":{"nodeType":"YulBlock","src":"8505:222:1","statements":[{"nodeType":"YulVariableDeclaration","src":"8519:22:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8536:4:1","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8530:5:1"},"nodeType":"YulFunctionCall","src":"8530:11:1"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8523:3:1","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8561:3:1"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8566:10:1","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8554:6:1"},"nodeType":"YulFunctionCall","src":"8554:23:1"},"nodeType":"YulExpressionStatement","src":"8554:23:1"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8601:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"8606:4:1","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8597:3:1"},"nodeType":"YulFunctionCall","src":"8597:14:1"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8613:15:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8590:6:1"},"nodeType":"YulFunctionCall","src":"8590:39:1"},"nodeType":"YulExpressionStatement","src":"8590:39:1"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8653:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"8658:4:1","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:1"},"nodeType":"YulFunctionCall","src":"8649:14:1"},{"name":"structHash","nodeType":"YulIdentifier","src":"8665:10:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8642:6:1"},"nodeType":"YulFunctionCall","src":"8642:34:1"},"nodeType":"YulExpressionStatement","src":"8642:34:1"},{"nodeType":"YulAssignment","src":"8689:28:1","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8707:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"8712:4:1","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8697:9:1"},"nodeType":"YulFunctionCall","src":"8697:20:1"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8689:4:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":569,"isOffset":false,"isSlot":false,"src":"8689:4:1","valueSize":1},{"declaration":564,"isOffset":false,"isSlot":false,"src":"8613:15:1","valueSize":1},{"declaration":566,"isOffset":false,"isSlot":false,"src":"8665:10:1","valueSize":1}],"id":571,"nodeType":"InlineAssembly","src":"8496:231:1"}]},"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"8003:328:1","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":573,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8345:15:1","nodeType":"FunctionDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"mutability":"mutable","name":"domainSeparator","nameLocation":"8369:15:1","nodeType":"VariableDeclaration","scope":573,"src":"8361:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8361:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"structHash","nameLocation":"8394:10:1","nodeType":"VariableDeclaration","scope":573,"src":"8386:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8386:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8360:45:1"},"returnParameters":{"id":570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":569,"mutability":"mutable","name":"data","nameLocation":"8437:4:1","nodeType":"VariableDeclaration","scope":573,"src":"8429:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8429:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8428:14:1"},"scope":594,"src":"8336:397:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":592,"nodeType":"Block","src":"9048:80:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9092:10:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":587,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"9104:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":588,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"9115:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":584,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9075:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9079:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"9075:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9075:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":583,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9065:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":582,"id":591,"nodeType":"Return","src":"9058:63:1"}]},"documentation":{"id":574,"nodeType":"StructuredDocumentation","src":"8739:193:1","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":593,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8946:31:1","nodeType":"FunctionDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"validator","nameLocation":"8986:9:1","nodeType":"VariableDeclaration","scope":593,"src":"8978:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":575,"name":"address","nodeType":"ElementaryTypeName","src":"8978:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"data","nameLocation":"9010:4:1","nodeType":"VariableDeclaration","scope":593,"src":"8997:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":577,"name":"bytes","nodeType":"ElementaryTypeName","src":"8997:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8977:38:1"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":593,"src":"9039:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":580,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9039:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9038:9:1"},"scope":594,"src":"8937:191:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":595,"src":"369:8761:1","usedErrors":[]}],"src":"112:9019:1"},"id":1},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1460]},"id":1461,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":596,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":597,"nodeType":"StructuredDocumentation","src":"128:73:2","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1460,"linearizedBaseContracts":[1460],"name":"Math","nameLocation":"210:4:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":601,"members":[{"id":598,"name":"Down","nameLocation":"245:4:2","nodeType":"EnumValue","src":"245:4:2"},{"id":599,"name":"Up","nameLocation":"287:2:2","nodeType":"EnumValue","src":"287:2:2"},{"id":600,"name":"Zero","nameLocation":"318:4:2","nodeType":"EnumValue","src":"318:4:2"}],"name":"Rounding","nameLocation":"226:8:2","nodeType":"EnumDefinition","src":"221:122:2"},{"body":{"id":618,"nodeType":"Block","src":"480:37:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":611,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"497:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":612,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"501:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":615,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"509:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:2","trueExpression":{"id":614,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"505:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":610,"id":617,"nodeType":"Return","src":"490:20:2"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"349:59:2","text":" @dev Returns the largest of two numbers."},"id":619,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:2","nodeType":"FunctionDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"a","nameLocation":"434:1:2","nodeType":"VariableDeclaration","scope":619,"src":"426:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"b","nameLocation":"445:1:2","nodeType":"VariableDeclaration","scope":619,"src":"437:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":605,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:2"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":619,"src":"471:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":608,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:2"},"scope":1460,"src":"413:104:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":636,"nodeType":"Block","src":"655:37:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":629,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"672:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":630,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"676:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":633,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"684:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:2","trueExpression":{"id":632,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"680:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":628,"id":635,"nodeType":"Return","src":"665:20:2"}]},"documentation":{"id":620,"nodeType":"StructuredDocumentation","src":"523:60:2","text":" @dev Returns the smallest of two numbers."},"id":637,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:2","nodeType":"FunctionDefinition","parameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":622,"mutability":"mutable","name":"a","nameLocation":"609:1:2","nodeType":"VariableDeclaration","scope":637,"src":"601:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":621,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":624,"mutability":"mutable","name":"b","nameLocation":"620:1:2","nodeType":"VariableDeclaration","scope":637,"src":"612:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":623,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:2"},"returnParameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":637,"src":"646:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":626,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:2"},"scope":1460,"src":"588:104:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":659,"nodeType":"Block","src":"876:82:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":647,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"931:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":648,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"935:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":650,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":651,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"941:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":652,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"945:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":654,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":646,"id":658,"nodeType":"Return","src":"923:28:2"}]},"documentation":{"id":638,"nodeType":"StructuredDocumentation","src":"698:102:2","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":660,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:2","nodeType":"FunctionDefinition","parameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":640,"mutability":"mutable","name":"a","nameLocation":"830:1:2","nodeType":"VariableDeclaration","scope":660,"src":"822:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"b","nameLocation":"841:1:2","nodeType":"VariableDeclaration","scope":660,"src":"833:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":641,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:2"},"returnParameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":660,"src":"867:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":644,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:2"},"scope":1460,"src":"805:153:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":684,"nodeType":"Block","src":"1228:123:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":670,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"1316:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":674,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"1330:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":678,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"1339:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:2","trueExpression":{"hexValue":"30","id":673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":669,"id":683,"nodeType":"Return","src":"1309:35:2"}]},"documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"964:188:2","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":685,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:2","nodeType":"FunctionDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"a","nameLocation":"1182:1:2","nodeType":"VariableDeclaration","scope":685,"src":"1174:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":662,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"b","nameLocation":"1193:1:2","nodeType":"VariableDeclaration","scope":685,"src":"1185:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:2"},"returnParameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":685,"src":"1219:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":667,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:2"},"scope":1460,"src":"1157:194:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":807,"nodeType":"Block","src":"1765:4115:2","statements":[{"id":806,"nodeType":"UncheckedBlock","src":"1775:4099:2","statements":[{"assignments":[698],"declarations":[{"constant":false,"id":698,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:2","nodeType":"VariableDeclaration","scope":806,"src":"2096:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":697,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":699,"nodeType":"VariableDeclarationStatement","src":"2096:13:2"},{"assignments":[701],"declarations":[{"constant":false,"id":701,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:2","nodeType":"VariableDeclaration","scope":806,"src":"2168:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":700,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":702,"nodeType":"VariableDeclarationStatement","src":"2168:13:2"},{"AST":{"nodeType":"YulBlock","src":"2248:157:2","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:2","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:2"},"nodeType":"YulFunctionCall","src":"2289:6:2"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:2"},"nodeType":"YulFunctionCall","src":"2276:20:2"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:2","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:2"},"nodeType":"YulFunctionCall","src":"2322:9:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:2"}]},{"nodeType":"YulAssignment","src":"2348:43:2","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:2"},"nodeType":"YulFunctionCall","src":"2361:14:2"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:2"},"nodeType":"YulFunctionCall","src":"2377:13:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:2"},"nodeType":"YulFunctionCall","src":"2357:34:2"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":698,"isOffset":false,"isSlot":false,"src":"2313:5:2","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"2369:5:2","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"2384:5:2","valueSize":1},{"declaration":701,"isOffset":false,"isSlot":false,"src":"2348:5:2","valueSize":1},{"declaration":688,"isOffset":false,"isSlot":false,"src":"2283:1:2","valueSize":1},{"declaration":688,"isOffset":false,"isSlot":false,"src":"2326:1:2","valueSize":1},{"declaration":690,"isOffset":false,"isSlot":false,"src":"2286:1:2","valueSize":1},{"declaration":690,"isOffset":false,"isSlot":false,"src":"2329:1:2","valueSize":1}],"id":703,"nodeType":"InlineAssembly","src":"2239:166:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":704,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2486:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":712,"nodeType":"IfStatement","src":"2482:368:2","trueBody":{"id":711,"nodeType":"Block","src":"2498:352:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":707,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"2816:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":708,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"2824:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":696,"id":710,"nodeType":"Return","src":"2809:26:2"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":714,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"2960:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":715,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2974:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":713,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":719,"nodeType":"ExpressionStatement","src":"2952:53:2"},{"assignments":[721],"declarations":[{"constant":false,"id":721,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:2","nodeType":"VariableDeclaration","scope":806,"src":"3261:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":722,"nodeType":"VariableDeclarationStatement","src":"3261:17:2"},{"AST":{"nodeType":"YulBlock","src":"3301:291:2","statements":[{"nodeType":"YulAssignment","src":"3370:38:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:2"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:2"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:2"},"nodeType":"YulFunctionCall","src":"3383:25:2"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:2"}]},{"nodeType":"YulAssignment","src":"3490:41:2","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:2"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:2"},"nodeType":"YulFunctionCall","src":"3510:20:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:2"},"nodeType":"YulFunctionCall","src":"3499:32:2"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:2"}]},{"nodeType":"YulAssignment","src":"3548:30:2","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:2"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:2"},"nodeType":"YulFunctionCall","src":"3557:21:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":692,"isOffset":false,"isSlot":false,"src":"3396:11:2","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"3524:5:2","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"3548:5:2","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"3561:5:2","valueSize":1},{"declaration":701,"isOffset":false,"isSlot":false,"src":"3490:5:2","valueSize":1},{"declaration":701,"isOffset":false,"isSlot":false,"src":"3503:5:2","valueSize":1},{"declaration":721,"isOffset":false,"isSlot":false,"src":"3370:9:2","valueSize":1},{"declaration":721,"isOffset":false,"isSlot":false,"src":"3513:9:2","valueSize":1},{"declaration":721,"isOffset":false,"isSlot":false,"src":"3568:9:2","valueSize":1},{"declaration":688,"isOffset":false,"isSlot":false,"src":"3390:1:2","valueSize":1},{"declaration":690,"isOffset":false,"isSlot":false,"src":"3393:1:2","valueSize":1}],"id":723,"nodeType":"InlineAssembly","src":"3292:300:2"},{"assignments":[725],"declarations":[{"constant":false,"id":725,"mutability":"mutable","name":"twos","nameLocation":"3907:4:2","nodeType":"VariableDeclaration","scope":806,"src":"3899:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":724,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":733,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":726,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"3914:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:2","subExpression":{"id":727,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"3930:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":731,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:2"},{"AST":{"nodeType":"YulBlock","src":"3969:362:2","statements":[{"nodeType":"YulAssignment","src":"4034:37:2","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:2"},"nodeType":"YulFunctionCall","src":"4049:22:2"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:2"}]},{"nodeType":"YulAssignment","src":"4138:25:2","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:2"},"nodeType":"YulFunctionCall","src":"4147:16:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:2"}]},{"nodeType":"YulAssignment","src":"4278:39:2","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:2","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:2"},"nodeType":"YulFunctionCall","src":"4294:12:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:2"},"nodeType":"YulFunctionCall","src":"4290:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:2","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:2"},"nodeType":"YulFunctionCall","src":"4286:31:2"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":692,"isOffset":false,"isSlot":false,"src":"4034:11:2","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"4053:11:2","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"4138:5:2","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"4151:5:2","valueSize":1},{"declaration":725,"isOffset":false,"isSlot":false,"src":"4066:4:2","valueSize":1},{"declaration":725,"isOffset":false,"isSlot":false,"src":"4158:4:2","valueSize":1},{"declaration":725,"isOffset":false,"isSlot":false,"src":"4278:4:2","valueSize":1},{"declaration":725,"isOffset":false,"isSlot":false,"src":"4301:4:2","valueSize":1},{"declaration":725,"isOffset":false,"isSlot":false,"src":"4308:4:2","valueSize":1}],"id":734,"nodeType":"InlineAssembly","src":"3960:371:2"},{"expression":{"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":735,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"4397:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":736,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"4406:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":737,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"4414:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":740,"nodeType":"ExpressionStatement","src":"4397:21:2"},{"assignments":[742],"declarations":[{"constant":false,"id":742,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:2","nodeType":"VariableDeclaration","scope":806,"src":"4736:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":741,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":749,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":744,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"4759:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":746,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:2"},{"expression":{"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":750,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"4992:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":752,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5007:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":753,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5021:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":757,"nodeType":"ExpressionStatement","src":"4992:36:2"},{"expression":{"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":758,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5061:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":760,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5076:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":761,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5090:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":765,"nodeType":"ExpressionStatement","src":"5061:36:2"},{"expression":{"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":766,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5131:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":768,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5146:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":769,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5160:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":773,"nodeType":"ExpressionStatement","src":"5131:36:2"},{"expression":{"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":774,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5201:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":776,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5216:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":777,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5230:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":781,"nodeType":"ExpressionStatement","src":"5201:36:2"},{"expression":{"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":782,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5271:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":784,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5286:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":785,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5300:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":789,"nodeType":"ExpressionStatement","src":"5271:36:2"},{"expression":{"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":790,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5342:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":792,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5357:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":793,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5371:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":797,"nodeType":"ExpressionStatement","src":"5342:36:2"},{"expression":{"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":798,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"5812:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":799,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"5821:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":800,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5829:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":803,"nodeType":"ExpressionStatement","src":"5812:24:2"},{"expression":{"id":804,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"5857:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":696,"id":805,"nodeType":"Return","src":"5850:13:2"}]}]},"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"1357:305:2","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":808,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:2","nodeType":"FunctionDefinition","parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"x","nameLocation":"1691:1:2","nodeType":"VariableDeclaration","scope":808,"src":"1683:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"y","nameLocation":"1702:1:2","nodeType":"VariableDeclaration","scope":808,"src":"1694:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":689,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:2","nodeType":"VariableDeclaration","scope":808,"src":"1705:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:2"},"returnParameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":695,"mutability":"mutable","name":"result","nameLocation":"1757:6:2","nodeType":"VariableDeclaration","scope":808,"src":"1749:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:2"},"scope":1460,"src":"1667:4213:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":851,"nodeType":"Block","src":"6122:189:2","statements":[{"assignments":[824],"declarations":[{"constant":false,"id":824,"mutability":"mutable","name":"result","nameLocation":"6140:6:2","nodeType":"VariableDeclaration","scope":851,"src":"6132:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":823,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":830,"initialValue":{"arguments":[{"id":826,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"6156:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":827,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"6159:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":828,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"6162:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":825,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[808,852],"referencedDeclaration":808,"src":"6149:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":831,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"6188:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":832,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"6200:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$601_$","typeString":"type(enum Math.Rounding)"}},"id":833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":599,"src":"6200:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"src":"6188:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":836,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"6222:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":837,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"6225:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":838,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"6228:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":835,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:2","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":848,"nodeType":"IfStatement","src":"6184:98:2","trueBody":{"id":847,"nodeType":"Block","src":"6246:36:2","statements":[{"expression":{"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":843,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"6260:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":846,"nodeType":"ExpressionStatement","src":"6260:11:2"}]}},{"expression":{"id":849,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"6298:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":822,"id":850,"nodeType":"Return","src":"6291:13:2"}]},"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"5886:121:2","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":852,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:2","nodeType":"FunctionDefinition","parameters":{"id":819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"x","nameLocation":"6036:1:2","nodeType":"VariableDeclaration","scope":852,"src":"6028:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":810,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"y","nameLocation":"6047:1:2","nodeType":"VariableDeclaration","scope":852,"src":"6039:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":815,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:2","nodeType":"VariableDeclaration","scope":852,"src":"6050:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":818,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:2","nodeType":"VariableDeclaration","scope":852,"src":"6071:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"typeName":{"id":817,"nodeType":"UserDefinedTypeName","pathNode":{"id":816,"name":"Rounding","nameLocations":["6071:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":601,"src":"6071:8:2"},"referencedDeclaration":601,"src":"6071:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:2"},"returnParameters":{"id":822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":852,"src":"6113:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:2"},"scope":1460,"src":"6012:299:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":963,"nodeType":"Block","src":"6587:1585:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":860,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"6601:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":866,"nodeType":"IfStatement","src":"6597:45:2","trueBody":{"id":865,"nodeType":"Block","src":"6609:33:2","statements":[{"expression":{"hexValue":"30","id":863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":859,"id":864,"nodeType":"Return","src":"6623:8:2"}]}},{"assignments":[868],"declarations":[{"constant":false,"id":868,"mutability":"mutable","name":"result","nameLocation":"7329:6:2","nodeType":"VariableDeclaration","scope":963,"src":"7321:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":867,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":877,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":871,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7349:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":870,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1132,1168],"referencedDeclaration":1132,"src":"7344:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":875,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:2"},{"id":962,"nodeType":"UncheckedBlock","src":"7758:408:2","statements":[{"expression":{"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":878,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7782:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":879,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7792:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":880,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7801:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":881,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7805:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":884,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":888,"nodeType":"ExpressionStatement","src":"7782:35:2"},{"expression":{"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":889,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7831:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":890,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7841:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":891,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7850:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":892,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7854:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":895,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":899,"nodeType":"ExpressionStatement","src":"7831:35:2"},{"expression":{"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":900,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7880:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":901,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7890:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":902,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7899:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":903,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7903:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":906,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":910,"nodeType":"ExpressionStatement","src":"7880:35:2"},{"expression":{"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":911,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7929:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":912,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7939:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":913,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7948:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":914,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7952:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":917,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":921,"nodeType":"ExpressionStatement","src":"7929:35:2"},{"expression":{"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":922,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7978:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":923,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7988:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":924,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7997:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":925,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"8001:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":928,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":932,"nodeType":"ExpressionStatement","src":"7978:35:2"},{"expression":{"id":942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":933,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"8027:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":934,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"8037:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":935,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"8046:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":936,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"8050:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":939,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":943,"nodeType":"ExpressionStatement","src":"8027:35:2"},{"expression":{"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":944,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"8076:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":945,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"8086:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":946,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"8095:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":947,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"8099:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":950,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":954,"nodeType":"ExpressionStatement","src":"8076:35:2"},{"expression":{"arguments":[{"id":956,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"8136:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":957,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"8144:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":958,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"8148:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":955,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"8132:3:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":859,"id":961,"nodeType":"Return","src":"8125:30:2"}]}]},"documentation":{"id":853,"nodeType":"StructuredDocumentation","src":"6317:208:2","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":964,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:2","nodeType":"FunctionDefinition","parameters":{"id":856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":855,"mutability":"mutable","name":"a","nameLocation":"6552:1:2","nodeType":"VariableDeclaration","scope":964,"src":"6544:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":854,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:2"},"returnParameters":{"id":859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":964,"src":"6578:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":857,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:2"},"scope":1460,"src":"6530:1642:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":999,"nodeType":"Block","src":"8348:161:2","statements":[{"id":998,"nodeType":"UncheckedBlock","src":"8358:145:2","statements":[{"assignments":[976],"declarations":[{"constant":false,"id":976,"mutability":"mutable","name":"result","nameLocation":"8390:6:2","nodeType":"VariableDeclaration","scope":998,"src":"8382:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":975,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":980,"initialValue":{"arguments":[{"id":978,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"8404:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":977,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[964,1000],"referencedDeclaration":964,"src":"8399:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":981,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"8427:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":982,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"8437:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":983,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"8449:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$601_$","typeString":"type(enum Math.Rounding)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":599,"src":"8449:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"src":"8437:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":986,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"8464:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":987,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"8473:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":989,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"8482:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:2","trueExpression":{"hexValue":"31","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":995,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":974,"id":997,"nodeType":"Return","src":"8420:72:2"}]}]},"documentation":{"id":965,"nodeType":"StructuredDocumentation","src":"8178:89:2","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1000,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:2","nodeType":"FunctionDefinition","parameters":{"id":971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"a","nameLocation":"8294:1:2","nodeType":"VariableDeclaration","scope":1000,"src":"8286:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":966,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":970,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:2","nodeType":"VariableDeclaration","scope":1000,"src":"8297:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"typeName":{"id":969,"nodeType":"UserDefinedTypeName","pathNode":{"id":968,"name":"Rounding","nameLocations":["8297:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":601,"src":"8297:8:2"},"referencedDeclaration":601,"src":"8297:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:2"},"returnParameters":{"id":974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":973,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1000,"src":"8339:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":972,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:2"},"scope":1460,"src":"8272:237:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1131,"nodeType":"Block","src":"8694:922:2","statements":[{"assignments":[1009],"declarations":[{"constant":false,"id":1009,"mutability":"mutable","name":"result","nameLocation":"8712:6:2","nodeType":"VariableDeclaration","scope":1131,"src":"8704:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1008,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1011,"initialValue":{"hexValue":"30","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:2"},{"id":1128,"nodeType":"UncheckedBlock","src":"8732:855:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8760:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1026,"nodeType":"IfStatement","src":"8756:99:2","trueBody":{"id":1025,"nodeType":"Block","src":"8778:77:2","statements":[{"expression":{"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8796:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1020,"nodeType":"ExpressionStatement","src":"8796:13:2"},{"expression":{"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1021,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"8827:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1024,"nodeType":"ExpressionStatement","src":"8827:13:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8872:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1041,"nodeType":"IfStatement","src":"8868:96:2","trueBody":{"id":1040,"nodeType":"Block","src":"8889:75:2","statements":[{"expression":{"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8907:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1035,"nodeType":"ExpressionStatement","src":"8907:12:2"},{"expression":{"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1036,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"8937:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1039,"nodeType":"ExpressionStatement","src":"8937:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8981:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1056,"nodeType":"IfStatement","src":"8977:96:2","trueBody":{"id":1055,"nodeType":"Block","src":"8998:75:2","statements":[{"expression":{"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9016:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1050,"nodeType":"ExpressionStatement","src":"9016:12:2"},{"expression":{"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1051,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9046:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1054,"nodeType":"ExpressionStatement","src":"9046:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1057,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9090:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1071,"nodeType":"IfStatement","src":"9086:96:2","trueBody":{"id":1070,"nodeType":"Block","src":"9107:75:2","statements":[{"expression":{"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9125:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1065,"nodeType":"ExpressionStatement","src":"9125:12:2"},{"expression":{"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9155:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1069,"nodeType":"ExpressionStatement","src":"9155:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9199:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1086,"nodeType":"IfStatement","src":"9195:93:2","trueBody":{"id":1085,"nodeType":"Block","src":"9215:73:2","statements":[{"expression":{"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9233:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1080,"nodeType":"ExpressionStatement","src":"9233:11:2"},{"expression":{"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1081,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9262:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1084,"nodeType":"ExpressionStatement","src":"9262:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9305:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1101,"nodeType":"IfStatement","src":"9301:93:2","trueBody":{"id":1100,"nodeType":"Block","src":"9321:73:2","statements":[{"expression":{"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1092,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9339:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1095,"nodeType":"ExpressionStatement","src":"9339:11:2"},{"expression":{"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9368:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1099,"nodeType":"ExpressionStatement","src":"9368:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1102,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9411:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1116,"nodeType":"IfStatement","src":"9407:93:2","trueBody":{"id":1115,"nodeType":"Block","src":"9427:73:2","statements":[{"expression":{"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1107,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9445:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1110,"nodeType":"ExpressionStatement","src":"9445:11:2"},{"expression":{"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1111,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9474:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1114,"nodeType":"ExpressionStatement","src":"9474:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9517:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1127,"nodeType":"IfStatement","src":"9513:64:2","trueBody":{"id":1126,"nodeType":"Block","src":"9533:44:2","statements":[{"expression":{"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1122,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9551:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1125,"nodeType":"ExpressionStatement","src":"9551:11:2"}]}}]},{"expression":{"id":1129,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9603:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1007,"id":1130,"nodeType":"Return","src":"9596:13:2"}]},"documentation":{"id":1001,"nodeType":"StructuredDocumentation","src":"8515:113:2","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1132,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:2","nodeType":"FunctionDefinition","parameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1003,"mutability":"mutable","name":"value","nameLocation":"8655:5:2","nodeType":"VariableDeclaration","scope":1132,"src":"8647:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1002,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:2"},"returnParameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1132,"src":"8685:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:2"},"scope":1460,"src":"8633:983:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1167,"nodeType":"Block","src":"9849:165:2","statements":[{"id":1166,"nodeType":"UncheckedBlock","src":"9859:149:2","statements":[{"assignments":[1144],"declarations":[{"constant":false,"id":1144,"mutability":"mutable","name":"result","nameLocation":"9891:6:2","nodeType":"VariableDeclaration","scope":1166,"src":"9883:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1143,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1148,"initialValue":{"arguments":[{"id":1146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"9905:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1145,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1132,1168],"referencedDeclaration":1132,"src":"9900:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"9932:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1150,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"9942:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1151,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"9954:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$601_$","typeString":"type(enum Math.Rounding)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":599,"src":"9954:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"src":"9942:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1155,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"9974:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"9983:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:2","trueExpression":{"hexValue":"31","id":1160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1163,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1142,"id":1165,"nodeType":"Return","src":"9925:72:2"}]}]},"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"9622:142:2","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1168,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:2","nodeType":"FunctionDefinition","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1135,"mutability":"mutable","name":"value","nameLocation":"9791:5:2","nodeType":"VariableDeclaration","scope":1168,"src":"9783:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1138,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:2","nodeType":"VariableDeclaration","scope":1168,"src":"9798:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"typeName":{"id":1137,"nodeType":"UserDefinedTypeName","pathNode":{"id":1136,"name":"Rounding","nameLocations":["9798:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":601,"src":"9798:8:2"},"referencedDeclaration":601,"src":"9798:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:2"},"returnParameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1168,"src":"9840:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:2"},"scope":1460,"src":"9769:245:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1296,"nodeType":"Block","src":"10201:854:2","statements":[{"assignments":[1177],"declarations":[{"constant":false,"id":1177,"mutability":"mutable","name":"result","nameLocation":"10219:6:2","nodeType":"VariableDeclaration","scope":1296,"src":"10211:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1176,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1179,"initialValue":{"hexValue":"30","id":1178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:2"},{"id":1293,"nodeType":"UncheckedBlock","src":"10239:787:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10267:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1196,"nodeType":"IfStatement","src":"10263:103:2","trueBody":{"id":1195,"nodeType":"Block","src":"10286:80:2","statements":[{"expression":{"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1185,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10304:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1190,"nodeType":"ExpressionStatement","src":"10304:17:2"},{"expression":{"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1191,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"10339:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1194,"nodeType":"ExpressionStatement","src":"10339:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10383:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1213,"nodeType":"IfStatement","src":"10379:103:2","trueBody":{"id":1212,"nodeType":"Block","src":"10402:80:2","statements":[{"expression":{"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10420:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1207,"nodeType":"ExpressionStatement","src":"10420:17:2"},{"expression":{"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1208,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"10455:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1211,"nodeType":"ExpressionStatement","src":"10455:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10499:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1230,"nodeType":"IfStatement","src":"10495:103:2","trueBody":{"id":1229,"nodeType":"Block","src":"10518:80:2","statements":[{"expression":{"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10536:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1224,"nodeType":"ExpressionStatement","src":"10536:17:2"},{"expression":{"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1225,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"10571:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1228,"nodeType":"ExpressionStatement","src":"10571:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10615:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1247,"nodeType":"IfStatement","src":"10611:100:2","trueBody":{"id":1246,"nodeType":"Block","src":"10633:78:2","statements":[{"expression":{"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1236,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10651:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1241,"nodeType":"ExpressionStatement","src":"10651:16:2"},{"expression":{"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1242,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"10685:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1245,"nodeType":"ExpressionStatement","src":"10685:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1248,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10728:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:2","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1264,"nodeType":"IfStatement","src":"10724:100:2","trueBody":{"id":1263,"nodeType":"Block","src":"10746:78:2","statements":[{"expression":{"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1253,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10764:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:2","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1258,"nodeType":"ExpressionStatement","src":"10764:16:2"},{"expression":{"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"10798:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1262,"nodeType":"ExpressionStatement","src":"10798:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1265,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10841:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1281,"nodeType":"IfStatement","src":"10837:100:2","trueBody":{"id":1280,"nodeType":"Block","src":"10859:78:2","statements":[{"expression":{"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10877:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1275,"nodeType":"ExpressionStatement","src":"10877:16:2"},{"expression":{"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1276,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"10911:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1279,"nodeType":"ExpressionStatement","src":"10911:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1282,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10954:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1292,"nodeType":"IfStatement","src":"10950:66:2","trueBody":{"id":1291,"nodeType":"Block","src":"10972:44:2","statements":[{"expression":{"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1287,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"10990:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1290,"nodeType":"ExpressionStatement","src":"10990:11:2"}]}}]},{"expression":{"id":1294,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"11042:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1175,"id":1295,"nodeType":"Return","src":"11035:13:2"}]},"documentation":{"id":1169,"nodeType":"StructuredDocumentation","src":"10020:114:2","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1297,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:2","nodeType":"FunctionDefinition","parameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"value","nameLocation":"10162:5:2","nodeType":"VariableDeclaration","scope":1297,"src":"10154:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:2"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1297,"src":"10192:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:2"},"scope":1460,"src":"10139:916:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1332,"nodeType":"Block","src":"11290:167:2","statements":[{"id":1331,"nodeType":"UncheckedBlock","src":"11300:151:2","statements":[{"assignments":[1309],"declarations":[{"constant":false,"id":1309,"mutability":"mutable","name":"result","nameLocation":"11332:6:2","nodeType":"VariableDeclaration","scope":1331,"src":"11324:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1308,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1313,"initialValue":{"arguments":[{"id":1311,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"11347:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1310,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1297,1333],"referencedDeclaration":1297,"src":"11341:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1314,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"11374:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1315,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"11384:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1316,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"11396:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$601_$","typeString":"type(enum Math.Rounding)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":599,"src":"11396:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"src":"11384:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1320,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"11417:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"11426:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:2","trueExpression":{"hexValue":"31","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1328,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1307,"id":1330,"nodeType":"Return","src":"11367:73:2"}]}]},"documentation":{"id":1298,"nodeType":"StructuredDocumentation","src":"11061:143:2","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1333,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:2","nodeType":"FunctionDefinition","parameters":{"id":1304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"value","nameLocation":"11232:5:2","nodeType":"VariableDeclaration","scope":1333,"src":"11224:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1299,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1303,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:2","nodeType":"VariableDeclaration","scope":1333,"src":"11239:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"typeName":{"id":1302,"nodeType":"UserDefinedTypeName","pathNode":{"id":1301,"name":"Rounding","nameLocations":["11239:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":601,"src":"11239:8:2"},"referencedDeclaration":601,"src":"11239:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:2"},"returnParameters":{"id":1307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1333,"src":"11281:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1305,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:2"},"scope":1460,"src":"11209:248:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1419,"nodeType":"Block","src":"11771:600:2","statements":[{"assignments":[1342],"declarations":[{"constant":false,"id":1342,"mutability":"mutable","name":"result","nameLocation":"11789:6:2","nodeType":"VariableDeclaration","scope":1419,"src":"11781:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1341,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1344,"initialValue":{"hexValue":"30","id":1343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:2"},{"id":1416,"nodeType":"UncheckedBlock","src":"11809:533:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"11837:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1359,"nodeType":"IfStatement","src":"11833:98:2","trueBody":{"id":1358,"nodeType":"Block","src":"11855:76:2","statements":[{"expression":{"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"11873:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1353,"nodeType":"ExpressionStatement","src":"11873:13:2"},{"expression":{"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"11904:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1357,"nodeType":"ExpressionStatement","src":"11904:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"11948:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1374,"nodeType":"IfStatement","src":"11944:95:2","trueBody":{"id":1373,"nodeType":"Block","src":"11965:74:2","statements":[{"expression":{"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1365,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"11983:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1368,"nodeType":"ExpressionStatement","src":"11983:12:2"},{"expression":{"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1369,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"12013:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1372,"nodeType":"ExpressionStatement","src":"12013:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1375,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12056:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1389,"nodeType":"IfStatement","src":"12052:95:2","trueBody":{"id":1388,"nodeType":"Block","src":"12073:74:2","statements":[{"expression":{"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1380,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12091:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1383,"nodeType":"ExpressionStatement","src":"12091:12:2"},{"expression":{"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1384,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"12121:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1387,"nodeType":"ExpressionStatement","src":"12121:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1390,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12164:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1404,"nodeType":"IfStatement","src":"12160:95:2","trueBody":{"id":1403,"nodeType":"Block","src":"12181:74:2","statements":[{"expression":{"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1395,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12199:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1398,"nodeType":"ExpressionStatement","src":"12199:12:2"},{"expression":{"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1399,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"12229:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1402,"nodeType":"ExpressionStatement","src":"12229:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1405,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12272:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1415,"nodeType":"IfStatement","src":"12268:64:2","trueBody":{"id":1414,"nodeType":"Block","src":"12288:44:2","statements":[{"expression":{"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1410,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"12306:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1413,"nodeType":"ExpressionStatement","src":"12306:11:2"}]}}]},{"expression":{"id":1417,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"12358:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1340,"id":1418,"nodeType":"Return","src":"12351:13:2"}]},"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"11463:240:2","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1420,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:2","nodeType":"FunctionDefinition","parameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"value","nameLocation":"11732:5:2","nodeType":"VariableDeclaration","scope":1420,"src":"11724:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:2"},"returnParameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1420,"src":"11762:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1338,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:2"},"scope":1460,"src":"11708:663:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1458,"nodeType":"Block","src":"12608:174:2","statements":[{"id":1457,"nodeType":"UncheckedBlock","src":"12618:158:2","statements":[{"assignments":[1432],"declarations":[{"constant":false,"id":1432,"mutability":"mutable","name":"result","nameLocation":"12650:6:2","nodeType":"VariableDeclaration","scope":1457,"src":"12642:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1431,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1436,"initialValue":{"arguments":[{"id":1434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"12666:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1433,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1420,1459],"referencedDeclaration":1420,"src":"12659:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1437,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"12693:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1438,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"12703:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1439,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"12715:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$601_$","typeString":"type(enum Math.Rounding)"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":599,"src":"12715:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"src":"12703:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1443,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"12736:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1446,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"12751:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:2","trueExpression":{"hexValue":"31","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1454,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1430,"id":1456,"nodeType":"Return","src":"12686:79:2"}]}]},"documentation":{"id":1421,"nodeType":"StructuredDocumentation","src":"12377:144:2","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1459,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:2","nodeType":"FunctionDefinition","parameters":{"id":1427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1423,"mutability":"mutable","name":"value","nameLocation":"12550:5:2","nodeType":"VariableDeclaration","scope":1459,"src":"12542:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1422,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:2","nodeType":"VariableDeclaration","scope":1459,"src":"12557:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"},"typeName":{"id":1425,"nodeType":"UserDefinedTypeName","pathNode":{"id":1424,"name":"Rounding","nameLocations":["12557:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":601,"src":"12557:8:2"},"referencedDeclaration":601,"src":"12557:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$601","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:2"},"returnParameters":{"id":1430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1459,"src":"12599:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1428,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:2"},"scope":1460,"src":"12526:256:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1461,"src":"202:12582:2","usedErrors":[]}],"src":"103:12682:2"},"id":2},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[1565]},"id":1566,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1462,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"134:80:3","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1565,"linearizedBaseContracts":[1565],"name":"SignedMath","nameLocation":"223:10:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":1480,"nodeType":"Block","src":"375:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1473,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"392:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1474,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"396:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1477,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"404:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:3","trueExpression":{"id":1476,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"400:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1472,"id":1479,"nodeType":"Return","src":"385:20:3"}]},"documentation":{"id":1464,"nodeType":"StructuredDocumentation","src":"240:66:3","text":" @dev Returns the largest of two signed numbers."},"id":1481,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:3","nodeType":"FunctionDefinition","parameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"a","nameLocation":"331:1:3","nodeType":"VariableDeclaration","scope":1481,"src":"324:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1465,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1468,"mutability":"mutable","name":"b","nameLocation":"341:1:3","nodeType":"VariableDeclaration","scope":1481,"src":"334:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1467,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:3"},"returnParameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1481,"src":"367:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1470,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:3"},"scope":1565,"src":"311:101:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1498,"nodeType":"Block","src":"554:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1491,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"571:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1492,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"575:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1495,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"583:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:3","trueExpression":{"id":1494,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"579:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1490,"id":1497,"nodeType":"Return","src":"564:20:3"}]},"documentation":{"id":1482,"nodeType":"StructuredDocumentation","src":"418:67:3","text":" @dev Returns the smallest of two signed numbers."},"id":1499,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:3","nodeType":"FunctionDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1484,"mutability":"mutable","name":"a","nameLocation":"510:1:3","nodeType":"VariableDeclaration","scope":1499,"src":"503:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1483,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1486,"mutability":"mutable","name":"b","nameLocation":"520:1:3","nodeType":"VariableDeclaration","scope":1499,"src":"513:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1485,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:3"},"returnParameters":{"id":1490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1499,"src":"546:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1488,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:3"},"scope":1565,"src":"490:101:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1542,"nodeType":"Block","src":"796:162:3","statements":[{"assignments":[1510],"declarations":[{"constant":false,"id":1510,"mutability":"mutable","name":"x","nameLocation":"865:1:3","nodeType":"VariableDeclaration","scope":1542,"src":"858:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1509,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1523,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1511,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"870:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1512,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"874:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1514,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1515,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"881:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1516,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"885:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1518,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1521,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:3"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1524,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"910:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1529,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"930:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:3","typeDescriptions":{}}},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:3","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1525,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:3","typeDescriptions":{}}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1534,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"944:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1535,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"948:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1537,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1539,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1508,"id":1541,"nodeType":"Return","src":"903:48:3"}]},"documentation":{"id":1500,"nodeType":"StructuredDocumentation","src":"597:126:3","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":1543,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:3","nodeType":"FunctionDefinition","parameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1502,"mutability":"mutable","name":"a","nameLocation":"752:1:3","nodeType":"VariableDeclaration","scope":1543,"src":"745:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1501,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1504,"mutability":"mutable","name":"b","nameLocation":"762:1:3","nodeType":"VariableDeclaration","scope":1543,"src":"755:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1503,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:3"},"returnParameters":{"id":1508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1543,"src":"788:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1506,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:3"},"scope":1565,"src":"728:230:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1563,"nodeType":"Block","src":"1102:158:3","statements":[{"id":1562,"nodeType":"UncheckedBlock","src":"1112:142:3","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1553,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"1227:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:3","subExpression":{"id":1557,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"1241:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:3","trueExpression":{"id":1556,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"1236:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1551,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:3","typeDescriptions":{}}},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1550,"id":1561,"nodeType":"Return","src":"1212:31:3"}]}]},"documentation":{"id":1544,"nodeType":"StructuredDocumentation","src":"964:78:3","text":" @dev Returns the absolute unsigned value of a signed value."},"id":1564,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:3","nodeType":"FunctionDefinition","parameters":{"id":1547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"mutability":"mutable","name":"n","nameLocation":"1067:1:3","nodeType":"VariableDeclaration","scope":1564,"src":"1060:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1545,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:3"},"returnParameters":{"id":1550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1564,"src":"1093:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1548,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:3"},"scope":1565,"src":"1047:213:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1566,"src":"215:1047:3","usedErrors":[]}],"src":"109:1154:3"},"id":3},"contracts/Enum.sol":{"ast":{"absolutePath":"contracts/Enum.sol","exportedSymbols":{"Enum":[1572]},"id":1573,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1567,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"42:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"Enum","contractDependencies":[],"contractKind":"contract","documentation":{"id":1568,"nodeType":"StructuredDocumentation","src":"68:89:4","text":"@title Enum - Collection of enums\n @author Richard Meissner - <richard@gnosis.pm>"},"fullyImplemented":true,"id":1572,"linearizedBaseContracts":[1572],"name":"Enum","nameLocation":"166:4:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Enum.Operation","id":1571,"members":[{"id":1569,"name":"Call","nameLocation":"202:4:4","nodeType":"EnumValue","src":"202:4:4"},{"id":1570,"name":"DelegateCall","nameLocation":"216:12:4","nodeType":"EnumValue","src":"216:12:4"}],"name":"Operation","nameLocation":"182:9:4","nodeType":"EnumDefinition","src":"177:57:4"}],"scope":1573,"src":"157:79:4","usedErrors":[]}],"src":"42:195:4"},"id":4},"contracts/Safe2LinkModule.sol":{"ast":{"absolutePath":"contracts/Safe2LinkModule.sol","exportedSymbols":{"ECDSA":[594],"Enum":[1572],"GnosisSafe":[1592],"Math":[1460],"Safe2LinkModule":[1901],"SignedMath":[1565],"Strings":[228]},"id":1902,"license":"LGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1574,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"42:24:5"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":1575,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1902,"sourceUnit":595,"src":"68:62:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Enum.sol","file":"./Enum.sol","id":1576,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1902,"sourceUnit":1573,"src":"132:20:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"GnosisSafe","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1592,"linearizedBaseContracts":[1592],"name":"GnosisSafe","nameLocation":"165:10:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1577,"nodeType":"StructuredDocumentation","src":"182:325:5","text":"@dev Allows a Module to execute a Safe transaction without any further confirmations.\n @param to Destination address of module transaction.\n @param value Ether value of module transaction.\n @param data Data payload of module transaction.\n @param operation Operation type of module transaction."},"functionSelector":"468721a7","id":1591,"implemented":false,"kind":"function","modifiers":[],"name":"execTransactionFromModule","nameLocation":"521:25:5","nodeType":"FunctionDefinition","parameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"to","nameLocation":"564:2:5","nodeType":"VariableDeclaration","scope":1591,"src":"556:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1578,"name":"address","nodeType":"ElementaryTypeName","src":"556:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1581,"mutability":"mutable","name":"value","nameLocation":"584:5:5","nodeType":"VariableDeclaration","scope":1591,"src":"576:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1580,"name":"uint256","nodeType":"ElementaryTypeName","src":"576:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"data","nameLocation":"614:4:5","nodeType":"VariableDeclaration","scope":1591,"src":"599:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1582,"name":"bytes","nodeType":"ElementaryTypeName","src":"599:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"operation","nameLocation":"643:9:5","nodeType":"VariableDeclaration","scope":1591,"src":"628:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$1571","typeString":"enum Enum.Operation"},"typeName":{"id":1585,"nodeType":"UserDefinedTypeName","pathNode":{"id":1584,"name":"Enum.Operation","nameLocations":["628:4:5","633:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":1571,"src":"628:14:5"},"referencedDeclaration":1571,"src":"628:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$1571","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"546:112:5"},"returnParameters":{"id":1590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1589,"mutability":"mutable","name":"success","nameLocation":"682:7:5","nodeType":"VariableDeclaration","scope":1591,"src":"677:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1588,"name":"bool","nodeType":"ElementaryTypeName","src":"677:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"676:14:5"},"scope":1592,"src":"512:179:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1902,"src":"155:538:5","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"Safe2LinkModule","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1901,"linearizedBaseContracts":[1901],"name":"Safe2LinkModule","nameLocation":"704:15:5","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"a3f4df7e","id":1595,"mutability":"constant","name":"NAME","nameLocation":"750:4:5","nodeType":"VariableDeclaration","scope":1901,"src":"727:48:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1593,"name":"string","nodeType":"ElementaryTypeName","src":"727:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"53616665324c696e6b204d6f64756c65","id":1594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"757:18:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_3190eec94ba2353ab7ad91962dd3dcb999c2a2bf353cfc04c06723903d9f9085","typeString":"literal_string \"Safe2Link Module\""},"value":"Safe2Link Module"},"visibility":"public"},{"constant":true,"functionSelector":"ffa1ad74","id":1598,"mutability":"constant","name":"VERSION","nameLocation":"804:7:5","nodeType":"VariableDeclaration","scope":1901,"src":"781:40:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1596,"name":"string","nodeType":"ElementaryTypeName","src":"781:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"302e312e30","id":1597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"814:7:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa7cdbe2cce2ec7b606b0e199ddd9b264a6e645e767fb8479a7917dcd1b8693f","typeString":"literal_string \"0.1.0\""},"value":"0.1.0"},"visibility":"public"},{"constant":false,"functionSelector":"f56e81fa","id":1605,"mutability":"mutable","name":"tokens","nameLocation":"920:6:5","nodeType":"VariableDeclaration","scope":1901,"src":"863:63:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$_$","typeString":"mapping(address => mapping(address => address[]))"},"typeName":{"id":1604,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1599,"name":"address","nodeType":"ElementaryTypeName","src":"871:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"863:49:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$_$","typeString":"mapping(address => mapping(address => address[]))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1603,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1600,"name":"address","nodeType":"ElementaryTypeName","src":"890:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"882:29:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":1601,"name":"address","nodeType":"ElementaryTypeName","src":"901:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1602,"nodeType":"ArrayTypeName","src":"901:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}}},"visibility":"public"},{"canonicalName":"Safe2LinkModule.Link","id":1618,"members":[{"constant":false,"id":1607,"mutability":"mutable","name":"pubKey20","nameLocation":"1021:8:5","nodeType":"VariableDeclaration","scope":1618,"src":"1013:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1606,"name":"address","nodeType":"ElementaryTypeName","src":"1013:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1609,"mutability":"mutable","name":"amount","nameLocation":"1121:6:5","nodeType":"VariableDeclaration","scope":1618,"src":"1113:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1113:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1611,"mutability":"mutable","name":"tokenAddress","nameLocation":"1297:12:5","nodeType":"VariableDeclaration","scope":1618,"src":"1289:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1610,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1613,"mutability":"mutable","name":"claimed","nameLocation":"1383:7:5","nodeType":"VariableDeclaration","scope":1618,"src":"1378:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1612,"name":"bool","nodeType":"ElementaryTypeName","src":"1378:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"timestamp","nameLocation":"1449:9:5","nodeType":"VariableDeclaration","scope":1618,"src":"1442:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":1614,"name":"uint40","nodeType":"ElementaryTypeName","src":"1442:6:5","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"},{"constant":false,"id":1617,"mutability":"mutable","name":"account","nameLocation":"1515:7:5","nodeType":"VariableDeclaration","scope":1618,"src":"1507:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1616,"name":"address","nodeType":"ElementaryTypeName","src":"1507:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Link","nameLocation":"998:4:5","nodeType":"StructDefinition","scope":1901,"src":"991:574:5","visibility":"public"},{"constant":false,"functionSelector":"881d8a40","id":1622,"mutability":"mutable","name":"links","nameLocation":"1586:5:5","nodeType":"VariableDeclaration","scope":1901,"src":"1572:19:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link[]"},"typeName":{"baseType":{"id":1620,"nodeType":"UserDefinedTypeName","pathNode":{"id":1619,"name":"Link","nameLocations":["1572:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":1618,"src":"1572:4:5"},"referencedDeclaration":1618,"src":"1572:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_storage_ptr","typeString":"struct Safe2LinkModule.Link"}},"id":1621,"nodeType":"ArrayTypeName","src":"1572:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage_ptr","typeString":"struct Safe2LinkModule.Link[]"}},"visibility":"public"},{"anonymous":false,"eventSelector":"d0b52dbf7f8c29477b6ae9116c857532274475062b33c1f29e0c92f745c1ffbf","id":1630,"name":"LinkEvent","nameLocation":"1640:9:5","nodeType":"EventDefinition","parameters":{"id":1629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"indexed":true,"mutability":"mutable","name":"_index","nameLocation":"1675:6:5","nodeType":"VariableDeclaration","scope":1630,"src":"1659:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"1659:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1626,"indexed":false,"mutability":"mutable","name":"_amount","nameLocation":"1691:7:5","nodeType":"VariableDeclaration","scope":1630,"src":"1683:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1625,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1628,"indexed":true,"mutability":"mutable","name":"_senderAddress","nameLocation":"1716:14:5","nodeType":"VariableDeclaration","scope":1630,"src":"1700:30:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1627,"name":"address","nodeType":"ElementaryTypeName","src":"1700:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1649:87:5"},"src":"1634:103:5"},{"anonymous":false,"eventSelector":"a62bf33e3860a18b08244c1b59b8aa4920be374252eb534e0ab47d5f7a18ca18","id":1638,"name":"WithdrawEvent","nameLocation":"1748:13:5","nodeType":"EventDefinition","parameters":{"id":1637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1632,"indexed":true,"mutability":"mutable","name":"_index","nameLocation":"1787:6:5","nodeType":"VariableDeclaration","scope":1638,"src":"1771:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1631,"name":"uint256","nodeType":"ElementaryTypeName","src":"1771:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1634,"indexed":false,"mutability":"mutable","name":"_amount","nameLocation":"1803:7:5","nodeType":"VariableDeclaration","scope":1638,"src":"1795:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1633,"name":"uint256","nodeType":"ElementaryTypeName","src":"1795:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1636,"indexed":true,"mutability":"mutable","name":"_recipientAddress","nameLocation":"1828:17:5","nodeType":"VariableDeclaration","scope":1638,"src":"1812:33:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1635,"name":"address","nodeType":"ElementaryTypeName","src":"1812:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1761:90:5"},"src":"1742:110:5"},{"anonymous":false,"eventSelector":"7ba22a0cbd3226111d8a61812ff4cd1934aace2147b8c59de1ecc9975f7af218","id":1642,"name":"MessageEvent","nameLocation":"1865:12:5","nodeType":"EventDefinition","parameters":{"id":1641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1640,"indexed":false,"mutability":"mutable","name":"message","nameLocation":"1885:7:5","nodeType":"VariableDeclaration","scope":1642,"src":"1878:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1639,"name":"string","nodeType":"ElementaryTypeName","src":"1878:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1877:16:5"},"src":"1859:35:5"},{"body":{"id":1687,"nodeType":"Block","src":"2448:497:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1658,"name":"_tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"2541:13:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1659,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"2580:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2614:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":1661,"name":"_pubKey20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"2647:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1662,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2683:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2687:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2683:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":1666,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2729:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2735:9:5","memberName":"timestamp","nodeType":"MemberAccess","src":"2729:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2722:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":1664,"name":"uint40","nodeType":"ElementaryTypeName","src":"2722:6:5","typeDescriptions":{}}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2722:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint40","typeString":"uint40"}],"id":1657,"name":"Link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"2504:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Link_$1618_storage_ptr_$","typeString":"type(struct Safe2LinkModule.Link storage pointer)"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2527:12:5","2572:6:5","2605:7:5","2637:8:5","2674:7:5","2711:9:5"],"names":["tokenAddress","amount","claimed","pubKey20","account","timestamp"],"nodeType":"FunctionCall","src":"2504:256:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link memory"}],"expression":{"id":1654,"name":"links","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"2480:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link storage ref[] storage ref"}},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2486:4:5","memberName":"push","nodeType":"MemberAccess","src":"2480:10:5","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Link_$1618_storage_$dyn_storage_ptr_$_t_struct$_Link_$1618_storage_$returns$__$attached_to$_t_array$_t_struct$_Link_$1618_storage_$dyn_storage_ptr_$","typeString":"function (struct Safe2LinkModule.Link storage ref[] storage pointer,struct Safe2LinkModule.Link storage ref)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2480:290:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1671,"nodeType":"ExpressionStatement","src":"2480:290:5"},{"eventCall":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1673,"name":"links","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"2830:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link storage ref[] storage ref"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2836:6:5","memberName":"length","nodeType":"MemberAccess","src":"2830:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2845:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2830:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1677,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"2848:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1678,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2857:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2861:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2857:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1672,"name":"LinkEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"2820:9:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address)"}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2820:48:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1681,"nodeType":"EmitStatement","src":"2815:53:5"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1682,"name":"links","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"2922:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link storage ref[] storage ref"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2928:6:5","memberName":"length","nodeType":"MemberAccess","src":"2922:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2937:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2922:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1653,"id":1686,"nodeType":"Return","src":"2915:23:5"}]},"documentation":{"id":1643,"nodeType":"StructuredDocumentation","src":"1902:407:5","text":" @notice Function to make a deposit\n @dev For token deposits, allowance must be set before calling this function\n @param _tokenAddress address of the token being sent. 0x0 for eth\n @param _amount uint256 of the amount of tokens being sent (if erc20)\n @param _pubKey20 last 20 bytes of the public key of the deposit signer\n @return uint256 index of the deposit"},"functionSelector":"55c3d97a","id":1688,"implemented":true,"kind":"function","modifiers":[],"name":"createLink","nameLocation":"2323:10:5","nodeType":"FunctionDefinition","parameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1645,"mutability":"mutable","name":"_tokenAddress","nameLocation":"2351:13:5","nodeType":"VariableDeclaration","scope":1688,"src":"2343:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1644,"name":"address","nodeType":"ElementaryTypeName","src":"2343:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1647,"mutability":"mutable","name":"_amount","nameLocation":"2382:7:5","nodeType":"VariableDeclaration","scope":1688,"src":"2374:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1646,"name":"uint256","nodeType":"ElementaryTypeName","src":"2374:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1649,"mutability":"mutable","name":"_pubKey20","nameLocation":"2407:9:5","nodeType":"VariableDeclaration","scope":1688,"src":"2399:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1648,"name":"address","nodeType":"ElementaryTypeName","src":"2399:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2333:89:5"},"returnParameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1688,"src":"2439:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1651,"name":"uint256","nodeType":"ElementaryTypeName","src":"2439:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2438:9:5"},"scope":1901,"src":"2314:631:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1786,"nodeType":"Block","src":"3498:1076:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1703,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"3590:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1704,"name":"links","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"3599:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link storage ref[] storage ref"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3605:6:5","memberName":"length","nodeType":"MemberAccess","src":"3599:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3590:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c494e4b20494e44455820444f4553204e4f54204558495354","id":1707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3613:27:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c","typeString":"literal_string \"LINK INDEX DOES NOT EXIST\""},"value":"LINK INDEX DOES NOT EXIST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c","typeString":"literal_string \"LINK INDEX DOES NOT EXIST\""}],"id":1702,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3582:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3582:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1709,"nodeType":"ExpressionStatement","src":"3582:59:5"},{"assignments":[1712],"declarations":[{"constant":false,"id":1712,"mutability":"mutable","name":"_link","nameLocation":"3663:5:5","nodeType":"VariableDeclaration","scope":1786,"src":"3651:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link"},"typeName":{"id":1711,"nodeType":"UserDefinedTypeName","pathNode":{"id":1710,"name":"Link","nameLocations":["3651:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":1618,"src":"3651:4:5"},"referencedDeclaration":1618,"src":"3651:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_storage_ptr","typeString":"struct Safe2LinkModule.Link"}},"visibility":"internal"}],"id":1716,"initialValue":{"baseExpression":{"id":1713,"name":"links","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"3671:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link storage ref[] storage ref"}},"id":1715,"indexExpression":{"id":1714,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"3677:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3671:13:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_storage","typeString":"struct Safe2LinkModule.Link storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3651:33:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1718,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"3702:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link memory"}},"id":1719,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3708:7:5","memberName":"claimed","nodeType":"MemberAccess","referencedDeclaration":1613,"src":"3702:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":1720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3719:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3702:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c494e4b20414c52454144592057495448445241574e","id":1722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3726:24:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988","typeString":"literal_string \"LINK ALREADY WITHDRAWN\""},"value":"LINK ALREADY WITHDRAWN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988","typeString":"literal_string \"LINK ALREADY WITHDRAWN\""}],"id":1717,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3694:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3694:57:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1724,"nodeType":"ExpressionStatement","src":"3694:57:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1726,"name":"_recipientAddressHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"3874:21:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"arguments":[{"id":1732,"name":"_recipientAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"3955:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1730,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3938:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3942:12:5","memberName":"encodePacked","nodeType":"MemberAccess","src":"3938:16:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3938:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1729,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3928:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3928:46:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1727,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"3899:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$594_$","typeString":"type(library ECDSA)"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3905:22:5","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":539,"src":"3899:28:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) pure returns (bytes32)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3899:76:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3874:101:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"48415348455320444f204e4f54204d41544348","id":1737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3989:21:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911","typeString":"literal_string \"HASHES DO NOT MATCH\""},"value":"HASHES DO NOT MATCH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911","typeString":"literal_string \"HASHES DO NOT MATCH\""}],"id":1725,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3853:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3853:167:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1739,"nodeType":"ExpressionStatement","src":"3853:167:5"},{"assignments":[1741],"declarations":[{"constant":false,"id":1741,"mutability":"mutable","name":"linkSigner","nameLocation":"4116:10:5","nodeType":"VariableDeclaration","scope":1786,"src":"4108:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1740,"name":"address","nodeType":"ElementaryTypeName","src":"4108:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1746,"initialValue":{"arguments":[{"id":1743,"name":"_recipientAddressHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"4139:21:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1744,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"4162:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1742,"name":"getSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"4129:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4129:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4108:65:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1748,"name":"linkSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"4191:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1749,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"4205:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link memory"}},"id":1750,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4211:8:5","memberName":"pubKey20","nodeType":"MemberAccess","referencedDeclaration":1607,"src":"4205:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4191:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e47205349474e4154555245","id":1752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4221:17:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d","typeString":"literal_string \"WRONG SIGNATURE\""},"value":"WRONG SIGNATURE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d","typeString":"literal_string \"WRONG SIGNATURE\""}],"id":1747,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4183:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4183:56:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1754,"nodeType":"ExpressionStatement","src":"4183:56:5"},{"eventCall":{"arguments":[{"id":1756,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"4304:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1757,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"4312:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link memory"}},"id":1758,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4318:6:5","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":1609,"src":"4312:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1759,"name":"_recipientAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"4326:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1755,"name":"WithdrawEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"4290:13:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address)"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4290:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1761,"nodeType":"EmitStatement","src":"4285:59:5"},{"expression":{"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1762,"name":"links","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"4382:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link storage ref[] storage ref"}},"id":1764,"indexExpression":{"id":1763,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"4388:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4382:13:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_storage","typeString":"struct Safe2LinkModule.Link storage ref"}},"id":1765,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4396:7:5","memberName":"claimed","nodeType":"MemberAccess","referencedDeclaration":1613,"src":"4382:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4406:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4382:28:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1768,"nodeType":"ExpressionStatement","src":"4382:28:5"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":1771,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"4468:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link memory"}},"id":1772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4474:7:5","memberName":"account","nodeType":"MemberAccess","referencedDeclaration":1617,"src":"4468:13:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1770,"name":"GnosisSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"4457:10:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_GnosisSafe_$1592_$","typeString":"type(contract GnosisSafe)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4457:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_GnosisSafe_$1592","typeString":"contract GnosisSafe"}},{"expression":{"id":1774,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"4484:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link memory"}},"id":1775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4490:12:5","memberName":"tokenAddress","nodeType":"MemberAccess","referencedDeclaration":1611,"src":"4484:18:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1778,"name":"_recipientAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"4512:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4504:8:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":1776,"name":"address","nodeType":"ElementaryTypeName","src":"4504:8:5","stateMutability":"payable","typeDescriptions":{}}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4504:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"expression":{"id":1780,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"4532:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link memory"}},"id":1781,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4538:6:5","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":1609,"src":"4532:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_GnosisSafe_$1592","typeString":"contract GnosisSafe"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1769,"name":"transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"4448:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_GnosisSafe_$1592_$_t_address_$_t_address_payable_$_t_uint256_$returns$__$","typeString":"function (contract GnosisSafe,address,address payable,uint256)"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4448:97:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1783,"nodeType":"ExpressionStatement","src":"4448:97:5"},{"expression":{"hexValue":"74727565","id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4563:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1701,"id":1785,"nodeType":"Return","src":"4556:11:5"}]},"documentation":{"id":1689,"nodeType":"StructuredDocumentation","src":"2954:359:5","text":" @param _index uint256 index of the deposit\n @param _recipientAddress address of the recipient\n @param _recipientAddressHash bytes32 hash of the recipient address (prefixed with \"\\x19Ethereum Signed Message:\\n32\")\n @param _signature bytes signature of the recipient address (65 bytes)\n @return bool true if successful"},"functionSelector":"26091678","id":1787,"implemented":true,"kind":"function","modifiers":[],"name":"claimLink","nameLocation":"3327:9:5","nodeType":"FunctionDefinition","parameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"_index","nameLocation":"3354:6:5","nodeType":"VariableDeclaration","scope":1787,"src":"3346:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1690,"name":"uint256","nodeType":"ElementaryTypeName","src":"3346:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1693,"mutability":"mutable","name":"_recipientAddress","nameLocation":"3378:17:5","nodeType":"VariableDeclaration","scope":1787,"src":"3370:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1692,"name":"address","nodeType":"ElementaryTypeName","src":"3370:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1695,"mutability":"mutable","name":"_recipientAddressHash","nameLocation":"3413:21:5","nodeType":"VariableDeclaration","scope":1787,"src":"3405:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3405:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"_signature","nameLocation":"3457:10:5","nodeType":"VariableDeclaration","scope":1787,"src":"3444:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1696,"name":"bytes","nodeType":"ElementaryTypeName","src":"3444:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3336:137:5"},"returnParameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1787,"src":"3492:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1699,"name":"bool","nodeType":"ElementaryTypeName","src":"3492:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3491:6:5"},"scope":1901,"src":"3318:1256:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1807,"nodeType":"Block","src":"4837:94:5","statements":[{"assignments":[1798],"declarations":[{"constant":false,"id":1798,"mutability":"mutable","name":"signer","nameLocation":"4855:6:5","nodeType":"VariableDeclaration","scope":1807,"src":"4847:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1797,"name":"address","nodeType":"ElementaryTypeName","src":"4847:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1804,"initialValue":{"arguments":[{"id":1801,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"4878:11:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1802,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1792,"src":"4891:9:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1799,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"4864:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$594_$","typeString":"type(library ECDSA)"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4870:7:5","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":355,"src":"4864:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4864:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4847:54:5"},{"expression":{"id":1805,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"4918:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1796,"id":1806,"nodeType":"Return","src":"4911:13:5"}]},"documentation":{"id":1788,"nodeType":"StructuredDocumentation","src":"4581:157:5","text":" @param messageHash bytes32 hash of the message\n @param signature bytes signature of the message\n @return address of the signer"},"functionSelector":"f7b2ec0d","id":1808,"implemented":true,"kind":"function","modifiers":[],"name":"getSigner","nameLocation":"4752:9:5","nodeType":"FunctionDefinition","parameters":{"id":1793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"mutability":"mutable","name":"messageHash","nameLocation":"4770:11:5","nodeType":"VariableDeclaration","scope":1808,"src":"4762:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4762:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1792,"mutability":"mutable","name":"signature","nameLocation":"4796:9:5","nodeType":"VariableDeclaration","scope":1808,"src":"4783:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1791,"name":"bytes","nodeType":"ElementaryTypeName","src":"4783:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4761:45:5"},"returnParameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1808,"src":"4828:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1794,"name":"address","nodeType":"ElementaryTypeName","src":"4828:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4827:9:5"},"scope":1901,"src":"4743:188:5","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":1864,"nodeType":"Block","src":"5031:476:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1820,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"5045:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5062:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5054:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1821,"name":"address","nodeType":"ElementaryTypeName","src":"5054:7:5","typeDescriptions":{}}},"id":1824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5054:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5045:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1862,"nodeType":"Block","src":"5266:235:5","statements":[{"assignments":[1841],"declarations":[{"constant":false,"id":1841,"mutability":"mutable","name":"data","nameLocation":"5293:4:5","nodeType":"VariableDeclaration","scope":1862,"src":"5280:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1840,"name":"bytes","nodeType":"ElementaryTypeName","src":"5280:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1848,"initialValue":{"arguments":[{"hexValue":"7472616e7366657228616464726573732c75696e7432353629","id":1844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5324:27:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_a9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b","typeString":"literal_string \"transfer(address,uint256)\""},"value":"transfer(address,uint256)"},{"id":1845,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"5353:2:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1846,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"5357:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b","typeString":"literal_string \"transfer(address,uint256)\""},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1842,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5300:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5304:19:5","memberName":"encodeWithSignature","nodeType":"MemberAccess","src":"5300:23:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (string memory) pure returns (bytes memory)"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5300:64:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5280:84:5"},{"expression":{"arguments":[{"arguments":[{"id":1852,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"5417:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":1853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5424:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1854,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"5427:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"expression":{"id":1855,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"5433:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Enum_$1572_$","typeString":"type(contract Enum)"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5438:9:5","memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":1571,"src":"5433:14:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$1571_$","typeString":"type(enum Enum.Operation)"}},"id":1857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5448:4:5","memberName":"Call","nodeType":"MemberAccess","referencedDeclaration":1569,"src":"5433:19:5","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$1571","typeString":"enum Enum.Operation"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_enum$_Operation_$1571","typeString":"enum Enum.Operation"}],"expression":{"id":1850,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"5386:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_GnosisSafe_$1592","typeString":"contract GnosisSafe"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:25:5","memberName":"execTransactionFromModule","nodeType":"MemberAccess","referencedDeclaration":1591,"src":"5386:30:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$1571_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation) external returns (bool)"}},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5386:67:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756c64206e6f74206578656375746520746f6b656e207472616e73666572","id":1859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5455:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709","typeString":"literal_string \"Could not execute token transfer\""},"value":"Could not execute token transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709","typeString":"literal_string \"Could not execute token transfer\""}],"id":1849,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5378:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5378:112:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1861,"nodeType":"ExpressionStatement","src":"5378:112:5"}]},"id":1863,"nodeType":"IfStatement","src":"5041:460:5","trueBody":{"id":1839,"nodeType":"Block","src":"5066:194:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1829,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"5176:2:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":1830,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"5180:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5188:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"expression":{"expression":{"id":1832,"name":"Enum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"5192:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Enum_$1572_$","typeString":"type(contract Enum)"}},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5197:9:5","memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":1571,"src":"5192:14:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$1571_$","typeString":"type(enum Enum.Operation)"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5207:4:5","memberName":"Call","nodeType":"MemberAccess","referencedDeclaration":1569,"src":"5192:19:5","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$1571","typeString":"enum Enum.Operation"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_enum$_Operation_$1571","typeString":"enum Enum.Operation"}],"expression":{"id":1827,"name":"safe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"5145:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_GnosisSafe_$1592","typeString":"contract GnosisSafe"}},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5150:25:5","memberName":"execTransactionFromModule","nodeType":"MemberAccess","referencedDeclaration":1591,"src":"5145:30:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_enum$_Operation_$1571_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory,enum Enum.Operation) external returns (bool)"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5145:67:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756c64206e6f742065786563757465206574686572207472616e73666572","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5214:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586","typeString":"literal_string \"Could not execute ether transfer\""},"value":"Could not execute ether transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586","typeString":"literal_string \"Could not execute ether transfer\""}],"id":1826,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5137:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:112:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1838,"nodeType":"ExpressionStatement","src":"5137:112:5"}]}}]},"id":1865,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"4946:8:5","nodeType":"FunctionDefinition","parameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"safe","nameLocation":"4966:4:5","nodeType":"VariableDeclaration","scope":1865,"src":"4955:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_GnosisSafe_$1592","typeString":"contract GnosisSafe"},"typeName":{"id":1810,"nodeType":"UserDefinedTypeName","pathNode":{"id":1809,"name":"GnosisSafe","nameLocations":["4955:10:5"],"nodeType":"IdentifierPath","referencedDeclaration":1592,"src":"4955:10:5"},"referencedDeclaration":1592,"src":"4955:10:5","typeDescriptions":{"typeIdentifier":"t_contract$_GnosisSafe_$1592","typeString":"contract GnosisSafe"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"token","nameLocation":"4980:5:5","nodeType":"VariableDeclaration","scope":1865,"src":"4972:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1812,"name":"address","nodeType":"ElementaryTypeName","src":"4972:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1815,"mutability":"mutable","name":"to","nameLocation":"5003:2:5","nodeType":"VariableDeclaration","scope":1865,"src":"4987:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1814,"name":"address","nodeType":"ElementaryTypeName","src":"4987:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1817,"mutability":"mutable","name":"amount","nameLocation":"5015:6:5","nodeType":"VariableDeclaration","scope":1865,"src":"5007:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1816,"name":"uint256","nodeType":"ElementaryTypeName","src":"5007:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4954:68:5"},"returnParameters":{"id":1819,"nodeType":"ParameterList","parameters":[],"src":"5031:0:5"},"scope":1901,"src":"4937:570:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1874,"nodeType":"Block","src":"5690:36:5","statements":[{"expression":{"expression":{"id":1871,"name":"links","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"5707:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link storage ref[] storage ref"}},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5713:6:5","memberName":"length","nodeType":"MemberAccess","src":"5707:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1870,"id":1873,"nodeType":"Return","src":"5700:19:5"}]},"documentation":{"id":1866,"nodeType":"StructuredDocumentation","src":"5514:115:5","text":" @notice Simple way to get the total number of deposits\n @return uint256 number of deposits"},"functionSelector":"ef51b79d","id":1875,"implemented":true,"kind":"function","modifiers":[],"name":"getLinkCount","nameLocation":"5643:12:5","nodeType":"FunctionDefinition","parameters":{"id":1867,"nodeType":"ParameterList","parameters":[],"src":"5655:2:5"},"returnParameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1875,"src":"5681:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1868,"name":"uint256","nodeType":"ElementaryTypeName","src":"5681:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5680:9:5"},"scope":1901,"src":"5634:92:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1888,"nodeType":"Block","src":"5945:37:5","statements":[{"expression":{"baseExpression":{"id":1884,"name":"links","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"5962:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link storage ref[] storage ref"}},"id":1886,"indexExpression":{"id":1885,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"5968:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5962:13:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_storage","typeString":"struct Safe2LinkModule.Link storage ref"}},"functionReturnParameters":1883,"id":1887,"nodeType":"Return","src":"5955:20:5"}]},"documentation":{"id":1876,"nodeType":"StructuredDocumentation","src":"5732:139:5","text":" @notice Simple way to get single deposit\n @param _index uint256 index of the deposit\n @return Deposit struct"},"functionSelector":"393b6df3","id":1889,"implemented":true,"kind":"function","modifiers":[],"name":"getLink","nameLocation":"5885:7:5","nodeType":"FunctionDefinition","parameters":{"id":1879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1878,"mutability":"mutable","name":"_index","nameLocation":"5901:6:5","nodeType":"VariableDeclaration","scope":1889,"src":"5893:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1877,"name":"uint256","nodeType":"ElementaryTypeName","src":"5893:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5892:16:5"},"returnParameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1889,"src":"5932:11:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_memory_ptr","typeString":"struct Safe2LinkModule.Link"},"typeName":{"id":1881,"nodeType":"UserDefinedTypeName","pathNode":{"id":1880,"name":"Link","nameLocations":["5932:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":1618,"src":"5932:4:5"},"referencedDeclaration":1618,"src":"5932:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_storage_ptr","typeString":"struct Safe2LinkModule.Link"}},"visibility":"internal"}],"src":"5931:13:5"},"scope":1901,"src":"5876:106:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1899,"nodeType":"Block","src":"6147:29:5","statements":[{"expression":{"id":1897,"name":"links","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"6164:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage","typeString":"struct Safe2LinkModule.Link storage ref[] storage ref"}},"functionReturnParameters":1896,"id":1898,"nodeType":"Return","src":"6157:12:5"}]},"documentation":{"id":1890,"nodeType":"StructuredDocumentation","src":"5988:93:5","text":" @notice Get all links in contract\n @return Links[] array of deposits"},"functionSelector":"48d9cb94","id":1900,"implemented":true,"kind":"function","modifiers":[],"name":"getAllLinks","nameLocation":"6095:11:5","nodeType":"FunctionDefinition","parameters":{"id":1891,"nodeType":"ParameterList","parameters":[],"src":"6106:2:5"},"returnParameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1900,"src":"6132:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr","typeString":"struct Safe2LinkModule.Link[]"},"typeName":{"baseType":{"id":1893,"nodeType":"UserDefinedTypeName","pathNode":{"id":1892,"name":"Link","nameLocations":["6132:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":1618,"src":"6132:4:5"},"referencedDeclaration":1618,"src":"6132:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Link_$1618_storage_ptr","typeString":"struct Safe2LinkModule.Link"}},"id":1894,"nodeType":"ArrayTypeName","src":"6132:6:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Link_$1618_storage_$dyn_storage_ptr","typeString":"struct Safe2LinkModule.Link[]"}},"visibility":"internal"}],"src":"6131:15:5"},"scope":1901,"src":"6086:90:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1902,"src":"695:5485:5","usedErrors":[]}],"src":"42:6139:5"},"id":5}},"contracts":{"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202027d6953eea3d2b5ddab5aa096da019e59fa1df9c39b38efa67bbb22208254864736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 0x27 0xD6 SWAP6 RETURNDATACOPY 0xEA RETURNDATASIZE 0x2B 0x5D 0xDA 0xB5 0xAA MULMOD PUSH14 0xA019E59FA1DF9C39B38EFA67BBB2 0x22 ADDMOD 0x25 BASEFEE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"220:2559:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202027d6953eea3d2b5ddab5aa096da019e59fa1df9c39b38efa67bbb22208254864736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 0x27 0xD6 SWAP6 RETURNDATACOPY 0xEA RETURNDATASIZE 0x2B 0x5D 0xDA 0xB5 0xAA MULMOD PUSH14 0xA019E59FA1DF9C39B38EFA67BBB2 0x22 ADDMOD 0x25 BASEFEE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"220:2559:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4c97c03bdf3b763bb16e2ad3e40fbc1459544ddc7c8305ebea2c8989ff93eb664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xC9 PUSH29 0x3BDF3B763BB16E2AD3E40FBC1459544DDC7C8305EBEA2C8989FF93EB6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"369:8761:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4c97c03bdf3b763bb16e2ad3e40fbc1459544ddc7c8305ebea2c8989ff93eb664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xC9 PUSH29 0x3BDF3B763BB16E2AD3E40FBC1459544DDC7C8305EBEA2C8989FF93EB6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"369:8761:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205adbd6dcf7c22f8a798ff30cefff39bd875eddb76458fae2eaac814e6b08345364736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS 0xDB 0xD6 0xDC 0xF7 0xC2 0x2F DUP11 PUSH26 0x8FF30CEFFF39BD875EDDB76458FAE2EAAC814E6B08345364736F PUSH13 0x63430008130033000000000000 ","sourceMap":"202:12582:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205adbd6dcf7c22f8a798ff30cefff39bd875eddb76458fae2eaac814e6b08345364736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS 0xDB 0xD6 0xDC 0xF7 0xC2 0x2F DUP11 PUSH26 0x8FF30CEFFF39BD875EDDB76458FAE2EAAC814E6B08345364736F PUSH13 0x63430008130033000000000000 ","sourceMap":"202:12582:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3b02db46d5c417aa38134d274af040c0f81d5a339dce336c3e41aade1e5c5a664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xB0 0x2D 0xB4 PUSH14 0x5C417AA38134D274AF040C0F81D5 LOG3 CODECOPY 0xDC 0xE3 CALLDATASIZE 0xC3 0xE4 BYTE 0xAD 0xE1 0xE5 0xC5 0xA6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1047:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3b02db46d5c417aa38134d274af040c0f81d5a339dce336c3e41aade1e5c5a664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xB0 0x2D 0xB4 PUSH14 0x5C417AA38134D274AF040C0F81D5 LOG3 CODECOPY 0xDC 0xE3 CALLDATASIZE 0xC3 0xE4 BYTE 0xAD 0xE1 0xE5 0xC5 0xA6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1047:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Enum.sol":{"Enum":{"abi":[],"devdoc":{"author":"Richard Meissner - <richard@gnosis.pm>","kind":"dev","methods":{},"title":"Enum - Collection of enums","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220779b6d710f4fc2ea014b2e64adbb55dd1e5562f680babc4f12346a2440e9784864736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x9B6D710F4FC2EA014B2E64ADBB55DD1E5562F680BABC4F12 CALLVALUE PUSH11 0x2440E9784864736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"157:79:4:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220779b6d710f4fc2ea014b2e64adbb55dd1e5562f680babc4f12346a2440e9784864736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x9B6D710F4FC2EA014B2E64ADBB55DD1E5562F680BABC4F12 CALLVALUE PUSH11 0x2440E9784864736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"157:79:4:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - <richard@gnosis.pm>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Enum - Collection of enums\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Enum.sol\":\"Enum\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x227aa4896ae1018af2afa3128e63223f1ecacb10bc053ad85e700094a4713293\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Safe2LinkModule.sol":{"GnosisSafe":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Allows a Module to execute a Safe transaction without any further confirmations.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Allows a Module to execute a Safe transaction without any further confirmations.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Safe2LinkModule.sol\":\"GnosisSafe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x227aa4896ae1018af2afa3128e63223f1ecacb10bc053ad85e700094a4713293\",\"license\":\"LGPL-3.0-only\"},\"contracts/Safe2LinkModule.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./Enum.sol\\\";\\n\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n}\\n\\ncontract Safe2LinkModule  {\\n    string public constant NAME = \\\"Safe2Link Module\\\";\\n    string public constant VERSION = \\\"0.1.0\\\";\\n\\n\\n    // Safe -> Delegate -> Tokens\\n    mapping(address => mapping(address => address[])) public tokens;\\n    // Safe -> Delegates double linked list entry points\\n\\n\\n    struct Link {\\n        address pubKey20; // (20 bytes) last 20 bytes of the hash of the public key for the deposit\\n        uint256 amount; // (32 bytes) amount of the asset being sent\\n        ///// tokenAddress, contractType, tokenId, claimed & timestamp are stored in a single 32 byte word\\n        address tokenAddress; // (20 bytes) address of the asset being sent. 0x0 for eth\\n        bool claimed; // (1 byte) has this deposit been claimed\\n        uint40 timestamp; // ( 5 bytes) timestamp of the deposit\\n        address account; // (20 bytes) address of the sender\\n    }\\n\\n\\n    Link[] public links; // array of deposits\\n\\n\\n    // events\\n    event LinkEvent(\\n        uint256 indexed _index, uint256 _amount, address indexed _senderAddress\\n    );\\n    event WithdrawEvent(\\n        uint256 indexed _index, uint256 _amount, address indexed _recipientAddress\\n    ); \\n\\n    event MessageEvent(string message);\\n\\n\\n\\n    /**\\n     * @notice Function to make a deposit\\n     * @dev For token deposits, allowance must be set before calling this function\\n     * @param _tokenAddress address of the token being sent. 0x0 for eth\\n     * @param _amount uint256 of the amount of tokens being sent (if erc20)\\n     * @param _pubKey20 last 20 bytes of the public key of the deposit signer\\n     * @return uint256 index of the deposit\\n     */\\n    function createLink(\\n        address _tokenAddress,\\n        uint256 _amount,\\n        address _pubKey20\\n    ) public returns (uint256) {\\n\\n\\n     // create link\\n        links.push(\\n            Link({\\n                tokenAddress: _tokenAddress,\\n                amount: _amount,\\n                claimed: false,\\n                pubKey20: _pubKey20,\\n                account: msg.sender,\\n                timestamp: uint40(block.timestamp)\\n            })\\n        );\\n\\n        // emit the deposit event\\n        emit LinkEvent(links.length - 1, _amount, msg.sender);\\n\\n        // return id of new deposit\\n        return links.length - 1;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @param _index uint256 index of the deposit\\n     * @param _recipientAddress address of the recipient\\n     * @param _recipientAddressHash bytes32 hash of the recipient address (prefixed with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n     * @param _signature bytes signature of the recipient address (65 bytes)\\n     * @return bool true if successful\\n     */\\n    function claimLink(\\n        uint256 _index,\\n        address _recipientAddress,\\n        bytes32 _recipientAddressHash,\\n        bytes memory _signature\\n    ) external returns (bool) {\\n        // check that the link exists and that it isn't already withdrawn\\n        require(_index < links.length, \\\"LINK INDEX DOES NOT EXIST\\\");\\n        Link memory _link = links[_index];\\n        require(_link.claimed == false, \\\"LINK ALREADY WITHDRAWN\\\");\\n        // check that the recipientAddress hashes to the same value as recipientAddressHash\\n        require(\\n            _recipientAddressHash == ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_recipientAddress))),\\n            \\\"HASHES DO NOT MATCH\\\"\\n        );\\n        // check that the signer is the same as the one stored in the deposit\\n        address linkSigner = getSigner(_recipientAddressHash, _signature);\\n        require(linkSigner == _link.pubKey20, \\\"WRONG SIGNATURE\\\");\\n\\n        // emit the withdraw event\\n        emit WithdrawEvent(_index, _link.amount, _recipientAddress);\\n\\n        // mark as claimed\\n        links[_index].claimed = true;\\n\\n\\n        // Transfer token\\n        transfer(GnosisSafe(_link.account), _link.tokenAddress, payable(_recipientAddress), _link.amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @param messageHash bytes32 hash of the message\\n     * @param signature bytes signature of the message\\n     * @return address of the signer\\n     */\\n    function getSigner(bytes32 messageHash, bytes memory signature) public pure returns (address) {\\n        address signer = ECDSA.recover(messageHash, signature);\\n        return signer;\\n    }\\n\\n    function transfer(GnosisSafe safe, address token, address payable to, uint256 amount) private {\\n        if (token == address(0)) {\\n            // solium-disable-next-line security/no-send\\n            require(safe.execTransactionFromModule(to, amount, \\\"\\\", Enum.Operation.Call), \\\"Could not execute ether transfer\\\");\\n        } else {\\n            bytes memory data = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, amount);\\n            require(safe.execTransactionFromModule(token, 0, data, Enum.Operation.Call), \\\"Could not execute token transfer\\\");\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice Simple way to get the total number of deposits\\n     * @return uint256 number of deposits\\n     */\\n    function getLinkCount() external view returns (uint256) {\\n        return links.length;\\n    }\\n\\n    /**\\n     * @notice Simple way to get single deposit\\n     * @param _index uint256 index of the deposit\\n     * @return Deposit struct\\n     */\\n    function getLink(uint256 _index) external view returns (Link memory) {\\n        return links[_index];\\n    }\\n\\n    /**\\n     * @notice Get all links in contract\\n     * @return Links[] array of deposits\\n     */\\n    function getAllLinks() external view returns (Link[] memory) {\\n        return links;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xa57dc8ab96a266a5ced02e5baaaed22d5c886c4ab97b65ac8c2c2795f1b2a741\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"Safe2LinkModule":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"_index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"_senderAddress","type":"address"}],"name":"LinkEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"MessageEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"_index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"_recipientAddress","type":"address"}],"name":"WithdrawEvent","type":"event"},{"inputs":[],"name":"NAME","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"},{"internalType":"address","name":"_recipientAddress","type":"address"},{"internalType":"bytes32","name":"_recipientAddressHash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"claimLink","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_pubKey20","type":"address"}],"name":"createLink","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAllLinks","outputs":[{"components":[{"internalType":"address","name":"pubKey20","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"bool","name":"claimed","type":"bool"},{"internalType":"uint40","name":"timestamp","type":"uint40"},{"internalType":"address","name":"account","type":"address"}],"internalType":"struct Safe2LinkModule.Link[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getLink","outputs":[{"components":[{"internalType":"address","name":"pubKey20","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"bool","name":"claimed","type":"bool"},{"internalType":"uint40","name":"timestamp","type":"uint40"},{"internalType":"address","name":"account","type":"address"}],"internalType":"struct Safe2LinkModule.Link","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLinkCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"getSigner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"links","outputs":[{"internalType":"address","name":"pubKey20","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"bool","name":"claimed","type":"bool"},{"internalType":"uint40","name":"timestamp","type":"uint40"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokens","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"claimLink(uint256,address,bytes32,bytes)":{"params":{"_index":"uint256 index of the deposit","_recipientAddress":"address of the recipient","_recipientAddressHash":"bytes32 hash of the recipient address (prefixed with \"\\x19Ethereum Signed Message:\\n32\")","_signature":"bytes signature of the recipient address (65 bytes)"},"returns":{"_0":"bool true if successful"}},"createLink(address,uint256,address)":{"details":"For token deposits, allowance must be set before calling this function","params":{"_amount":"uint256 of the amount of tokens being sent (if erc20)","_pubKey20":"last 20 bytes of the public key of the deposit signer","_tokenAddress":"address of the token being sent. 0x0 for eth"},"returns":{"_0":"uint256 index of the deposit"}},"getAllLinks()":{"returns":{"_0":"Links[] array of deposits"}},"getLink(uint256)":{"params":{"_index":"uint256 index of the deposit"},"returns":{"_0":"Deposit struct"}},"getLinkCount()":{"returns":{"_0":"uint256 number of deposits"}},"getSigner(bytes32,bytes)":{"params":{"messageHash":"bytes32 hash of the message","signature":"bytes signature of the message"},"returns":{"_0":"address of the signer"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506122fd806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a3f4df7e11610066578063a3f4df7e14610186578063ef51b79d146101a4578063f56e81fa146101c2578063f7b2ec0d146101f2578063ffa1ad74146102225761009e565b806326091678146100a3578063393b6df3146100d357806348d9cb941461010357806355c3d97a14610121578063881d8a4014610151575b600080fd5b6100bd60048036038101906100b8919061152f565b610240565b6040516100ca91906115cd565b60405180910390f35b6100ed60048036038101906100e891906115e8565b6105fb565b6040516100fa91906116dd565b60405180910390f35b61010b610787565b6040516101189190611822565b60405180910390f35b61013b60048036038101906101369190611844565b610936565b60405161014891906118a6565b60405180910390f35b61016b600480360381019061016691906115e8565b610b7f565b60405161017d969594939291906118df565b60405180910390f35b61018e610c49565b60405161019b91906119bf565b60405180910390f35b6101ac610c82565b6040516101b991906118a6565b60405180910390f35b6101dc60048036038101906101d791906119e1565b610c8f565b6040516101e99190611a34565b60405180910390f35b61020c60048036038101906102079190611a4f565b610cea565b6040516102199190611a34565b60405180910390f35b61022a610d03565b60405161023791906119bf565b60405180910390f35b60006001805490508510610289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028090611af7565b60405180910390fd5b60006001868154811061029f5761029e611b17565b5b90600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600015158160600151151514610455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044c90611b92565b60405180910390fd5b610484856040516020016104699190611bfa565b60405160208183030381529060405280519060200120610d3c565b84146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc90611c61565b60405180910390fd5b60006104d18585610cea565b9050816000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053c90611ccd565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff16877fa62bf33e3860a18b08244c1b59b8aa4920be374252eb534e0ab47d5f7a18ca18846020015160405161059091906118a6565b60405180910390a360018088815481106105ad576105ac611b17565b5b906000526020600020906004020160020160146101000a81548160ff0219169083151502179055506105ed8260a001518360400151888560200151610d72565b600192505050949350505050565b61060361128a565b6001828154811061061757610616611b17565b5b90600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561092d57838290600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906107ab565b50505050905090565b600060016040518060c001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020014264ffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548164ffffffffff021916908364ffffffffff16021790555060a08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050503373ffffffffffffffffffffffffffffffffffffffff1660018080549050610b2e9190611d1c565b7fd0b52dbf7f8c29477b6ae9116c857532274475062b33c1f29e0c92f745c1ffbf85604051610b5d91906118a6565b60405180910390a360018080549050610b769190611d1c565b90509392505050565b60018181548110610b8f57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900464ffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b6040518060400160405280601081526020017f53616665324c696e6b204d6f64756c650000000000000000000000000000000081525081565b6000600180549050905090565b60006020528260005260406000206020528160005260406000208181548110610cb757600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610cf78484610fca565b90508091505092915050565b6040518060400160405280600581526020017f302e312e3000000000000000000000000000000000000000000000000000000081525081565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e6b578373ffffffffffffffffffffffffffffffffffffffff1663468721a7838360006040518463ffffffff1660e01b8152600401610de493929190611e5d565b6020604051808303816000875af1158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e279190611ed3565b610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d90611f4c565b60405180910390fd5b610fc4565b60008282604051602401610e80929190611f8d565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508473ffffffffffffffffffffffffffffffffffffffff1663468721a78560008460006040518563ffffffff1660e01b8152600401610f409493929190612035565b6020604051808303816000875af1158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f839190611ed3565b610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb9906120cd565b60405180910390fd5b505b50505050565b6000806000610fd98585610ff1565b91509150610fe681611042565b819250505092915050565b60008060418351036110325760008060006020860151925060408601519150606086015160001a9050611026878285856111a8565b9450945050505061103b565b60006002915091505b9250929050565b6000600481111561105657611055611de6565b5b81600481111561106957611068611de6565b5b03156111a5576001600481111561108357611082611de6565b5b81600481111561109657611095611de6565b5b036110d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cd90612139565b60405180910390fd5b600260048111156110ea576110e9611de6565b5b8160048111156110fd576110fc611de6565b5b0361113d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611134906121a5565b60405180910390fd5b6003600481111561115157611150611de6565b5b81600481111561116457611163611de6565b5b036111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612237565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156111e3576000600391509150611281565b6000600187878787604051600081526020016040526040516112089493929190612282565b6020604051602081039080840390855afa15801561122a573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361127857600060019250925050611281565b80600092509250505b94509492505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600064ffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113328161131f565b811461133d57600080fd5b50565b60008135905061134f81611329565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061138082611355565b9050919050565b61139081611375565b811461139b57600080fd5b50565b6000813590506113ad81611387565b92915050565b6000819050919050565b6113c6816113b3565b81146113d157600080fd5b50565b6000813590506113e3816113bd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61143c826113f3565b810181811067ffffffffffffffff8211171561145b5761145a611404565b5b80604052505050565b600061146e61130b565b905061147a8282611433565b919050565b600067ffffffffffffffff82111561149a57611499611404565b5b6114a3826113f3565b9050602081019050919050565b82818337600083830152505050565b60006114d26114cd8461147f565b611464565b9050828152602081018484840111156114ee576114ed6113ee565b5b6114f98482856114b0565b509392505050565b600082601f830112611516576115156113e9565b5b81356115268482602086016114bf565b91505092915050565b6000806000806080858703121561154957611548611315565b5b600061155787828801611340565b94505060206115688782880161139e565b9350506040611579878288016113d4565b925050606085013567ffffffffffffffff81111561159a5761159961131a565b5b6115a687828801611501565b91505092959194509250565b60008115159050919050565b6115c7816115b2565b82525050565b60006020820190506115e260008301846115be565b92915050565b6000602082840312156115fe576115fd611315565b5b600061160c84828501611340565b91505092915050565b61161e81611375565b82525050565b61162d8161131f565b82525050565b61163c816115b2565b82525050565b600064ffffffffff82169050919050565b61165c81611642565b82525050565b60c0820160008201516116786000850182611615565b50602082015161168b6020850182611624565b50604082015161169e6040850182611615565b5060608201516116b16060850182611633565b5060808201516116c46080850182611653565b5060a08201516116d760a0850182611615565b50505050565b600060c0820190506116f26000830184611662565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c08201600082015161173a6000850182611615565b50602082015161174d6020850182611624565b5060408201516117606040850182611615565b5060608201516117736060850182611633565b5060808201516117866080850182611653565b5060a082015161179960a0850182611615565b50505050565b60006117ab8383611724565b60c08301905092915050565b6000602082019050919050565b60006117cf826116f8565b6117d98185611703565b93506117e483611714565b8060005b838110156118155781516117fc888261179f565b9750611807836117b7565b9250506001810190506117e8565b5085935050505092915050565b6000602082019050818103600083015261183c81846117c4565b905092915050565b60008060006060848603121561185d5761185c611315565b5b600061186b8682870161139e565b935050602061187c86828701611340565b925050604061188d8682870161139e565b9150509250925092565b6118a08161131f565b82525050565b60006020820190506118bb6000830184611897565b92915050565b6118ca81611375565b82525050565b6118d981611642565b82525050565b600060c0820190506118f460008301896118c1565b6119016020830188611897565b61190e60408301876118c1565b61191b60608301866115be565b61192860808301856118d0565b61193560a08301846118c1565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561197a57808201518184015260208101905061195f565b60008484015250505050565b600061199182611940565b61199b818561194b565b93506119ab81856020860161195c565b6119b4816113f3565b840191505092915050565b600060208201905081810360008301526119d98184611986565b905092915050565b6000806000606084860312156119fa576119f9611315565b5b6000611a088682870161139e565b9350506020611a198682870161139e565b9250506040611a2a86828701611340565b9150509250925092565b6000602082019050611a4960008301846118c1565b92915050565b60008060408385031215611a6657611a65611315565b5b6000611a74858286016113d4565b925050602083013567ffffffffffffffff811115611a9557611a9461131a565b5b611aa185828601611501565b9150509250929050565b7f4c494e4b20494e44455820444f4553204e4f5420455849535400000000000000600082015250565b6000611ae160198361194b565b9150611aec82611aab565b602082019050919050565b60006020820190508181036000830152611b1081611ad4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4c494e4b20414c52454144592057495448445241574e00000000000000000000600082015250565b6000611b7c60168361194b565b9150611b8782611b46565b602082019050919050565b60006020820190508181036000830152611bab81611b6f565b9050919050565b60008160601b9050919050565b6000611bca82611bb2565b9050919050565b6000611bdc82611bbf565b9050919050565b611bf4611bef82611375565b611bd1565b82525050565b6000611c068284611be3565b60148201915081905092915050565b7f48415348455320444f204e4f54204d4154434800000000000000000000000000600082015250565b6000611c4b60138361194b565b9150611c5682611c15565b602082019050919050565b60006020820190508181036000830152611c7a81611c3e565b9050919050565b7f57524f4e47205349474e41545552450000000000000000000000000000000000600082015250565b6000611cb7600f8361194b565b9150611cc282611c81565b602082019050919050565b60006020820190508181036000830152611ce681611caa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d278261131f565b9150611d328361131f565b9250828203905081811115611d4a57611d49611ced565b5b92915050565b6000819050919050565b6000611d75611d70611d6b84611355565b611d50565b611355565b9050919050565b6000611d8782611d5a565b9050919050565b6000611d9982611d7c565b9050919050565b611da981611d8e565b82525050565b600082825260208201905092915050565b50565b6000611dd0600083611daf565b9150611ddb82611dc0565b600082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611e2657611e25611de6565b5b50565b6000819050611e3782611e15565b919050565b6000611e4782611e29565b9050919050565b611e5781611e3c565b82525050565b6000608082019050611e726000830186611da0565b611e7f6020830185611897565b8181036040830152611e9081611dc3565b9050611e9f6060830184611e4e565b949350505050565b611eb0816115b2565b8114611ebb57600080fd5b50565b600081519050611ecd81611ea7565b92915050565b600060208284031215611ee957611ee8611315565b5b6000611ef784828501611ebe565b91505092915050565b7f436f756c64206e6f742065786563757465206574686572207472616e73666572600082015250565b6000611f3660208361194b565b9150611f4182611f00565b602082019050919050565b60006020820190508181036000830152611f6581611f29565b9050919050565b6000611f7782611355565b9050919050565b611f8781611f6c565b82525050565b6000604082019050611fa26000830185611f7e565b611faf6020830184611897565b9392505050565b6000819050919050565b6000611fdb611fd6611fd184611fb6565b611d50565b61131f565b9050919050565b611feb81611fc0565b82525050565b600081519050919050565b600061200782611ff1565b6120118185611daf565b935061202181856020860161195c565b61202a816113f3565b840191505092915050565b600060808201905061204a60008301876118c1565b6120576020830186611fe2565b81810360408301526120698185611ffc565b90506120786060830184611e4e565b95945050505050565b7f436f756c64206e6f74206578656375746520746f6b656e207472616e73666572600082015250565b60006120b760208361194b565b91506120c282612081565b602082019050919050565b600060208201905081810360008301526120e6816120aa565b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061212360188361194b565b915061212e826120ed565b602082019050919050565b6000602082019050818103600083015261215281612116565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061218f601f8361194b565b915061219a82612159565b602082019050919050565b600060208201905081810360008301526121be81612182565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061222160228361194b565b915061222c826121c5565b604082019050919050565b6000602082019050818103600083015261225081612214565b9050919050565b612260816113b3565b82525050565b600060ff82169050919050565b61227c81612266565b82525050565b60006080820190506122976000830187612257565b6122a46020830186612273565b6122b16040830185612257565b6122be6060830184612257565b9594505050505056fea2646970667358221220d4cfcae48dcd9cb39e8e8efbdf1eeec788e79274901739cdd0ee4771a47cfb8064736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22FD DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3F4DF7E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA3F4DF7E EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0xEF51B79D EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0xF56E81FA EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0xF7B2EC0D EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x222 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x26091678 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x393B6DF3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x48D9CB94 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x55C3D97A EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x881D8A40 EQ PUSH2 0x151 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x152F JUMP JUMPDEST PUSH2 0x240 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x15CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x15E8 JUMP JUMPDEST PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x16DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10B PUSH2 0x787 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x1822 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x136 SWAP2 SWAP1 PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x148 SWAP2 SWAP1 PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x15E8 JUMP JUMPDEST PUSH2 0xB7F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17D SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x18DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18E PUSH2 0xC49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x19BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AC PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x19E1 JUMP JUMPDEST PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x1A4F JUMP JUMPDEST PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22A PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x19BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 POP DUP6 LT PUSH2 0x289 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x280 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x29F JUMPI PUSH2 0x29E PUSH2 0x1B17 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 ISZERO ISZERO DUP2 PUSH1 0x60 ADD MLOAD ISZERO ISZERO EQ PUSH2 0x455 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x484 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x469 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xD3C JUMP JUMPDEST DUP5 EQ PUSH2 0x4C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0x1C61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4D1 DUP6 DUP6 PUSH2 0xCEA JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x53C SWAP1 PUSH2 0x1CCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH32 0xA62BF33E3860A18B08244C1B59B8AA4920BE374252EB534E0AB47D5F7A18CA18 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x590 SWAP2 SWAP1 PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 DUP1 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x5AD JUMPI PUSH2 0x5AC PUSH2 0x1B17 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x5ED DUP3 PUSH1 0xA0 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP9 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x603 PUSH2 0x128A JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x617 JUMPI PUSH2 0x616 PUSH2 0x1B17 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x92D JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x7AB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x15 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH5 0xFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH5 0xFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP1 DUP1 SLOAD SWAP1 POP PUSH2 0xB2E SWAP2 SWAP1 PUSH2 0x1D1C JUMP JUMPDEST PUSH32 0xD0B52DBF7F8C29477B6AE9116C857532274475062B33C1F29E0C92F745C1FFBF DUP6 PUSH1 0x40 MLOAD PUSH2 0xB5D SWAP2 SWAP1 PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 DUP1 DUP1 SLOAD SWAP1 POP PUSH2 0xB76 SWAP2 SWAP1 PUSH2 0x1D1C JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xB8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH5 0xFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x53616665324C696E6B204D6F64756C6500000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP3 POP SWAP3 POP POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCF7 DUP5 DUP5 PUSH2 0xFCA JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x302E312E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE6B JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x468721A7 DUP4 DUP4 PUSH1 0x0 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE03 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE27 SWAP2 SWAP1 PUSH2 0x1ED3 JUMP JUMPDEST PUSH2 0xE66 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5D SWAP1 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE80 SWAP3 SWAP2 SWAP1 PUSH2 0x1F8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x468721A7 DUP6 PUSH1 0x0 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF40 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF83 SWAP2 SWAP1 PUSH2 0x1ED3 JUMP JUMPDEST PUSH2 0xFC2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB9 SWAP1 PUSH2 0x20CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFD9 DUP6 DUP6 PUSH2 0xFF1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xFE6 DUP2 PUSH2 0x1042 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x41 DUP4 MLOAD SUB PUSH2 0x1032 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x20 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP PUSH2 0x1026 DUP8 DUP3 DUP6 DUP6 PUSH2 0x11A8 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x103B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1056 JUMPI PUSH2 0x1055 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1069 JUMPI PUSH2 0x1068 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x11A5 JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1083 JUMPI PUSH2 0x1082 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1096 JUMPI PUSH2 0x1095 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x10D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10CD SWAP1 PUSH2 0x2139 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x10EA JUMPI PUSH2 0x10E9 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x10FD JUMPI PUSH2 0x10FC PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x113D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1134 SWAP1 PUSH2 0x21A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1151 JUMPI PUSH2 0x1150 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1164 JUMPI PUSH2 0x1163 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x11A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x119B SWAP1 PUSH2 0x2237 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1208 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2282 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x122A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1278 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1281 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1332 DUP2 PUSH2 0x131F JUMP JUMPDEST DUP2 EQ PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x134F DUP2 PUSH2 0x1329 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1380 DUP3 PUSH2 0x1355 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1390 DUP2 PUSH2 0x1375 JUMP JUMPDEST DUP2 EQ PUSH2 0x139B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x13AD DUP2 PUSH2 0x1387 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x13C6 DUP2 PUSH2 0x13B3 JUMP JUMPDEST DUP2 EQ PUSH2 0x13D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x13E3 DUP2 PUSH2 0x13BD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x143C DUP3 PUSH2 0x13F3 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x145B JUMPI PUSH2 0x145A PUSH2 0x1404 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x146E PUSH2 0x130B JUMP JUMPDEST SWAP1 POP PUSH2 0x147A DUP3 DUP3 PUSH2 0x1433 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x149A JUMPI PUSH2 0x1499 PUSH2 0x1404 JUMP JUMPDEST JUMPDEST PUSH2 0x14A3 DUP3 PUSH2 0x13F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D2 PUSH2 0x14CD DUP5 PUSH2 0x147F JUMP JUMPDEST PUSH2 0x1464 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x14EE JUMPI PUSH2 0x14ED PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH2 0x14F9 DUP5 DUP3 DUP6 PUSH2 0x14B0 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1516 JUMPI PUSH2 0x1515 PUSH2 0x13E9 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1526 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x14BF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1549 JUMPI PUSH2 0x1548 PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1557 DUP8 DUP3 DUP9 ADD PUSH2 0x1340 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1568 DUP8 DUP3 DUP9 ADD PUSH2 0x139E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1579 DUP8 DUP3 DUP9 ADD PUSH2 0x13D4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x159A JUMPI PUSH2 0x1599 PUSH2 0x131A JUMP JUMPDEST JUMPDEST PUSH2 0x15A6 DUP8 DUP3 DUP9 ADD PUSH2 0x1501 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15C7 DUP2 PUSH2 0x15B2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15E2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x15BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15FE JUMPI PUSH2 0x15FD PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x160C DUP5 DUP3 DUP6 ADD PUSH2 0x1340 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x161E DUP2 PUSH2 0x1375 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x162D DUP2 PUSH2 0x131F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x163C DUP2 PUSH2 0x15B2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH5 0xFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x165C DUP2 PUSH2 0x1642 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1678 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x168B PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1624 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x169E PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x16B1 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1633 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x16C4 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1653 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x16D7 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x16F2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1662 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x173A PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x174D PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1624 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1760 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1773 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1633 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1786 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1653 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1799 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP4 DUP4 PUSH2 0x1724 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17CF DUP3 PUSH2 0x16F8 JUMP JUMPDEST PUSH2 0x17D9 DUP2 DUP6 PUSH2 0x1703 JUMP JUMPDEST SWAP4 POP PUSH2 0x17E4 DUP4 PUSH2 0x1714 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1815 JUMPI DUP2 MLOAD PUSH2 0x17FC DUP9 DUP3 PUSH2 0x179F JUMP JUMPDEST SWAP8 POP PUSH2 0x1807 DUP4 PUSH2 0x17B7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x17E8 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x183C DUP2 DUP5 PUSH2 0x17C4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x185D JUMPI PUSH2 0x185C PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x186B DUP7 DUP3 DUP8 ADD PUSH2 0x139E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x187C DUP7 DUP3 DUP8 ADD PUSH2 0x1340 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x188D DUP7 DUP3 DUP8 ADD PUSH2 0x139E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x18A0 DUP2 PUSH2 0x131F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18BB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1897 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18CA DUP2 PUSH2 0x1375 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x18D9 DUP2 PUSH2 0x1642 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x18F4 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x1901 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x1897 JUMP JUMPDEST PUSH2 0x190E PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x191B PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x15BE JUMP JUMPDEST PUSH2 0x1928 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x18D0 JUMP JUMPDEST PUSH2 0x1935 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x18C1 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x197A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x195F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1991 DUP3 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x199B DUP2 DUP6 PUSH2 0x194B JUMP JUMPDEST SWAP4 POP PUSH2 0x19AB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x195C JUMP JUMPDEST PUSH2 0x19B4 DUP2 PUSH2 0x13F3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19D9 DUP2 DUP5 PUSH2 0x1986 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19FA JUMPI PUSH2 0x19F9 PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A08 DUP7 DUP3 DUP8 ADD PUSH2 0x139E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1A19 DUP7 DUP3 DUP8 ADD PUSH2 0x139E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1A2A DUP7 DUP3 DUP8 ADD PUSH2 0x1340 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A49 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18C1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A66 JUMPI PUSH2 0x1A65 PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A74 DUP6 DUP3 DUP7 ADD PUSH2 0x13D4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A95 JUMPI PUSH2 0x1A94 PUSH2 0x131A JUMP JUMPDEST JUMPDEST PUSH2 0x1AA1 DUP6 DUP3 DUP7 ADD PUSH2 0x1501 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C494E4B20494E44455820444F4553204E4F5420455849535400000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AE1 PUSH1 0x19 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1AEC DUP3 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B10 DUP2 PUSH2 0x1AD4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4C494E4B20414C52454144592057495448445241574E00000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B7C PUSH1 0x16 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1B87 DUP3 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BAB DUP2 PUSH2 0x1B6F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BCA DUP3 PUSH2 0x1BB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BDC DUP3 PUSH2 0x1BBF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BF4 PUSH2 0x1BEF DUP3 PUSH2 0x1375 JUMP JUMPDEST PUSH2 0x1BD1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C06 DUP3 DUP5 PUSH2 0x1BE3 JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x48415348455320444F204E4F54204D4154434800000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C4B PUSH1 0x13 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1C56 DUP3 PUSH2 0x1C15 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C7A DUP2 PUSH2 0x1C3E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x57524F4E47205349474E41545552450000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB7 PUSH1 0xF DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1CC2 DUP3 PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CE6 DUP2 PUSH2 0x1CAA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D27 DUP3 PUSH2 0x131F JUMP JUMPDEST SWAP2 POP PUSH2 0x1D32 DUP4 PUSH2 0x131F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1D4A JUMPI PUSH2 0x1D49 PUSH2 0x1CED JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D75 PUSH2 0x1D70 PUSH2 0x1D6B DUP5 PUSH2 0x1355 JUMP JUMPDEST PUSH2 0x1D50 JUMP JUMPDEST PUSH2 0x1355 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D87 DUP3 PUSH2 0x1D5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D99 DUP3 PUSH2 0x1D7C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DA9 DUP2 PUSH2 0x1D8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD0 PUSH1 0x0 DUP4 PUSH2 0x1DAF JUMP JUMPDEST SWAP2 POP PUSH2 0x1DDB DUP3 PUSH2 0x1DC0 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x1E26 JUMPI PUSH2 0x1E25 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x1E37 DUP3 PUSH2 0x1E15 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E47 DUP3 PUSH2 0x1E29 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E57 DUP2 PUSH2 0x1E3C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1E72 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1DA0 JUMP JUMPDEST PUSH2 0x1E7F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1897 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1E90 DUP2 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E9F PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1E4E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1EB0 DUP2 PUSH2 0x15B2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1EBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1ECD DUP2 PUSH2 0x1EA7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EE9 JUMPI PUSH2 0x1EE8 PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1EF7 DUP5 DUP3 DUP6 ADD PUSH2 0x1EBE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x436F756C64206E6F742065786563757465206574686572207472616E73666572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F36 PUSH1 0x20 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1F41 DUP3 PUSH2 0x1F00 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F65 DUP2 PUSH2 0x1F29 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F77 DUP3 PUSH2 0x1355 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F87 DUP2 PUSH2 0x1F6C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1FA2 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1F7E JUMP JUMPDEST PUSH2 0x1FAF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1897 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FDB PUSH2 0x1FD6 PUSH2 0x1FD1 DUP5 PUSH2 0x1FB6 JUMP JUMPDEST PUSH2 0x1D50 JUMP JUMPDEST PUSH2 0x131F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FEB DUP2 PUSH2 0x1FC0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2007 DUP3 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x2011 DUP2 DUP6 PUSH2 0x1DAF JUMP JUMPDEST SWAP4 POP PUSH2 0x2021 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x195C JUMP JUMPDEST PUSH2 0x202A DUP2 PUSH2 0x13F3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x204A PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x2057 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1FE2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2069 DUP2 DUP6 PUSH2 0x1FFC JUMP JUMPDEST SWAP1 POP PUSH2 0x2078 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1E4E JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x436F756C64206E6F74206578656375746520746F6B656E207472616E73666572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20B7 PUSH1 0x20 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x20C2 DUP3 PUSH2 0x2081 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20E6 DUP2 PUSH2 0x20AA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2123 PUSH1 0x18 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x212E DUP3 PUSH2 0x20ED JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2152 DUP2 PUSH2 0x2116 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x218F PUSH1 0x1F DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x219A DUP3 PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21BE DUP2 PUSH2 0x2182 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2221 PUSH1 0x22 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x222C DUP3 PUSH2 0x21C5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2250 DUP2 PUSH2 0x2214 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2260 DUP2 PUSH2 0x13B3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x227C DUP2 PUSH2 0x2266 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2297 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2257 JUMP JUMPDEST PUSH2 0x22A4 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x22B1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2257 JUMP JUMPDEST PUSH2 0x22BE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2257 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 0xCF 0xCA 0xE4 DUP14 0xCD SWAP13 0xB3 SWAP15 DUP15 DUP15 0xFB 0xDF 0x1E 0xEE 0xC7 DUP9 0xE7 SWAP3 PUSH21 0x901739CDD0EE4771A47CFB8064736F6C6343000813 STOP CALLER ","sourceMap":"695:5485:5:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@NAME_1595":{"entryPoint":3145,"id":1595,"parameterSlots":0,"returnSlots":0},"@VERSION_1598":{"entryPoint":3331,"id":1598,"parameterSlots":0,"returnSlots":0},"@_throwError_282":{"entryPoint":4162,"id":282,"parameterSlots":1,"returnSlots":0},"@claimLink_1787":{"entryPoint":576,"id":1787,"parameterSlots":4,"returnSlots":1},"@createLink_1688":{"entryPoint":2358,"id":1688,"parameterSlots":3,"returnSlots":1},"@getAllLinks_1900":{"entryPoint":1927,"id":1900,"parameterSlots":0,"returnSlots":1},"@getLinkCount_1875":{"entryPoint":3202,"id":1875,"parameterSlots":0,"returnSlots":1},"@getLink_1889":{"entryPoint":1531,"id":1889,"parameterSlots":1,"returnSlots":1},"@getSigner_1808":{"entryPoint":3306,"id":1808,"parameterSlots":2,"returnSlots":1},"@links_1622":{"entryPoint":2943,"id":1622,"parameterSlots":0,"returnSlots":0},"@recover_355":{"entryPoint":4042,"id":355,"parameterSlots":2,"returnSlots":1},"@toEthSignedMessageHash_539":{"entryPoint":3388,"id":539,"parameterSlots":1,"returnSlots":1},"@tokens_1605":{"entryPoint":3215,"id":1605,"parameterSlots":0,"returnSlots":0},"@transfer_1865":{"entryPoint":3442,"id":1865,"parameterSlots":4,"returnSlots":0},"@tryRecover_328":{"entryPoint":4081,"id":328,"parameterSlots":2,"returnSlots":2},"@tryRecover_496":{"entryPoint":4520,"id":496,"parameterSlots":4,"returnSlots":2},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":5311,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5022,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":7870,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":5076,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":5377,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":4928,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6625,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256t_address":{"entryPoint":6212,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":7891,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_memory_ptr":{"entryPoint":6735,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":5608,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_addresst_bytes32t_bytes_memory_ptr":{"entryPoint":5423,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encodeUpdatedPos_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr":{"entryPoint":6047,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_payable_to_t_address_fromStack":{"entryPoint":7584,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_payable_to_t_address_payable_fromStack":{"entryPoint":8062,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address":{"entryPoint":5653,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6337,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack":{"entryPoint":7139,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":6084,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool":{"entryPoint":5683,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5566,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":8791,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":8188,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_enum$_Operation_$1571_to_t_uint8_fromStack":{"entryPoint":7758,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack":{"entryPoint":8162,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":6534,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack":{"entryPoint":8470,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709_to_t_string_memory_ptr_fromStack":{"entryPoint":8362,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack":{"entryPoint":8578,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d_to_t_string_memory_ptr_fromStack":{"entryPoint":7338,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586_to_t_string_memory_ptr_fromStack":{"entryPoint":7977,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988_to_t_string_memory_ptr_fromStack":{"entryPoint":7023,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack":{"entryPoint":8724,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c_to_t_string_memory_ptr_fromStack":{"entryPoint":6868,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack":{"entryPoint":7619,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911_to_t_string_memory_ptr_fromStack":{"entryPoint":7230,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr":{"entryPoint":5924,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr_fromStack":{"entryPoint":5730,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":5668,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6295,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint40_to_t_uint40":{"entryPoint":5715,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint40_to_t_uint40_fromStack":{"entryPoint":6352,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":8819,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":7162,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6708,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed":{"entryPoint":8077,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_t_enum$_Operation_$1571__to_t_address_t_uint256_t_bytes_memory_ptr_t_uint8__fromStack_reversed":{"entryPoint":7773,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_rational_0_by_1_t_bytes_memory_ptr_t_enum$_Operation_$1571__to_t_address_t_uint256_t_bytes_memory_ptr_t_uint8__fromStack_reversed":{"entryPoint":8245,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address_t_bool_t_uint40_t_address__to_t_address_t_uint256_t_address_t_bool_t_uint40_t_address__fromStack_reversed":{"entryPoint":6367,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":6178,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5581,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":8834,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6591,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8505,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8397,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8613,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8012,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7058,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8759,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6903,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7265,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Link_$1618_memory_ptr__to_t_struct$_Link_$1618_memory_ptr__fromStack_reversed":{"entryPoint":5853,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":6310,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":5220,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":4875,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":5247,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr":{"entryPoint":5908,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr":{"entryPoint":5880,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8177,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":6464,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr":{"entryPoint":6071,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":5891,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":7599,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":6475,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7452,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":4981,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address_payable":{"entryPoint":8044,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5554,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":5043,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_Operation_$1571":{"entryPoint":7721,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_0_by_1":{"entryPoint":8118,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":4949,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4895,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint40":{"entryPoint":5698,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":8806,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_address_payable_to_t_address":{"entryPoint":7566,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_Operation_$1571_to_t_uint8":{"entryPoint":7740,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_0_by_1_to_t_uint256":{"entryPoint":8128,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":7548,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":7514,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":5296,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":6492,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":5171,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":7504,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_address":{"entryPoint":7121,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_uint160":{"entryPoint":7103,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":7405,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":7654,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6935,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5124,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":5097,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":5102,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":4890,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":4885,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5107,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_96":{"entryPoint":7090,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be":{"entryPoint":8429,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709":{"entryPoint":8321,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77":{"entryPoint":8537,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d":{"entryPoint":7297,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586":{"entryPoint":7936,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988":{"entryPoint":6982,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd":{"entryPoint":8645,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c":{"entryPoint":6827,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":7616,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911":{"entryPoint":7189,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_Operation_$1571":{"entryPoint":7701,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":4999,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":7847,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":5053,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":4905,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:32723:6","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:6","statements":[{"nodeType":"YulAssignment","src":"57:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:6"},"nodeType":"YulFunctionCall","src":"67:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:6","type":""}],"src":"7:75:6"},{"body":{"nodeType":"YulBlock","src":"177:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:6"},"nodeType":"YulFunctionCall","src":"187:12:6"},"nodeType":"YulExpressionStatement","src":"187:12:6"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:6"},{"body":{"nodeType":"YulBlock","src":"300:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:6"},"nodeType":"YulFunctionCall","src":"310:12:6"},"nodeType":"YulExpressionStatement","src":"310:12:6"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:6"},{"body":{"nodeType":"YulBlock","src":"379:32:6","statements":[{"nodeType":"YulAssignment","src":"389:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:6","type":""}],"src":"334:77:6"},{"body":{"nodeType":"YulBlock","src":"460:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:6"},"nodeType":"YulFunctionCall","src":"519:12:6"},"nodeType":"YulExpressionStatement","src":"519:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:6"},"nodeType":"YulFunctionCall","src":"490:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:6"},"nodeType":"YulFunctionCall","src":"480:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:6"},"nodeType":"YulFunctionCall","src":"473:43:6"},"nodeType":"YulIf","src":"470:63:6"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:6","type":""}],"src":"417:122:6"},{"body":{"nodeType":"YulBlock","src":"597:87:6","statements":[{"nodeType":"YulAssignment","src":"607:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:6"},"nodeType":"YulFunctionCall","src":"616:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"645:26:6"},"nodeType":"YulFunctionCall","src":"645:33:6"},"nodeType":"YulExpressionStatement","src":"645:33:6"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:6","type":""}],"src":"545:139:6"},{"body":{"nodeType":"YulBlock","src":"735:81:6","statements":[{"nodeType":"YulAssignment","src":"745:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"760:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"767:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"756:3:6"},"nodeType":"YulFunctionCall","src":"756:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"745:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"717:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"727:7:6","type":""}],"src":"690:126:6"},{"body":{"nodeType":"YulBlock","src":"867:51:6","statements":[{"nodeType":"YulAssignment","src":"877:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"906:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"888:17:6"},"nodeType":"YulFunctionCall","src":"888:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"877:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"849:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"859:7:6","type":""}],"src":"822:96:6"},{"body":{"nodeType":"YulBlock","src":"967:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"1024:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1033:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1036:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1026:6:6"},"nodeType":"YulFunctionCall","src":"1026:12:6"},"nodeType":"YulExpressionStatement","src":"1026:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"990:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1015:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"997:17:6"},"nodeType":"YulFunctionCall","src":"997:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"987:2:6"},"nodeType":"YulFunctionCall","src":"987:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"980:6:6"},"nodeType":"YulFunctionCall","src":"980:43:6"},"nodeType":"YulIf","src":"977:63:6"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"960:5:6","type":""}],"src":"924:122:6"},{"body":{"nodeType":"YulBlock","src":"1104:87:6","statements":[{"nodeType":"YulAssignment","src":"1114:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1123:12:6"},"nodeType":"YulFunctionCall","src":"1123:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1114:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1179:5:6"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1152:26:6"},"nodeType":"YulFunctionCall","src":"1152:33:6"},"nodeType":"YulExpressionStatement","src":"1152:33:6"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1082:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1090:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1098:5:6","type":""}],"src":"1052:139:6"},{"body":{"nodeType":"YulBlock","src":"1242:32:6","statements":[{"nodeType":"YulAssignment","src":"1252:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"1263:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1252:7:6"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1224:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1234:7:6","type":""}],"src":"1197:77:6"},{"body":{"nodeType":"YulBlock","src":"1323:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"1380:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1389:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1392:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1382:6:6"},"nodeType":"YulFunctionCall","src":"1382:12:6"},"nodeType":"YulExpressionStatement","src":"1382:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1346:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1371:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1353:17:6"},"nodeType":"YulFunctionCall","src":"1353:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1343:2:6"},"nodeType":"YulFunctionCall","src":"1343:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1336:6:6"},"nodeType":"YulFunctionCall","src":"1336:43:6"},"nodeType":"YulIf","src":"1333:63:6"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1316:5:6","type":""}],"src":"1280:122:6"},{"body":{"nodeType":"YulBlock","src":"1460:87:6","statements":[{"nodeType":"YulAssignment","src":"1470:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1492:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1479:12:6"},"nodeType":"YulFunctionCall","src":"1479:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1470:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1535:5:6"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1508:26:6"},"nodeType":"YulFunctionCall","src":"1508:33:6"},"nodeType":"YulExpressionStatement","src":"1508:33:6"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1438:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1446:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1454:5:6","type":""}],"src":"1408:139:6"},{"body":{"nodeType":"YulBlock","src":"1642:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1659:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1662:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1652:6:6"},"nodeType":"YulFunctionCall","src":"1652:12:6"},"nodeType":"YulExpressionStatement","src":"1652:12:6"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"1553:117:6"},{"body":{"nodeType":"YulBlock","src":"1765:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1782:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1785:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1775:6:6"},"nodeType":"YulFunctionCall","src":"1775:12:6"},"nodeType":"YulExpressionStatement","src":"1775:12:6"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"1676:117:6"},{"body":{"nodeType":"YulBlock","src":"1847:54:6","statements":[{"nodeType":"YulAssignment","src":"1857:38:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1875:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"1882:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1871:3:6"},"nodeType":"YulFunctionCall","src":"1871:14:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1891:2:6","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1887:3:6"},"nodeType":"YulFunctionCall","src":"1887:7:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1867:3:6"},"nodeType":"YulFunctionCall","src":"1867:28:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1857:6:6"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1830:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1840:6:6","type":""}],"src":"1799:102:6"},{"body":{"nodeType":"YulBlock","src":"1935:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1952:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1955:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1945:6:6"},"nodeType":"YulFunctionCall","src":"1945:88:6"},"nodeType":"YulExpressionStatement","src":"1945:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2049:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2052:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2042:6:6"},"nodeType":"YulFunctionCall","src":"2042:15:6"},"nodeType":"YulExpressionStatement","src":"2042:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2073:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2076:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2066:6:6"},"nodeType":"YulFunctionCall","src":"2066:15:6"},"nodeType":"YulExpressionStatement","src":"2066:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1907:180:6"},{"body":{"nodeType":"YulBlock","src":"2136:238:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2146:58:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2168:6:6"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2198:4:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2176:21:6"},"nodeType":"YulFunctionCall","src":"2176:27:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2164:3:6"},"nodeType":"YulFunctionCall","src":"2164:40:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2150:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2315:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2317:16:6"},"nodeType":"YulFunctionCall","src":"2317:18:6"},"nodeType":"YulExpressionStatement","src":"2317:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2258:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"2270:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2255:2:6"},"nodeType":"YulFunctionCall","src":"2255:34:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2294:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2306:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2291:2:6"},"nodeType":"YulFunctionCall","src":"2291:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2252:2:6"},"nodeType":"YulFunctionCall","src":"2252:62:6"},"nodeType":"YulIf","src":"2249:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2353:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2357:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2346:6:6"},"nodeType":"YulFunctionCall","src":"2346:22:6"},"nodeType":"YulExpressionStatement","src":"2346:22:6"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2122:6:6","type":""},{"name":"size","nodeType":"YulTypedName","src":"2130:4:6","type":""}],"src":"2093:281:6"},{"body":{"nodeType":"YulBlock","src":"2421:88:6","statements":[{"nodeType":"YulAssignment","src":"2431:30:6","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"2441:18:6"},"nodeType":"YulFunctionCall","src":"2441:20:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2431:6:6"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2490:6:6"},{"name":"size","nodeType":"YulIdentifier","src":"2498:4:6"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2470:19:6"},"nodeType":"YulFunctionCall","src":"2470:33:6"},"nodeType":"YulExpressionStatement","src":"2470:33:6"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2405:4:6","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2414:6:6","type":""}],"src":"2380:129:6"},{"body":{"nodeType":"YulBlock","src":"2581:241:6","statements":[{"body":{"nodeType":"YulBlock","src":"2686:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2688:16:6"},"nodeType":"YulFunctionCall","src":"2688:18:6"},"nodeType":"YulExpressionStatement","src":"2688:18:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2658:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2666:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2655:2:6"},"nodeType":"YulFunctionCall","src":"2655:30:6"},"nodeType":"YulIf","src":"2652:56:6"},{"nodeType":"YulAssignment","src":"2718:37:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2748:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2726:21:6"},"nodeType":"YulFunctionCall","src":"2726:29:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2718:4:6"}]},{"nodeType":"YulAssignment","src":"2792:23:6","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2804:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"2810:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2800:3:6"},"nodeType":"YulFunctionCall","src":"2800:15:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2792:4:6"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2565:6:6","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2576:4:6","type":""}],"src":"2515:307:6"},{"body":{"nodeType":"YulBlock","src":"2892:82:6","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2915:3:6"},{"name":"src","nodeType":"YulIdentifier","src":"2920:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"2925:6:6"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2902:12:6"},"nodeType":"YulFunctionCall","src":"2902:30:6"},"nodeType":"YulExpressionStatement","src":"2902:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2952:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"2957:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2948:3:6"},"nodeType":"YulFunctionCall","src":"2948:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"2966:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2941:6:6"},"nodeType":"YulFunctionCall","src":"2941:27:6"},"nodeType":"YulExpressionStatement","src":"2941:27:6"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2874:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2879:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"2884:6:6","type":""}],"src":"2828:146:6"},{"body":{"nodeType":"YulBlock","src":"3063:340:6","statements":[{"nodeType":"YulAssignment","src":"3073:74:6","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3139:6:6"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3098:40:6"},"nodeType":"YulFunctionCall","src":"3098:48:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3082:15:6"},"nodeType":"YulFunctionCall","src":"3082:65:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3073:5:6"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3163:5:6"},{"name":"length","nodeType":"YulIdentifier","src":"3170:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3156:6:6"},"nodeType":"YulFunctionCall","src":"3156:21:6"},"nodeType":"YulExpressionStatement","src":"3156:21:6"},{"nodeType":"YulVariableDeclaration","src":"3186:27:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3201:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"3208:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3197:3:6"},"nodeType":"YulFunctionCall","src":"3197:16:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3190:3:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"3251:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"3253:77:6"},"nodeType":"YulFunctionCall","src":"3253:79:6"},"nodeType":"YulExpressionStatement","src":"3253:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3232:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"3237:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3228:3:6"},"nodeType":"YulFunctionCall","src":"3228:16:6"},{"name":"end","nodeType":"YulIdentifier","src":"3246:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3225:2:6"},"nodeType":"YulFunctionCall","src":"3225:25:6"},"nodeType":"YulIf","src":"3222:112:6"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3380:3:6"},{"name":"dst","nodeType":"YulIdentifier","src":"3385:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"3390:6:6"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3343:36:6"},"nodeType":"YulFunctionCall","src":"3343:54:6"},"nodeType":"YulExpressionStatement","src":"3343:54:6"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3036:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"3041:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"3049:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3057:5:6","type":""}],"src":"2980:423:6"},{"body":{"nodeType":"YulBlock","src":"3483:277:6","statements":[{"body":{"nodeType":"YulBlock","src":"3532:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3534:77:6"},"nodeType":"YulFunctionCall","src":"3534:79:6"},"nodeType":"YulExpressionStatement","src":"3534:79:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3519:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3507:3:6"},"nodeType":"YulFunctionCall","src":"3507:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"3526:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3503:3:6"},"nodeType":"YulFunctionCall","src":"3503:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3496:6:6"},"nodeType":"YulFunctionCall","src":"3496:35:6"},"nodeType":"YulIf","src":"3493:122:6"},{"nodeType":"YulVariableDeclaration","src":"3624:34:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3651:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3638:12:6"},"nodeType":"YulFunctionCall","src":"3638:20:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3628:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3667:87:6","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3727:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3735:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3723:3:6"},"nodeType":"YulFunctionCall","src":"3723:17:6"},{"name":"length","nodeType":"YulIdentifier","src":"3742:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"3750:3:6"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3676:46:6"},"nodeType":"YulFunctionCall","src":"3676:78:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3667:5:6"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3461:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"3469:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3477:5:6","type":""}],"src":"3422:338:6"},{"body":{"nodeType":"YulBlock","src":"3892:817:6","statements":[{"body":{"nodeType":"YulBlock","src":"3939:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3941:77:6"},"nodeType":"YulFunctionCall","src":"3941:79:6"},"nodeType":"YulExpressionStatement","src":"3941:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3913:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"3922:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3909:3:6"},"nodeType":"YulFunctionCall","src":"3909:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"3934:3:6","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3905:3:6"},"nodeType":"YulFunctionCall","src":"3905:33:6"},"nodeType":"YulIf","src":"3902:120:6"},{"nodeType":"YulBlock","src":"4032:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4047:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"4061:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4051:6:6","type":""}]},{"nodeType":"YulAssignment","src":"4076:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4111:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"4122:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4107:3:6"},"nodeType":"YulFunctionCall","src":"4107:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4131:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4086:20:6"},"nodeType":"YulFunctionCall","src":"4086:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4076:6:6"}]}]},{"nodeType":"YulBlock","src":"4159:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4174:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"4188:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4178:6:6","type":""}]},{"nodeType":"YulAssignment","src":"4204:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4239:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"4250:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4235:3:6"},"nodeType":"YulFunctionCall","src":"4235:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4259:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4214:20:6"},"nodeType":"YulFunctionCall","src":"4214:53:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4204:6:6"}]}]},{"nodeType":"YulBlock","src":"4287:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4302:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"4316:2:6","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4306:6:6","type":""}]},{"nodeType":"YulAssignment","src":"4332:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4367:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"4378:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4363:3:6"},"nodeType":"YulFunctionCall","src":"4363:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4387:7:6"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4342:20:6"},"nodeType":"YulFunctionCall","src":"4342:53:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4332:6:6"}]}]},{"nodeType":"YulBlock","src":"4415:287:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4430:46:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4461:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4472:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4457:3:6"},"nodeType":"YulFunctionCall","src":"4457:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4444:12:6"},"nodeType":"YulFunctionCall","src":"4444:32:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4434:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4523:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4525:77:6"},"nodeType":"YulFunctionCall","src":"4525:79:6"},"nodeType":"YulExpressionStatement","src":"4525:79:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4495:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"4503:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4492:2:6"},"nodeType":"YulFunctionCall","src":"4492:30:6"},"nodeType":"YulIf","src":"4489:117:6"},{"nodeType":"YulAssignment","src":"4620:72:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4664:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"4675:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4660:3:6"},"nodeType":"YulFunctionCall","src":"4660:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4684:7:6"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"4630:29:6"},"nodeType":"YulFunctionCall","src":"4630:62:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4620:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3838:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3849:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3861:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3869:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3877:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3885:6:6","type":""}],"src":"3766:943:6"},{"body":{"nodeType":"YulBlock","src":"4757:48:6","statements":[{"nodeType":"YulAssignment","src":"4767:32:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4792:5:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4785:6:6"},"nodeType":"YulFunctionCall","src":"4785:13:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4778:6:6"},"nodeType":"YulFunctionCall","src":"4778:21:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4767:7:6"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4739:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4749:7:6","type":""}],"src":"4715:90:6"},{"body":{"nodeType":"YulBlock","src":"4870:50:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4887:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4907:5:6"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"4892:14:6"},"nodeType":"YulFunctionCall","src":"4892:21:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4880:6:6"},"nodeType":"YulFunctionCall","src":"4880:34:6"},"nodeType":"YulExpressionStatement","src":"4880:34:6"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4858:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4865:3:6","type":""}],"src":"4811:109:6"},{"body":{"nodeType":"YulBlock","src":"5018:118:6","statements":[{"nodeType":"YulAssignment","src":"5028:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5040:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5051:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5036:3:6"},"nodeType":"YulFunctionCall","src":"5036:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5028:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5102:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5115:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5126:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5111:3:6"},"nodeType":"YulFunctionCall","src":"5111:17:6"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"5064:37:6"},"nodeType":"YulFunctionCall","src":"5064:65:6"},"nodeType":"YulExpressionStatement","src":"5064:65:6"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4990:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5002:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5013:4:6","type":""}],"src":"4926:210:6"},{"body":{"nodeType":"YulBlock","src":"5208:263:6","statements":[{"body":{"nodeType":"YulBlock","src":"5254:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5256:77:6"},"nodeType":"YulFunctionCall","src":"5256:79:6"},"nodeType":"YulExpressionStatement","src":"5256:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5229:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"5238:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5225:3:6"},"nodeType":"YulFunctionCall","src":"5225:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"5250:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5221:3:6"},"nodeType":"YulFunctionCall","src":"5221:32:6"},"nodeType":"YulIf","src":"5218:119:6"},{"nodeType":"YulBlock","src":"5347:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5362:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5376:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5366:6:6","type":""}]},{"nodeType":"YulAssignment","src":"5391:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5426:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5437:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5422:3:6"},"nodeType":"YulFunctionCall","src":"5422:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5446:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5401:20:6"},"nodeType":"YulFunctionCall","src":"5401:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5391:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5178:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5189:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5201:6:6","type":""}],"src":"5142:329:6"},{"body":{"nodeType":"YulBlock","src":"5532:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5549:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5572:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5554:17:6"},"nodeType":"YulFunctionCall","src":"5554:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5542:6:6"},"nodeType":"YulFunctionCall","src":"5542:37:6"},"nodeType":"YulExpressionStatement","src":"5542:37:6"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5520:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5527:3:6","type":""}],"src":"5477:108:6"},{"body":{"nodeType":"YulBlock","src":"5646:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5663:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5686:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5668:17:6"},"nodeType":"YulFunctionCall","src":"5668:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5656:6:6"},"nodeType":"YulFunctionCall","src":"5656:37:6"},"nodeType":"YulExpressionStatement","src":"5656:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5634:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5641:3:6","type":""}],"src":"5591:108:6"},{"body":{"nodeType":"YulBlock","src":"5754:50:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5771:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5791:5:6"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"5776:14:6"},"nodeType":"YulFunctionCall","src":"5776:21:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5764:6:6"},"nodeType":"YulFunctionCall","src":"5764:34:6"},"nodeType":"YulExpressionStatement","src":"5764:34:6"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5742:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5749:3:6","type":""}],"src":"5705:99:6"},{"body":{"nodeType":"YulBlock","src":"5854:51:6","statements":[{"nodeType":"YulAssignment","src":"5864:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5879:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"5886:12:6","type":"","value":"0xffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5875:3:6"},"nodeType":"YulFunctionCall","src":"5875:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5864:7:6"}]}]},"name":"cleanup_t_uint40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5836:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5846:7:6","type":""}],"src":"5810:95:6"},{"body":{"nodeType":"YulBlock","src":"5964:52:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5981:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6003:5:6"}],"functionName":{"name":"cleanup_t_uint40","nodeType":"YulIdentifier","src":"5986:16:6"},"nodeType":"YulFunctionCall","src":"5986:23:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5974:6:6"},"nodeType":"YulFunctionCall","src":"5974:36:6"},"nodeType":"YulExpressionStatement","src":"5974:36:6"}]},"name":"abi_encode_t_uint40_to_t_uint40","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5952:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5959:3:6","type":""}],"src":"5911:105:6"},{"body":{"nodeType":"YulBlock","src":"6198:1104:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6208:26:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6224:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6229:4:6","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6220:3:6"},"nodeType":"YulFunctionCall","src":"6220:14:6"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"6212:4:6","type":""}]},{"nodeType":"YulBlock","src":"6244:168:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6283:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6313:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"6320:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6309:3:6"},"nodeType":"YulFunctionCall","src":"6309:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6303:5:6"},"nodeType":"YulFunctionCall","src":"6303:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6287:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6373:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6391:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6396:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6387:3:6"},"nodeType":"YulFunctionCall","src":"6387:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"6339:33:6"},"nodeType":"YulFunctionCall","src":"6339:63:6"},"nodeType":"YulExpressionStatement","src":"6339:63:6"}]},{"nodeType":"YulBlock","src":"6422:166:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6459:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6489:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"6496:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6485:3:6"},"nodeType":"YulFunctionCall","src":"6485:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6479:5:6"},"nodeType":"YulFunctionCall","src":"6479:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6463:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6549:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6567:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6572:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6563:3:6"},"nodeType":"YulFunctionCall","src":"6563:14:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"6515:33:6"},"nodeType":"YulFunctionCall","src":"6515:63:6"},"nodeType":"YulExpressionStatement","src":"6515:63:6"}]},{"nodeType":"YulBlock","src":"6598:172:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6641:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6671:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"6678:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6667:3:6"},"nodeType":"YulFunctionCall","src":"6667:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6661:5:6"},"nodeType":"YulFunctionCall","src":"6661:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6645:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6731:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6749:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6754:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6745:3:6"},"nodeType":"YulFunctionCall","src":"6745:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"6697:33:6"},"nodeType":"YulFunctionCall","src":"6697:63:6"},"nodeType":"YulExpressionStatement","src":"6697:63:6"}]},{"nodeType":"YulBlock","src":"6780:161:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6818:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6848:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"6855:4:6","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6844:3:6"},"nodeType":"YulFunctionCall","src":"6844:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6838:5:6"},"nodeType":"YulFunctionCall","src":"6838:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6822:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6902:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6920:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6925:4:6","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6916:3:6"},"nodeType":"YulFunctionCall","src":"6916:14:6"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"6874:27:6"},"nodeType":"YulFunctionCall","src":"6874:57:6"},"nodeType":"YulExpressionStatement","src":"6874:57:6"}]},{"nodeType":"YulBlock","src":"6951:167:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6991:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7021:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"7028:4:6","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7017:3:6"},"nodeType":"YulFunctionCall","src":"7017:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7011:5:6"},"nodeType":"YulFunctionCall","src":"7011:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6995:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"7079:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7097:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"7102:4:6","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7093:3:6"},"nodeType":"YulFunctionCall","src":"7093:14:6"}],"functionName":{"name":"abi_encode_t_uint40_to_t_uint40","nodeType":"YulIdentifier","src":"7047:31:6"},"nodeType":"YulFunctionCall","src":"7047:61:6"},"nodeType":"YulExpressionStatement","src":"7047:61:6"}]},{"nodeType":"YulBlock","src":"7128:167:6","statements":[{"nodeType":"YulVariableDeclaration","src":"7166:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7196:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"7203:4:6","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7192:3:6"},"nodeType":"YulFunctionCall","src":"7192:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7186:5:6"},"nodeType":"YulFunctionCall","src":"7186:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"7170:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"7256:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7274:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"7279:4:6","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7270:3:6"},"nodeType":"YulFunctionCall","src":"7270:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"7222:33:6"},"nodeType":"YulFunctionCall","src":"7222:63:6"},"nodeType":"YulExpressionStatement","src":"7222:63:6"}]}]},"name":"abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6185:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6192:3:6","type":""}],"src":"6088:1214:6"},{"body":{"nodeType":"YulBlock","src":"7450:169:6","statements":[{"nodeType":"YulAssignment","src":"7460:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7472:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7483:3:6","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7468:3:6"},"nodeType":"YulFunctionCall","src":"7468:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7460:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7585:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7598:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7609:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7594:3:6"},"nodeType":"YulFunctionCall","src":"7594:17:6"}],"functionName":{"name":"abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7497:87:6"},"nodeType":"YulFunctionCall","src":"7497:115:6"},"nodeType":"YulExpressionStatement","src":"7497:115:6"}]},"name":"abi_encode_tuple_t_struct$_Link_$1618_memory_ptr__to_t_struct$_Link_$1618_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7422:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7434:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7445:4:6","type":""}],"src":"7308:311:6"},{"body":{"nodeType":"YulBlock","src":"7721:40:6","statements":[{"nodeType":"YulAssignment","src":"7732:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7748:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7742:5:6"},"nodeType":"YulFunctionCall","src":"7742:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7732:6:6"}]}]},"name":"array_length_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7704:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"7714:6:6","type":""}],"src":"7625:136:6"},{"body":{"nodeType":"YulBlock","src":"7900:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7917:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"7922:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7910:6:6"},"nodeType":"YulFunctionCall","src":"7910:19:6"},"nodeType":"YulExpressionStatement","src":"7910:19:6"},{"nodeType":"YulAssignment","src":"7938:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7957:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"7962:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7953:3:6"},"nodeType":"YulFunctionCall","src":"7953:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"7938:11:6"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7872:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"7877:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"7888:11:6","type":""}],"src":"7767:206:6"},{"body":{"nodeType":"YulBlock","src":"8073:60:6","statements":[{"nodeType":"YulAssignment","src":"8083:11:6","value":{"name":"ptr","nodeType":"YulIdentifier","src":"8091:3:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8083:4:6"}]},{"nodeType":"YulAssignment","src":"8104:22:6","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8116:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8121:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8112:3:6"},"nodeType":"YulFunctionCall","src":"8112:14:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8104:4:6"}]}]},"name":"array_dataslot_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"8060:3:6","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"8068:4:6","type":""}],"src":"7979:154:6"},{"body":{"nodeType":"YulBlock","src":"8305:1104:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8315:26:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8331:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8336:4:6","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8327:3:6"},"nodeType":"YulFunctionCall","src":"8327:14:6"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"8319:4:6","type":""}]},{"nodeType":"YulBlock","src":"8351:168:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8390:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8420:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"8427:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8416:3:6"},"nodeType":"YulFunctionCall","src":"8416:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8410:5:6"},"nodeType":"YulFunctionCall","src":"8410:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8394:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8480:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8498:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8503:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8494:3:6"},"nodeType":"YulFunctionCall","src":"8494:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"8446:33:6"},"nodeType":"YulFunctionCall","src":"8446:63:6"},"nodeType":"YulExpressionStatement","src":"8446:63:6"}]},{"nodeType":"YulBlock","src":"8529:166:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8566:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8596:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"8603:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8592:3:6"},"nodeType":"YulFunctionCall","src":"8592:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8586:5:6"},"nodeType":"YulFunctionCall","src":"8586:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8570:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8656:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8674:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8679:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8670:3:6"},"nodeType":"YulFunctionCall","src":"8670:14:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"8622:33:6"},"nodeType":"YulFunctionCall","src":"8622:63:6"},"nodeType":"YulExpressionStatement","src":"8622:63:6"}]},{"nodeType":"YulBlock","src":"8705:172:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8748:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8778:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"8785:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8774:3:6"},"nodeType":"YulFunctionCall","src":"8774:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8768:5:6"},"nodeType":"YulFunctionCall","src":"8768:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8752:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8838:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8856:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8861:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8852:3:6"},"nodeType":"YulFunctionCall","src":"8852:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"8804:33:6"},"nodeType":"YulFunctionCall","src":"8804:63:6"},"nodeType":"YulExpressionStatement","src":"8804:63:6"}]},{"nodeType":"YulBlock","src":"8887:161:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8925:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8955:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"8962:4:6","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8951:3:6"},"nodeType":"YulFunctionCall","src":"8951:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8945:5:6"},"nodeType":"YulFunctionCall","src":"8945:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8929:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"9009:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9027:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9032:4:6","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9023:3:6"},"nodeType":"YulFunctionCall","src":"9023:14:6"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"8981:27:6"},"nodeType":"YulFunctionCall","src":"8981:57:6"},"nodeType":"YulExpressionStatement","src":"8981:57:6"}]},{"nodeType":"YulBlock","src":"9058:167:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9098:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9128:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"9135:4:6","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9124:3:6"},"nodeType":"YulFunctionCall","src":"9124:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9118:5:6"},"nodeType":"YulFunctionCall","src":"9118:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"9102:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"9186:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9204:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9209:4:6","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9200:3:6"},"nodeType":"YulFunctionCall","src":"9200:14:6"}],"functionName":{"name":"abi_encode_t_uint40_to_t_uint40","nodeType":"YulIdentifier","src":"9154:31:6"},"nodeType":"YulFunctionCall","src":"9154:61:6"},"nodeType":"YulExpressionStatement","src":"9154:61:6"}]},{"nodeType":"YulBlock","src":"9235:167:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9273:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9303:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"9310:4:6","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9299:3:6"},"nodeType":"YulFunctionCall","src":"9299:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9293:5:6"},"nodeType":"YulFunctionCall","src":"9293:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"9277:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"9363:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9381:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9386:4:6","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9377:3:6"},"nodeType":"YulFunctionCall","src":"9377:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"9329:33:6"},"nodeType":"YulFunctionCall","src":"9329:63:6"},"nodeType":"YulExpressionStatement","src":"9329:63:6"}]}]},"name":"abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8292:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8299:3:6","type":""}],"src":"8205:1204:6"},{"body":{"nodeType":"YulBlock","src":"9539:143:6","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9627:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"9635:3:6"}],"functionName":{"name":"abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr","nodeType":"YulIdentifier","src":"9549:77:6"},"nodeType":"YulFunctionCall","src":"9549:90:6"},"nodeType":"YulExpressionStatement","src":"9549:90:6"},{"nodeType":"YulAssignment","src":"9648:28:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9666:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9671:4:6","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9662:3:6"},"nodeType":"YulFunctionCall","src":"9662:14:6"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"9648:10:6"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"9512:6:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9520:3:6","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"9528:10:6","type":""}],"src":"9415:267:6"},{"body":{"nodeType":"YulBlock","src":"9785:38:6","statements":[{"nodeType":"YulAssignment","src":"9795:22:6","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"9807:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9812:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9803:3:6"},"nodeType":"YulFunctionCall","src":"9803:14:6"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"9795:4:6"}]}]},"name":"array_nextElement_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"9772:3:6","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"9780:4:6","type":""}],"src":"9688:135:6"},{"body":{"nodeType":"YulBlock","src":"10067:740:6","statements":[{"nodeType":"YulVariableDeclaration","src":"10077:90:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10161:5:6"}],"functionName":{"name":"array_length_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10091:69:6"},"nodeType":"YulFunctionCall","src":"10091:76:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10081:6:6","type":""}]},{"nodeType":"YulAssignment","src":"10176:115:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10279:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"10284:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10183:95:6"},"nodeType":"YulFunctionCall","src":"10183:108:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10176:3:6"}]},{"nodeType":"YulVariableDeclaration","src":"10300:93:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10387:5:6"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10315:71:6"},"nodeType":"YulFunctionCall","src":"10315:78:6"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"10304:7:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10402:21:6","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"10416:7:6"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"10406:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"10492:290:6","statements":[{"nodeType":"YulVariableDeclaration","src":"10506:34:6","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10533:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10527:5:6"},"nodeType":"YulFunctionCall","src":"10527:13:6"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"10510:13:6","type":""}]},{"nodeType":"YulAssignment","src":"10553:114:6","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"10648:13:6"},{"name":"pos","nodeType":"YulIdentifier","src":"10663:3:6"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr","nodeType":"YulIdentifier","src":"10560:87:6"},"nodeType":"YulFunctionCall","src":"10560:107:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10553:3:6"}]},{"nodeType":"YulAssignment","src":"10680:92:6","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10765:6:6"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10690:74:6"},"nodeType":"YulFunctionCall","src":"10690:82:6"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10680:6:6"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10454:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"10457:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10451:2:6"},"nodeType":"YulFunctionCall","src":"10451:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10465:18:6","statements":[{"nodeType":"YulAssignment","src":"10467:14:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10476:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"10479:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10472:3:6"},"nodeType":"YulFunctionCall","src":"10472:9:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10467:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"10436:14:6","statements":[{"nodeType":"YulVariableDeclaration","src":"10438:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"10447:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10442:1:6","type":""}]}]},"src":"10432:350:6"},{"nodeType":"YulAssignment","src":"10791:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"10798:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10791:3:6"}]}]},"name":"abi_encode_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10046:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10053:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10062:3:6","type":""}],"src":"9899:908:6"},{"body":{"nodeType":"YulBlock","src":"11005:269:6","statements":[{"nodeType":"YulAssignment","src":"11015:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11027:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11038:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11023:3:6"},"nodeType":"YulFunctionCall","src":"11023:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11015:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11062:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11073:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11058:3:6"},"nodeType":"YulFunctionCall","src":"11058:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11081:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"11087:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11077:3:6"},"nodeType":"YulFunctionCall","src":"11077:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11051:6:6"},"nodeType":"YulFunctionCall","src":"11051:47:6"},"nodeType":"YulExpressionStatement","src":"11051:47:6"},{"nodeType":"YulAssignment","src":"11107:160:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11253:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"11262:4:6"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11115:137:6"},"nodeType":"YulFunctionCall","src":"11115:152:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11107:4:6"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10977:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10989:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11000:4:6","type":""}],"src":"10813:461:6"},{"body":{"nodeType":"YulBlock","src":"11380:519:6","statements":[{"body":{"nodeType":"YulBlock","src":"11426:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11428:77:6"},"nodeType":"YulFunctionCall","src":"11428:79:6"},"nodeType":"YulExpressionStatement","src":"11428:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11401:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"11410:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11397:3:6"},"nodeType":"YulFunctionCall","src":"11397:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"11422:2:6","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11393:3:6"},"nodeType":"YulFunctionCall","src":"11393:32:6"},"nodeType":"YulIf","src":"11390:119:6"},{"nodeType":"YulBlock","src":"11519:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"11534:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"11548:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11538:6:6","type":""}]},{"nodeType":"YulAssignment","src":"11563:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11598:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"11609:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11594:3:6"},"nodeType":"YulFunctionCall","src":"11594:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11618:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11573:20:6"},"nodeType":"YulFunctionCall","src":"11573:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11563:6:6"}]}]},{"nodeType":"YulBlock","src":"11646:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"11661:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"11675:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11665:6:6","type":""}]},{"nodeType":"YulAssignment","src":"11691:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11726:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"11737:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11722:3:6"},"nodeType":"YulFunctionCall","src":"11722:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11746:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11701:20:6"},"nodeType":"YulFunctionCall","src":"11701:53:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11691:6:6"}]}]},{"nodeType":"YulBlock","src":"11774:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"11789:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"11803:2:6","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11793:6:6","type":""}]},{"nodeType":"YulAssignment","src":"11819:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11854:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"11865:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11850:3:6"},"nodeType":"YulFunctionCall","src":"11850:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11874:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11829:20:6"},"nodeType":"YulFunctionCall","src":"11829:53:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11819:6:6"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11334:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11345:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11357:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11365:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11373:6:6","type":""}],"src":"11280:619:6"},{"body":{"nodeType":"YulBlock","src":"11970:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11987:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12010:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11992:17:6"},"nodeType":"YulFunctionCall","src":"11992:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11980:6:6"},"nodeType":"YulFunctionCall","src":"11980:37:6"},"nodeType":"YulExpressionStatement","src":"11980:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11958:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11965:3:6","type":""}],"src":"11905:118:6"},{"body":{"nodeType":"YulBlock","src":"12127:124:6","statements":[{"nodeType":"YulAssignment","src":"12137:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12149:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12160:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12145:3:6"},"nodeType":"YulFunctionCall","src":"12145:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12137:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12217:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12230:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12241:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12226:3:6"},"nodeType":"YulFunctionCall","src":"12226:17:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12173:43:6"},"nodeType":"YulFunctionCall","src":"12173:71:6"},"nodeType":"YulExpressionStatement","src":"12173:71:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12099:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12111:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12122:4:6","type":""}],"src":"12029:222:6"},{"body":{"nodeType":"YulBlock","src":"12322:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12339:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12362:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"12344:17:6"},"nodeType":"YulFunctionCall","src":"12344:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12332:6:6"},"nodeType":"YulFunctionCall","src":"12332:37:6"},"nodeType":"YulExpressionStatement","src":"12332:37:6"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12310:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12317:3:6","type":""}],"src":"12257:118:6"},{"body":{"nodeType":"YulBlock","src":"12444:52:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12461:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12483:5:6"}],"functionName":{"name":"cleanup_t_uint40","nodeType":"YulIdentifier","src":"12466:16:6"},"nodeType":"YulFunctionCall","src":"12466:23:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12454:6:6"},"nodeType":"YulFunctionCall","src":"12454:36:6"},"nodeType":"YulExpressionStatement","src":"12454:36:6"}]},"name":"abi_encode_t_uint40_to_t_uint40_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12432:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12439:3:6","type":""}],"src":"12381:115:6"},{"body":{"nodeType":"YulBlock","src":"12732:529:6","statements":[{"nodeType":"YulAssignment","src":"12742:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12754:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12765:3:6","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12750:3:6"},"nodeType":"YulFunctionCall","src":"12750:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12742:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12823:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12836:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12847:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12832:3:6"},"nodeType":"YulFunctionCall","src":"12832:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12779:43:6"},"nodeType":"YulFunctionCall","src":"12779:71:6"},"nodeType":"YulExpressionStatement","src":"12779:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12904:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12917:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12928:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12913:3:6"},"nodeType":"YulFunctionCall","src":"12913:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12860:43:6"},"nodeType":"YulFunctionCall","src":"12860:72:6"},"nodeType":"YulExpressionStatement","src":"12860:72:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12986:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12999:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13010:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12995:3:6"},"nodeType":"YulFunctionCall","src":"12995:18:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12942:43:6"},"nodeType":"YulFunctionCall","src":"12942:72:6"},"nodeType":"YulExpressionStatement","src":"12942:72:6"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13062:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13075:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13086:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13071:3:6"},"nodeType":"YulFunctionCall","src":"13071:18:6"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"13024:37:6"},"nodeType":"YulFunctionCall","src":"13024:66:6"},"nodeType":"YulExpressionStatement","src":"13024:66:6"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"13142:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13155:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13166:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13151:3:6"},"nodeType":"YulFunctionCall","src":"13151:19:6"}],"functionName":{"name":"abi_encode_t_uint40_to_t_uint40_fromStack","nodeType":"YulIdentifier","src":"13100:41:6"},"nodeType":"YulFunctionCall","src":"13100:71:6"},"nodeType":"YulExpressionStatement","src":"13100:71:6"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"13225:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13238:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"13249:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13234:3:6"},"nodeType":"YulFunctionCall","src":"13234:19:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13181:43:6"},"nodeType":"YulFunctionCall","src":"13181:73:6"},"nodeType":"YulExpressionStatement","src":"13181:73:6"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address_t_bool_t_uint40_t_address__to_t_address_t_uint256_t_address_t_bool_t_uint40_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12664:9:6","type":""},{"name":"value5","nodeType":"YulTypedName","src":"12676:6:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12684:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12692:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12700:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12708:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12716:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12727:4:6","type":""}],"src":"12502:759:6"},{"body":{"nodeType":"YulBlock","src":"13326:40:6","statements":[{"nodeType":"YulAssignment","src":"13337:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13353:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13347:5:6"},"nodeType":"YulFunctionCall","src":"13347:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13337:6:6"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13309:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"13319:6:6","type":""}],"src":"13267:99:6"},{"body":{"nodeType":"YulBlock","src":"13468:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13485:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"13490:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13478:6:6"},"nodeType":"YulFunctionCall","src":"13478:19:6"},"nodeType":"YulExpressionStatement","src":"13478:19:6"},{"nodeType":"YulAssignment","src":"13506:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13525:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"13530:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13521:3:6"},"nodeType":"YulFunctionCall","src":"13521:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"13506:11:6"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13440:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"13445:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"13456:11:6","type":""}],"src":"13372:169:6"},{"body":{"nodeType":"YulBlock","src":"13609:184:6","statements":[{"nodeType":"YulVariableDeclaration","src":"13619:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"13628:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13623:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"13688:63:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13713:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"13718:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13709:3:6"},"nodeType":"YulFunctionCall","src":"13709:11:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13732:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"13737:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13728:3:6"},"nodeType":"YulFunctionCall","src":"13728:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13722:5:6"},"nodeType":"YulFunctionCall","src":"13722:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13702:6:6"},"nodeType":"YulFunctionCall","src":"13702:39:6"},"nodeType":"YulExpressionStatement","src":"13702:39:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13649:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"13652:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13646:2:6"},"nodeType":"YulFunctionCall","src":"13646:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13660:19:6","statements":[{"nodeType":"YulAssignment","src":"13662:15:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13671:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"13674:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13667:3:6"},"nodeType":"YulFunctionCall","src":"13667:10:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13662:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"13642:3:6","statements":[]},"src":"13638:113:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13771:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"13776:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13767:3:6"},"nodeType":"YulFunctionCall","src":"13767:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"13785:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13760:6:6"},"nodeType":"YulFunctionCall","src":"13760:27:6"},"nodeType":"YulExpressionStatement","src":"13760:27:6"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13591:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"13596:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"13601:6:6","type":""}],"src":"13547:246:6"},{"body":{"nodeType":"YulBlock","src":"13891:285:6","statements":[{"nodeType":"YulVariableDeclaration","src":"13901:53:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13948:5:6"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"13915:32:6"},"nodeType":"YulFunctionCall","src":"13915:39:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13905:6:6","type":""}]},{"nodeType":"YulAssignment","src":"13963:78:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14029:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"14034:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13970:58:6"},"nodeType":"YulFunctionCall","src":"13970:71:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13963:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14089:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"14096:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14085:3:6"},"nodeType":"YulFunctionCall","src":"14085:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"14103:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"14108:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"14050:34:6"},"nodeType":"YulFunctionCall","src":"14050:65:6"},"nodeType":"YulExpressionStatement","src":"14050:65:6"},{"nodeType":"YulAssignment","src":"14124:46:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14135:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14162:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"14140:21:6"},"nodeType":"YulFunctionCall","src":"14140:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14131:3:6"},"nodeType":"YulFunctionCall","src":"14131:39:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14124:3:6"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13872:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13879:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13887:3:6","type":""}],"src":"13799:377:6"},{"body":{"nodeType":"YulBlock","src":"14300:195:6","statements":[{"nodeType":"YulAssignment","src":"14310:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14322:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"14333:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14318:3:6"},"nodeType":"YulFunctionCall","src":"14318:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14310:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14357:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"14368:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14353:3:6"},"nodeType":"YulFunctionCall","src":"14353:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14376:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"14382:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14372:3:6"},"nodeType":"YulFunctionCall","src":"14372:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14346:6:6"},"nodeType":"YulFunctionCall","src":"14346:47:6"},"nodeType":"YulExpressionStatement","src":"14346:47:6"},{"nodeType":"YulAssignment","src":"14402:86:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14474:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"14483:4:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14410:63:6"},"nodeType":"YulFunctionCall","src":"14410:78:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14402:4:6"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14272:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14284:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14295:4:6","type":""}],"src":"14182:313:6"},{"body":{"nodeType":"YulBlock","src":"14601:519:6","statements":[{"body":{"nodeType":"YulBlock","src":"14647:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14649:77:6"},"nodeType":"YulFunctionCall","src":"14649:79:6"},"nodeType":"YulExpressionStatement","src":"14649:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14622:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"14631:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14618:3:6"},"nodeType":"YulFunctionCall","src":"14618:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"14643:2:6","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14614:3:6"},"nodeType":"YulFunctionCall","src":"14614:32:6"},"nodeType":"YulIf","src":"14611:119:6"},{"nodeType":"YulBlock","src":"14740:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"14755:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"14769:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14759:6:6","type":""}]},{"nodeType":"YulAssignment","src":"14784:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14819:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"14830:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14815:3:6"},"nodeType":"YulFunctionCall","src":"14815:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14839:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14794:20:6"},"nodeType":"YulFunctionCall","src":"14794:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14784:6:6"}]}]},{"nodeType":"YulBlock","src":"14867:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"14882:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"14896:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14886:6:6","type":""}]},{"nodeType":"YulAssignment","src":"14912:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14947:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"14958:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14943:3:6"},"nodeType":"YulFunctionCall","src":"14943:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14967:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14922:20:6"},"nodeType":"YulFunctionCall","src":"14922:53:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14912:6:6"}]}]},{"nodeType":"YulBlock","src":"14995:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"15010:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"15024:2:6","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15014:6:6","type":""}]},{"nodeType":"YulAssignment","src":"15040:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15075:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"15086:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15071:3:6"},"nodeType":"YulFunctionCall","src":"15071:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15095:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"15050:20:6"},"nodeType":"YulFunctionCall","src":"15050:53:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15040:6:6"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14555:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14566:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14578:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14586:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14594:6:6","type":""}],"src":"14501:619:6"},{"body":{"nodeType":"YulBlock","src":"15224:124:6","statements":[{"nodeType":"YulAssignment","src":"15234:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15246:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15257:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15242:3:6"},"nodeType":"YulFunctionCall","src":"15242:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15234:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15314:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15327:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15338:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15323:3:6"},"nodeType":"YulFunctionCall","src":"15323:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"15270:43:6"},"nodeType":"YulFunctionCall","src":"15270:71:6"},"nodeType":"YulExpressionStatement","src":"15270:71:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15196:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15208:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15219:4:6","type":""}],"src":"15126:222:6"},{"body":{"nodeType":"YulBlock","src":"15446:560:6","statements":[{"body":{"nodeType":"YulBlock","src":"15492:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15494:77:6"},"nodeType":"YulFunctionCall","src":"15494:79:6"},"nodeType":"YulExpressionStatement","src":"15494:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15467:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"15476:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15463:3:6"},"nodeType":"YulFunctionCall","src":"15463:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"15488:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15459:3:6"},"nodeType":"YulFunctionCall","src":"15459:32:6"},"nodeType":"YulIf","src":"15456:119:6"},{"nodeType":"YulBlock","src":"15585:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"15600:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"15614:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15604:6:6","type":""}]},{"nodeType":"YulAssignment","src":"15629:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15664:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"15675:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15660:3:6"},"nodeType":"YulFunctionCall","src":"15660:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15684:7:6"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"15639:20:6"},"nodeType":"YulFunctionCall","src":"15639:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15629:6:6"}]}]},{"nodeType":"YulBlock","src":"15712:287:6","statements":[{"nodeType":"YulVariableDeclaration","src":"15727:46:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15758:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15769:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15754:3:6"},"nodeType":"YulFunctionCall","src":"15754:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15741:12:6"},"nodeType":"YulFunctionCall","src":"15741:32:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15731:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"15820:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"15822:77:6"},"nodeType":"YulFunctionCall","src":"15822:79:6"},"nodeType":"YulExpressionStatement","src":"15822:79:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15792:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"15800:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15789:2:6"},"nodeType":"YulFunctionCall","src":"15789:30:6"},"nodeType":"YulIf","src":"15786:117:6"},{"nodeType":"YulAssignment","src":"15917:72:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15961:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"15972:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15957:3:6"},"nodeType":"YulFunctionCall","src":"15957:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15981:7:6"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"15927:29:6"},"nodeType":"YulFunctionCall","src":"15927:62:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15917:6:6"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15408:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15419:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15431:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15439:6:6","type":""}],"src":"15354:652:6"},{"body":{"nodeType":"YulBlock","src":"16118:69:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16140:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"16148:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16136:3:6"},"nodeType":"YulFunctionCall","src":"16136:14:6"},{"hexValue":"4c494e4b20494e44455820444f4553204e4f54204558495354","kind":"string","nodeType":"YulLiteral","src":"16152:27:6","type":"","value":"LINK INDEX DOES NOT EXIST"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16129:6:6"},"nodeType":"YulFunctionCall","src":"16129:51:6"},"nodeType":"YulExpressionStatement","src":"16129:51:6"}]},"name":"store_literal_in_memory_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16110:6:6","type":""}],"src":"16012:175:6"},{"body":{"nodeType":"YulBlock","src":"16339:220:6","statements":[{"nodeType":"YulAssignment","src":"16349:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16415:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"16420:2:6","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16356:58:6"},"nodeType":"YulFunctionCall","src":"16356:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16349:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16521:3:6"}],"functionName":{"name":"store_literal_in_memory_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c","nodeType":"YulIdentifier","src":"16432:88:6"},"nodeType":"YulFunctionCall","src":"16432:93:6"},"nodeType":"YulExpressionStatement","src":"16432:93:6"},{"nodeType":"YulAssignment","src":"16534:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16545:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"16550:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16541:3:6"},"nodeType":"YulFunctionCall","src":"16541:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16534:3:6"}]}]},"name":"abi_encode_t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16327:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16335:3:6","type":""}],"src":"16193:366:6"},{"body":{"nodeType":"YulBlock","src":"16736:248:6","statements":[{"nodeType":"YulAssignment","src":"16746:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16758:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"16769:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16754:3:6"},"nodeType":"YulFunctionCall","src":"16754:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16746:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16793:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"16804:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16789:3:6"},"nodeType":"YulFunctionCall","src":"16789:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16812:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"16818:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16808:3:6"},"nodeType":"YulFunctionCall","src":"16808:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16782:6:6"},"nodeType":"YulFunctionCall","src":"16782:47:6"},"nodeType":"YulExpressionStatement","src":"16782:47:6"},{"nodeType":"YulAssignment","src":"16838:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16972:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16846:124:6"},"nodeType":"YulFunctionCall","src":"16846:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16838:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16716:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16731:4:6","type":""}],"src":"16565:419:6"},{"body":{"nodeType":"YulBlock","src":"17018:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17035:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17038:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17028:6:6"},"nodeType":"YulFunctionCall","src":"17028:88:6"},"nodeType":"YulExpressionStatement","src":"17028:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17132:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"17135:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17125:6:6"},"nodeType":"YulFunctionCall","src":"17125:15:6"},"nodeType":"YulExpressionStatement","src":"17125:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17156:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17159:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17149:6:6"},"nodeType":"YulFunctionCall","src":"17149:15:6"},"nodeType":"YulExpressionStatement","src":"17149:15:6"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"16990:180:6"},{"body":{"nodeType":"YulBlock","src":"17282:66:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17304:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"17312:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17300:3:6"},"nodeType":"YulFunctionCall","src":"17300:14:6"},{"hexValue":"4c494e4b20414c52454144592057495448445241574e","kind":"string","nodeType":"YulLiteral","src":"17316:24:6","type":"","value":"LINK ALREADY WITHDRAWN"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17293:6:6"},"nodeType":"YulFunctionCall","src":"17293:48:6"},"nodeType":"YulExpressionStatement","src":"17293:48:6"}]},"name":"store_literal_in_memory_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17274:6:6","type":""}],"src":"17176:172:6"},{"body":{"nodeType":"YulBlock","src":"17500:220:6","statements":[{"nodeType":"YulAssignment","src":"17510:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17576:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"17581:2:6","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17517:58:6"},"nodeType":"YulFunctionCall","src":"17517:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17510:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17682:3:6"}],"functionName":{"name":"store_literal_in_memory_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988","nodeType":"YulIdentifier","src":"17593:88:6"},"nodeType":"YulFunctionCall","src":"17593:93:6"},"nodeType":"YulExpressionStatement","src":"17593:93:6"},{"nodeType":"YulAssignment","src":"17695:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17706:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"17711:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17702:3:6"},"nodeType":"YulFunctionCall","src":"17702:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17695:3:6"}]}]},"name":"abi_encode_t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17488:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17496:3:6","type":""}],"src":"17354:366:6"},{"body":{"nodeType":"YulBlock","src":"17897:248:6","statements":[{"nodeType":"YulAssignment","src":"17907:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17919:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17930:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17915:3:6"},"nodeType":"YulFunctionCall","src":"17915:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17907:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17954:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17965:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17950:3:6"},"nodeType":"YulFunctionCall","src":"17950:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17973:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"17979:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17969:3:6"},"nodeType":"YulFunctionCall","src":"17969:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17943:6:6"},"nodeType":"YulFunctionCall","src":"17943:47:6"},"nodeType":"YulExpressionStatement","src":"17943:47:6"},{"nodeType":"YulAssignment","src":"17999:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18133:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18007:124:6"},"nodeType":"YulFunctionCall","src":"18007:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17999:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17877:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17892:4:6","type":""}],"src":"17726:419:6"},{"body":{"nodeType":"YulBlock","src":"18193:52:6","statements":[{"nodeType":"YulAssignment","src":"18203:35:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18228:2:6","type":"","value":"96"},{"name":"value","nodeType":"YulIdentifier","src":"18232:5:6"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18224:3:6"},"nodeType":"YulFunctionCall","src":"18224:14:6"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"18203:8:6"}]}]},"name":"shift_left_96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18174:5:6","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"18184:8:6","type":""}],"src":"18151:94:6"},{"body":{"nodeType":"YulBlock","src":"18298:47:6","statements":[{"nodeType":"YulAssignment","src":"18308:31:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18333:5:6"}],"functionName":{"name":"shift_left_96","nodeType":"YulIdentifier","src":"18319:13:6"},"nodeType":"YulFunctionCall","src":"18319:20:6"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"18308:7:6"}]}]},"name":"leftAlign_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18280:5:6","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"18290:7:6","type":""}],"src":"18251:94:6"},{"body":{"nodeType":"YulBlock","src":"18398:53:6","statements":[{"nodeType":"YulAssignment","src":"18408:37:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18439:5:6"}],"functionName":{"name":"leftAlign_t_uint160","nodeType":"YulIdentifier","src":"18419:19:6"},"nodeType":"YulFunctionCall","src":"18419:26:6"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"18408:7:6"}]}]},"name":"leftAlign_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18380:5:6","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"18390:7:6","type":""}],"src":"18351:100:6"},{"body":{"nodeType":"YulBlock","src":"18540:74:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18557:3:6"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18600:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"18582:17:6"},"nodeType":"YulFunctionCall","src":"18582:24:6"}],"functionName":{"name":"leftAlign_t_address","nodeType":"YulIdentifier","src":"18562:19:6"},"nodeType":"YulFunctionCall","src":"18562:45:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18550:6:6"},"nodeType":"YulFunctionCall","src":"18550:58:6"},"nodeType":"YulExpressionStatement","src":"18550:58:6"}]},"name":"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18528:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18535:3:6","type":""}],"src":"18457:157:6"},{"body":{"nodeType":"YulBlock","src":"18736:140:6","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18809:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"18818:3:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"18747:61:6"},"nodeType":"YulFunctionCall","src":"18747:75:6"},"nodeType":"YulExpressionStatement","src":"18747:75:6"},{"nodeType":"YulAssignment","src":"18831:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18842:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"18847:2:6","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18838:3:6"},"nodeType":"YulFunctionCall","src":"18838:12:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18831:3:6"}]},{"nodeType":"YulAssignment","src":"18860:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"18867:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18860:3:6"}]}]},"name":"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18715:3:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18721:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18732:3:6","type":""}],"src":"18620:256:6"},{"body":{"nodeType":"YulBlock","src":"18988:63:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19010:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"19018:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19006:3:6"},"nodeType":"YulFunctionCall","src":"19006:14:6"},{"hexValue":"48415348455320444f204e4f54204d41544348","kind":"string","nodeType":"YulLiteral","src":"19022:21:6","type":"","value":"HASHES DO NOT MATCH"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18999:6:6"},"nodeType":"YulFunctionCall","src":"18999:45:6"},"nodeType":"YulExpressionStatement","src":"18999:45:6"}]},"name":"store_literal_in_memory_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18980:6:6","type":""}],"src":"18882:169:6"},{"body":{"nodeType":"YulBlock","src":"19203:220:6","statements":[{"nodeType":"YulAssignment","src":"19213:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19279:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"19284:2:6","type":"","value":"19"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19220:58:6"},"nodeType":"YulFunctionCall","src":"19220:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19213:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19385:3:6"}],"functionName":{"name":"store_literal_in_memory_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911","nodeType":"YulIdentifier","src":"19296:88:6"},"nodeType":"YulFunctionCall","src":"19296:93:6"},"nodeType":"YulExpressionStatement","src":"19296:93:6"},{"nodeType":"YulAssignment","src":"19398:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19409:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"19414:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19405:3:6"},"nodeType":"YulFunctionCall","src":"19405:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19398:3:6"}]}]},"name":"abi_encode_t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19191:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19199:3:6","type":""}],"src":"19057:366:6"},{"body":{"nodeType":"YulBlock","src":"19600:248:6","statements":[{"nodeType":"YulAssignment","src":"19610:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19622:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"19633:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19618:3:6"},"nodeType":"YulFunctionCall","src":"19618:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19610:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19657:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"19668:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19653:3:6"},"nodeType":"YulFunctionCall","src":"19653:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19676:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"19682:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19672:3:6"},"nodeType":"YulFunctionCall","src":"19672:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19646:6:6"},"nodeType":"YulFunctionCall","src":"19646:47:6"},"nodeType":"YulExpressionStatement","src":"19646:47:6"},{"nodeType":"YulAssignment","src":"19702:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19836:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19710:124:6"},"nodeType":"YulFunctionCall","src":"19710:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19702:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19580:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19595:4:6","type":""}],"src":"19429:419:6"},{"body":{"nodeType":"YulBlock","src":"19960:59:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19982:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"19990:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19978:3:6"},"nodeType":"YulFunctionCall","src":"19978:14:6"},{"hexValue":"57524f4e47205349474e4154555245","kind":"string","nodeType":"YulLiteral","src":"19994:17:6","type":"","value":"WRONG SIGNATURE"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19971:6:6"},"nodeType":"YulFunctionCall","src":"19971:41:6"},"nodeType":"YulExpressionStatement","src":"19971:41:6"}]},"name":"store_literal_in_memory_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19952:6:6","type":""}],"src":"19854:165:6"},{"body":{"nodeType":"YulBlock","src":"20171:220:6","statements":[{"nodeType":"YulAssignment","src":"20181:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20247:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"20252:2:6","type":"","value":"15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20188:58:6"},"nodeType":"YulFunctionCall","src":"20188:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20181:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20353:3:6"}],"functionName":{"name":"store_literal_in_memory_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d","nodeType":"YulIdentifier","src":"20264:88:6"},"nodeType":"YulFunctionCall","src":"20264:93:6"},"nodeType":"YulExpressionStatement","src":"20264:93:6"},{"nodeType":"YulAssignment","src":"20366:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20377:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"20382:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20373:3:6"},"nodeType":"YulFunctionCall","src":"20373:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20366:3:6"}]}]},"name":"abi_encode_t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20159:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20167:3:6","type":""}],"src":"20025:366:6"},{"body":{"nodeType":"YulBlock","src":"20568:248:6","statements":[{"nodeType":"YulAssignment","src":"20578:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20590:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"20601:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20586:3:6"},"nodeType":"YulFunctionCall","src":"20586:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20578:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20625:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"20636:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20621:3:6"},"nodeType":"YulFunctionCall","src":"20621:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20644:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"20650:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20640:3:6"},"nodeType":"YulFunctionCall","src":"20640:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20614:6:6"},"nodeType":"YulFunctionCall","src":"20614:47:6"},"nodeType":"YulExpressionStatement","src":"20614:47:6"},{"nodeType":"YulAssignment","src":"20670:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20804:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20678:124:6"},"nodeType":"YulFunctionCall","src":"20678:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20670:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20548:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20563:4:6","type":""}],"src":"20397:419:6"},{"body":{"nodeType":"YulBlock","src":"20850:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20867:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20870:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20860:6:6"},"nodeType":"YulFunctionCall","src":"20860:88:6"},"nodeType":"YulExpressionStatement","src":"20860:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20964:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20967:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20957:6:6"},"nodeType":"YulFunctionCall","src":"20957:15:6"},"nodeType":"YulExpressionStatement","src":"20957:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20988:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20991:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20981:6:6"},"nodeType":"YulFunctionCall","src":"20981:15:6"},"nodeType":"YulExpressionStatement","src":"20981:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"20822:180:6"},{"body":{"nodeType":"YulBlock","src":"21053:149:6","statements":[{"nodeType":"YulAssignment","src":"21063:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21086:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21068:17:6"},"nodeType":"YulFunctionCall","src":"21068:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21063:1:6"}]},{"nodeType":"YulAssignment","src":"21097:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21120:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21102:17:6"},"nodeType":"YulFunctionCall","src":"21102:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21097:1:6"}]},{"nodeType":"YulAssignment","src":"21131:17:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21143:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"21146:1:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21139:3:6"},"nodeType":"YulFunctionCall","src":"21139:9:6"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"21131:4:6"}]},{"body":{"nodeType":"YulBlock","src":"21173:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21175:16:6"},"nodeType":"YulFunctionCall","src":"21175:18:6"},"nodeType":"YulExpressionStatement","src":"21175:18:6"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"21164:4:6"},{"name":"x","nodeType":"YulIdentifier","src":"21170:1:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21161:2:6"},"nodeType":"YulFunctionCall","src":"21161:11:6"},"nodeType":"YulIf","src":"21158:37:6"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21039:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"21042:1:6","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"21048:4:6","type":""}],"src":"21008:194:6"},{"body":{"nodeType":"YulBlock","src":"21240:28:6","statements":[{"nodeType":"YulAssignment","src":"21250:12:6","value":{"name":"value","nodeType":"YulIdentifier","src":"21257:5:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"21250:3:6"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21226:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"21236:3:6","type":""}],"src":"21208:60:6"},{"body":{"nodeType":"YulBlock","src":"21334:82:6","statements":[{"nodeType":"YulAssignment","src":"21344:66:6","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21402:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"21384:17:6"},"nodeType":"YulFunctionCall","src":"21384:24:6"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"21375:8:6"},"nodeType":"YulFunctionCall","src":"21375:34:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"21357:17:6"},"nodeType":"YulFunctionCall","src":"21357:53:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"21344:9:6"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21314:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"21324:9:6","type":""}],"src":"21274:142:6"},{"body":{"nodeType":"YulBlock","src":"21482:66:6","statements":[{"nodeType":"YulAssignment","src":"21492:50:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21536:5:6"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"21505:30:6"},"nodeType":"YulFunctionCall","src":"21505:37:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"21492:9:6"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21462:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"21472:9:6","type":""}],"src":"21422:126:6"},{"body":{"nodeType":"YulBlock","src":"21622:66:6","statements":[{"nodeType":"YulAssignment","src":"21632:50:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21676:5:6"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"21645:30:6"},"nodeType":"YulFunctionCall","src":"21645:37:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"21632:9:6"}]}]},"name":"convert_t_address_payable_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21602:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"21612:9:6","type":""}],"src":"21554:134:6"},{"body":{"nodeType":"YulBlock","src":"21767:74:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21784:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21828:5:6"}],"functionName":{"name":"convert_t_address_payable_to_t_address","nodeType":"YulIdentifier","src":"21789:38:6"},"nodeType":"YulFunctionCall","src":"21789:45:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21777:6:6"},"nodeType":"YulFunctionCall","src":"21777:58:6"},"nodeType":"YulExpressionStatement","src":"21777:58:6"}]},"name":"abi_encode_t_address_payable_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21755:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21762:3:6","type":""}],"src":"21694:147:6"},{"body":{"nodeType":"YulBlock","src":"21942:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21959:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"21964:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21952:6:6"},"nodeType":"YulFunctionCall","src":"21952:19:6"},"nodeType":"YulExpressionStatement","src":"21952:19:6"},{"nodeType":"YulAssignment","src":"21980:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21999:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"22004:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21995:3:6"},"nodeType":"YulFunctionCall","src":"21995:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"21980:11:6"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21914:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"21919:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"21930:11:6","type":""}],"src":"21847:168:6"},{"body":{"nodeType":"YulBlock","src":"22127:8:6","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22119:6:6","type":""}],"src":"22021:114:6"},{"body":{"nodeType":"YulBlock","src":"22286:217:6","statements":[{"nodeType":"YulAssignment","src":"22296:72:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22361:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"22366:1:6","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22303:57:6"},"nodeType":"YulFunctionCall","src":"22303:65:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22296:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22466:3:6"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"22377:88:6"},"nodeType":"YulFunctionCall","src":"22377:93:6"},"nodeType":"YulExpressionStatement","src":"22377:93:6"},{"nodeType":"YulAssignment","src":"22479:18:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22490:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"22495:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22486:3:6"},"nodeType":"YulFunctionCall","src":"22486:11:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22479:3:6"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22274:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22282:3:6","type":""}],"src":"22141:362:6"},{"body":{"nodeType":"YulBlock","src":"22537:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22554:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22557:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22547:6:6"},"nodeType":"YulFunctionCall","src":"22547:88:6"},"nodeType":"YulExpressionStatement","src":"22547:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22651:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22654:4:6","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22644:6:6"},"nodeType":"YulFunctionCall","src":"22644:15:6"},"nodeType":"YulExpressionStatement","src":"22644:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22675:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22678:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22668:6:6"},"nodeType":"YulFunctionCall","src":"22668:15:6"},"nodeType":"YulExpressionStatement","src":"22668:15:6"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"22509:180:6"},{"body":{"nodeType":"YulBlock","src":"22752:62:6","statements":[{"body":{"nodeType":"YulBlock","src":"22786:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"22788:16:6"},"nodeType":"YulFunctionCall","src":"22788:18:6"},"nodeType":"YulExpressionStatement","src":"22788:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22775:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"22782:1:6","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22772:2:6"},"nodeType":"YulFunctionCall","src":"22772:12:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22765:6:6"},"nodeType":"YulFunctionCall","src":"22765:20:6"},"nodeType":"YulIf","src":"22762:46:6"}]},"name":"validator_assert_t_enum$_Operation_$1571","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22745:5:6","type":""}],"src":"22695:119:6"},{"body":{"nodeType":"YulBlock","src":"22879:80:6","statements":[{"nodeType":"YulAssignment","src":"22889:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"22900:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"22889:7:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22947:5:6"}],"functionName":{"name":"validator_assert_t_enum$_Operation_$1571","nodeType":"YulIdentifier","src":"22906:40:6"},"nodeType":"YulFunctionCall","src":"22906:47:6"},"nodeType":"YulExpressionStatement","src":"22906:47:6"}]},"name":"cleanup_t_enum$_Operation_$1571","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22861:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"22871:7:6","type":""}],"src":"22820:139:6"},{"body":{"nodeType":"YulBlock","src":"23037:67:6","statements":[{"nodeType":"YulAssignment","src":"23047:51:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23092:5:6"}],"functionName":{"name":"cleanup_t_enum$_Operation_$1571","nodeType":"YulIdentifier","src":"23060:31:6"},"nodeType":"YulFunctionCall","src":"23060:38:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"23047:9:6"}]}]},"name":"convert_t_enum$_Operation_$1571_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23017:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"23027:9:6","type":""}],"src":"22965:139:6"},{"body":{"nodeType":"YulBlock","src":"23187:78:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23204:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23252:5:6"}],"functionName":{"name":"convert_t_enum$_Operation_$1571_to_t_uint8","nodeType":"YulIdentifier","src":"23209:42:6"},"nodeType":"YulFunctionCall","src":"23209:49:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23197:6:6"},"nodeType":"YulFunctionCall","src":"23197:62:6"},"nodeType":"YulExpressionStatement","src":"23197:62:6"}]},"name":"abi_encode_t_enum$_Operation_$1571_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23175:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23182:3:6","type":""}],"src":"23110:155:6"},{"body":{"nodeType":"YulBlock","src":"23545:514:6","statements":[{"nodeType":"YulAssignment","src":"23555:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23567:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"23578:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23563:3:6"},"nodeType":"YulFunctionCall","src":"23563:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23555:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23644:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23657:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"23668:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23653:3:6"},"nodeType":"YulFunctionCall","src":"23653:17:6"}],"functionName":{"name":"abi_encode_t_address_payable_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23592:51:6"},"nodeType":"YulFunctionCall","src":"23592:79:6"},"nodeType":"YulExpressionStatement","src":"23592:79:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23725:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23738:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"23749:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23734:3:6"},"nodeType":"YulFunctionCall","src":"23734:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23681:43:6"},"nodeType":"YulFunctionCall","src":"23681:72:6"},"nodeType":"YulExpressionStatement","src":"23681:72:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23774:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"23785:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23770:3:6"},"nodeType":"YulFunctionCall","src":"23770:18:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23794:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"23800:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23790:3:6"},"nodeType":"YulFunctionCall","src":"23790:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23763:6:6"},"nodeType":"YulFunctionCall","src":"23763:48:6"},"nodeType":"YulExpressionStatement","src":"23763:48:6"},{"nodeType":"YulAssignment","src":"23820:138:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23953:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23828:123:6"},"nodeType":"YulFunctionCall","src":"23828:130:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23820:4:6"}]},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24024:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24037:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"24048:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24033:3:6"},"nodeType":"YulFunctionCall","src":"24033:18:6"}],"functionName":{"name":"abi_encode_t_enum$_Operation_$1571_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"23968:55:6"},"nodeType":"YulFunctionCall","src":"23968:84:6"},"nodeType":"YulExpressionStatement","src":"23968:84:6"}]},"name":"abi_encode_tuple_t_address_payable_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_t_enum$_Operation_$1571__to_t_address_t_uint256_t_bytes_memory_ptr_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23501:9:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23513:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23521:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23529:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23540:4:6","type":""}],"src":"23271:788:6"},{"body":{"nodeType":"YulBlock","src":"24105:76:6","statements":[{"body":{"nodeType":"YulBlock","src":"24159:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24168:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24171:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24161:6:6"},"nodeType":"YulFunctionCall","src":"24161:12:6"},"nodeType":"YulExpressionStatement","src":"24161:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24128:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24150:5:6"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"24135:14:6"},"nodeType":"YulFunctionCall","src":"24135:21:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"24125:2:6"},"nodeType":"YulFunctionCall","src":"24125:32:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24118:6:6"},"nodeType":"YulFunctionCall","src":"24118:40:6"},"nodeType":"YulIf","src":"24115:60:6"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24098:5:6","type":""}],"src":"24065:116:6"},{"body":{"nodeType":"YulBlock","src":"24247:77:6","statements":[{"nodeType":"YulAssignment","src":"24257:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24272:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24266:5:6"},"nodeType":"YulFunctionCall","src":"24266:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24257:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24312:5:6"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"24288:23:6"},"nodeType":"YulFunctionCall","src":"24288:30:6"},"nodeType":"YulExpressionStatement","src":"24288:30:6"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24225:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"24233:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24241:5:6","type":""}],"src":"24187:137:6"},{"body":{"nodeType":"YulBlock","src":"24404:271:6","statements":[{"body":{"nodeType":"YulBlock","src":"24450:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"24452:77:6"},"nodeType":"YulFunctionCall","src":"24452:79:6"},"nodeType":"YulExpressionStatement","src":"24452:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24425:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"24434:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24421:3:6"},"nodeType":"YulFunctionCall","src":"24421:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"24446:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24417:3:6"},"nodeType":"YulFunctionCall","src":"24417:32:6"},"nodeType":"YulIf","src":"24414:119:6"},{"nodeType":"YulBlock","src":"24543:125:6","statements":[{"nodeType":"YulVariableDeclaration","src":"24558:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"24572:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24562:6:6","type":""}]},{"nodeType":"YulAssignment","src":"24587:71:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24630:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"24641:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24626:3:6"},"nodeType":"YulFunctionCall","src":"24626:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24650:7:6"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"24597:28:6"},"nodeType":"YulFunctionCall","src":"24597:61:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24587:6:6"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24374:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24385:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24397:6:6","type":""}],"src":"24330:345:6"},{"body":{"nodeType":"YulBlock","src":"24787:76:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24809:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"24817:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24805:3:6"},"nodeType":"YulFunctionCall","src":"24805:14:6"},{"hexValue":"436f756c64206e6f742065786563757465206574686572207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"24821:34:6","type":"","value":"Could not execute ether transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24798:6:6"},"nodeType":"YulFunctionCall","src":"24798:58:6"},"nodeType":"YulExpressionStatement","src":"24798:58:6"}]},"name":"store_literal_in_memory_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24779:6:6","type":""}],"src":"24681:182:6"},{"body":{"nodeType":"YulBlock","src":"25015:220:6","statements":[{"nodeType":"YulAssignment","src":"25025:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25091:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"25096:2:6","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25032:58:6"},"nodeType":"YulFunctionCall","src":"25032:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25025:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25197:3:6"}],"functionName":{"name":"store_literal_in_memory_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586","nodeType":"YulIdentifier","src":"25108:88:6"},"nodeType":"YulFunctionCall","src":"25108:93:6"},"nodeType":"YulExpressionStatement","src":"25108:93:6"},{"nodeType":"YulAssignment","src":"25210:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25221:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"25226:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25217:3:6"},"nodeType":"YulFunctionCall","src":"25217:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25210:3:6"}]}]},"name":"abi_encode_t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25003:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25011:3:6","type":""}],"src":"24869:366:6"},{"body":{"nodeType":"YulBlock","src":"25412:248:6","statements":[{"nodeType":"YulAssignment","src":"25422:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25434:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"25445:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25430:3:6"},"nodeType":"YulFunctionCall","src":"25430:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25422:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25469:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"25480:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25465:3:6"},"nodeType":"YulFunctionCall","src":"25465:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25488:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"25494:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25484:3:6"},"nodeType":"YulFunctionCall","src":"25484:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25458:6:6"},"nodeType":"YulFunctionCall","src":"25458:47:6"},"nodeType":"YulExpressionStatement","src":"25458:47:6"},{"nodeType":"YulAssignment","src":"25514:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25648:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25522:124:6"},"nodeType":"YulFunctionCall","src":"25522:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25514:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25392:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25407:4:6","type":""}],"src":"25241:419:6"},{"body":{"nodeType":"YulBlock","src":"25719:51:6","statements":[{"nodeType":"YulAssignment","src":"25729:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25758:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"25740:17:6"},"nodeType":"YulFunctionCall","src":"25740:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"25729:7:6"}]}]},"name":"cleanup_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25701:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"25711:7:6","type":""}],"src":"25666:104:6"},{"body":{"nodeType":"YulBlock","src":"25857:61:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25874:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25905:5:6"}],"functionName":{"name":"cleanup_t_address_payable","nodeType":"YulIdentifier","src":"25879:25:6"},"nodeType":"YulFunctionCall","src":"25879:32:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25867:6:6"},"nodeType":"YulFunctionCall","src":"25867:45:6"},"nodeType":"YulExpressionStatement","src":"25867:45:6"}]},"name":"abi_encode_t_address_payable_to_t_address_payable_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25845:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"25852:3:6","type":""}],"src":"25776:142:6"},{"body":{"nodeType":"YulBlock","src":"26066:222:6","statements":[{"nodeType":"YulAssignment","src":"26076:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26088:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"26099:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26084:3:6"},"nodeType":"YulFunctionCall","src":"26084:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26076:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26172:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26185:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"26196:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26181:3:6"},"nodeType":"YulFunctionCall","src":"26181:17:6"}],"functionName":{"name":"abi_encode_t_address_payable_to_t_address_payable_fromStack","nodeType":"YulIdentifier","src":"26112:59:6"},"nodeType":"YulFunctionCall","src":"26112:87:6"},"nodeType":"YulExpressionStatement","src":"26112:87:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26253:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26266:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"26277:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26262:3:6"},"nodeType":"YulFunctionCall","src":"26262:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26209:43:6"},"nodeType":"YulFunctionCall","src":"26209:72:6"},"nodeType":"YulExpressionStatement","src":"26209:72:6"}]},"name":"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26030:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26042:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26050:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26061:4:6","type":""}],"src":"25924:364:6"},{"body":{"nodeType":"YulBlock","src":"26347:32:6","statements":[{"nodeType":"YulAssignment","src":"26357:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"26368:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"26357:7:6"}]}]},"name":"cleanup_t_rational_0_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26329:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"26339:7:6","type":""}],"src":"26294:85:6"},{"body":{"nodeType":"YulBlock","src":"26453:90:6","statements":[{"nodeType":"YulAssignment","src":"26463:74:6","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26529:5:6"}],"functionName":{"name":"cleanup_t_rational_0_by_1","nodeType":"YulIdentifier","src":"26503:25:6"},"nodeType":"YulFunctionCall","src":"26503:32:6"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"26494:8:6"},"nodeType":"YulFunctionCall","src":"26494:42:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26476:17:6"},"nodeType":"YulFunctionCall","src":"26476:61:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"26463:9:6"}]}]},"name":"convert_t_rational_0_by_1_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26433:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"26443:9:6","type":""}],"src":"26385:158:6"},{"body":{"nodeType":"YulBlock","src":"26622:74:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26639:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26683:5:6"}],"functionName":{"name":"convert_t_rational_0_by_1_to_t_uint256","nodeType":"YulIdentifier","src":"26644:38:6"},"nodeType":"YulFunctionCall","src":"26644:45:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26632:6:6"},"nodeType":"YulFunctionCall","src":"26632:58:6"},"nodeType":"YulExpressionStatement","src":"26632:58:6"}]},"name":"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26610:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26617:3:6","type":""}],"src":"26549:147:6"},{"body":{"nodeType":"YulBlock","src":"26760:40:6","statements":[{"nodeType":"YulAssignment","src":"26771:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26787:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26781:5:6"},"nodeType":"YulFunctionCall","src":"26781:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"26771:6:6"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26743:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"26753:6:6","type":""}],"src":"26702:98:6"},{"body":{"nodeType":"YulBlock","src":"26896:283:6","statements":[{"nodeType":"YulVariableDeclaration","src":"26906:52:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26952:5:6"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"26920:31:6"},"nodeType":"YulFunctionCall","src":"26920:38:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26910:6:6","type":""}]},{"nodeType":"YulAssignment","src":"26967:77:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27032:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"27037:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26974:57:6"},"nodeType":"YulFunctionCall","src":"26974:70:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26967:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27092:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"27099:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27088:3:6"},"nodeType":"YulFunctionCall","src":"27088:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"27106:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"27111:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"27053:34:6"},"nodeType":"YulFunctionCall","src":"27053:65:6"},"nodeType":"YulExpressionStatement","src":"27053:65:6"},{"nodeType":"YulAssignment","src":"27127:46:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27138:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27165:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"27143:21:6"},"nodeType":"YulFunctionCall","src":"27143:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27134:3:6"},"nodeType":"YulFunctionCall","src":"27134:39:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27127:3:6"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26877:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26884:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26892:3:6","type":""}],"src":"26806:373:6"},{"body":{"nodeType":"YulBlock","src":"27405:460:6","statements":[{"nodeType":"YulAssignment","src":"27415:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27427:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"27438:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27423:3:6"},"nodeType":"YulFunctionCall","src":"27423:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27415:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27496:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27509:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"27520:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27505:3:6"},"nodeType":"YulFunctionCall","src":"27505:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"27452:43:6"},"nodeType":"YulFunctionCall","src":"27452:71:6"},"nodeType":"YulExpressionStatement","src":"27452:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27585:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27598:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"27609:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27594:3:6"},"nodeType":"YulFunctionCall","src":"27594:18:6"}],"functionName":{"name":"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27533:51:6"},"nodeType":"YulFunctionCall","src":"27533:80:6"},"nodeType":"YulExpressionStatement","src":"27533:80:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27634:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"27645:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27630:3:6"},"nodeType":"YulFunctionCall","src":"27630:18:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27654:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"27660:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27650:3:6"},"nodeType":"YulFunctionCall","src":"27650:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27623:6:6"},"nodeType":"YulFunctionCall","src":"27623:48:6"},"nodeType":"YulExpressionStatement","src":"27623:48:6"},{"nodeType":"YulAssignment","src":"27680:84:6","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"27750:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"27759:4:6"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27688:61:6"},"nodeType":"YulFunctionCall","src":"27688:76:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27680:4:6"}]},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"27830:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27843:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"27854:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27839:3:6"},"nodeType":"YulFunctionCall","src":"27839:18:6"}],"functionName":{"name":"abi_encode_t_enum$_Operation_$1571_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"27774:55:6"},"nodeType":"YulFunctionCall","src":"27774:84:6"},"nodeType":"YulExpressionStatement","src":"27774:84:6"}]},"name":"abi_encode_tuple_t_address_t_rational_0_by_1_t_bytes_memory_ptr_t_enum$_Operation_$1571__to_t_address_t_uint256_t_bytes_memory_ptr_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27353:9:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"27365:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"27373:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27381:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27389:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27400:4:6","type":""}],"src":"27185:680:6"},{"body":{"nodeType":"YulBlock","src":"27977:76:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27999:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"28007:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27995:3:6"},"nodeType":"YulFunctionCall","src":"27995:14:6"},{"hexValue":"436f756c64206e6f74206578656375746520746f6b656e207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"28011:34:6","type":"","value":"Could not execute token transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27988:6:6"},"nodeType":"YulFunctionCall","src":"27988:58:6"},"nodeType":"YulExpressionStatement","src":"27988:58:6"}]},"name":"store_literal_in_memory_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27969:6:6","type":""}],"src":"27871:182:6"},{"body":{"nodeType":"YulBlock","src":"28205:220:6","statements":[{"nodeType":"YulAssignment","src":"28215:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28281:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"28286:2:6","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28222:58:6"},"nodeType":"YulFunctionCall","src":"28222:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28215:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28387:3:6"}],"functionName":{"name":"store_literal_in_memory_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709","nodeType":"YulIdentifier","src":"28298:88:6"},"nodeType":"YulFunctionCall","src":"28298:93:6"},"nodeType":"YulExpressionStatement","src":"28298:93:6"},{"nodeType":"YulAssignment","src":"28400:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28411:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"28416:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28407:3:6"},"nodeType":"YulFunctionCall","src":"28407:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28400:3:6"}]}]},"name":"abi_encode_t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28193:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28201:3:6","type":""}],"src":"28059:366:6"},{"body":{"nodeType":"YulBlock","src":"28602:248:6","statements":[{"nodeType":"YulAssignment","src":"28612:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28624:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"28635:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28620:3:6"},"nodeType":"YulFunctionCall","src":"28620:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28612:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28659:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"28670:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28655:3:6"},"nodeType":"YulFunctionCall","src":"28655:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28678:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"28684:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28674:3:6"},"nodeType":"YulFunctionCall","src":"28674:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28648:6:6"},"nodeType":"YulFunctionCall","src":"28648:47:6"},"nodeType":"YulExpressionStatement","src":"28648:47:6"},{"nodeType":"YulAssignment","src":"28704:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28838:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28712:124:6"},"nodeType":"YulFunctionCall","src":"28712:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28704:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28582:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28597:4:6","type":""}],"src":"28431:419:6"},{"body":{"nodeType":"YulBlock","src":"28962:68:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28984:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"28992:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28980:3:6"},"nodeType":"YulFunctionCall","src":"28980:14:6"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"28996:26:6","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28973:6:6"},"nodeType":"YulFunctionCall","src":"28973:50:6"},"nodeType":"YulExpressionStatement","src":"28973:50:6"}]},"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28954:6:6","type":""}],"src":"28856:174:6"},{"body":{"nodeType":"YulBlock","src":"29182:220:6","statements":[{"nodeType":"YulAssignment","src":"29192:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29258:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"29263:2:6","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29199:58:6"},"nodeType":"YulFunctionCall","src":"29199:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29192:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29364:3:6"}],"functionName":{"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulIdentifier","src":"29275:88:6"},"nodeType":"YulFunctionCall","src":"29275:93:6"},"nodeType":"YulExpressionStatement","src":"29275:93:6"},{"nodeType":"YulAssignment","src":"29377:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29388:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"29393:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29384:3:6"},"nodeType":"YulFunctionCall","src":"29384:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29377:3:6"}]}]},"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29170:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29178:3:6","type":""}],"src":"29036:366:6"},{"body":{"nodeType":"YulBlock","src":"29579:248:6","statements":[{"nodeType":"YulAssignment","src":"29589:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29601:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"29612:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29597:3:6"},"nodeType":"YulFunctionCall","src":"29597:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29589:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29636:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"29647:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29632:3:6"},"nodeType":"YulFunctionCall","src":"29632:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29655:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"29661:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29651:3:6"},"nodeType":"YulFunctionCall","src":"29651:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29625:6:6"},"nodeType":"YulFunctionCall","src":"29625:47:6"},"nodeType":"YulExpressionStatement","src":"29625:47:6"},{"nodeType":"YulAssignment","src":"29681:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29815:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29689:124:6"},"nodeType":"YulFunctionCall","src":"29689:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29681:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29559:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29574:4:6","type":""}],"src":"29408:419:6"},{"body":{"nodeType":"YulBlock","src":"29939:75:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29961:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"29969:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29957:3:6"},"nodeType":"YulFunctionCall","src":"29957:14:6"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"29973:33:6","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29950:6:6"},"nodeType":"YulFunctionCall","src":"29950:57:6"},"nodeType":"YulExpressionStatement","src":"29950:57:6"}]},"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29931:6:6","type":""}],"src":"29833:181:6"},{"body":{"nodeType":"YulBlock","src":"30166:220:6","statements":[{"nodeType":"YulAssignment","src":"30176:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30242:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"30247:2:6","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30183:58:6"},"nodeType":"YulFunctionCall","src":"30183:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30176:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30348:3:6"}],"functionName":{"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulIdentifier","src":"30259:88:6"},"nodeType":"YulFunctionCall","src":"30259:93:6"},"nodeType":"YulExpressionStatement","src":"30259:93:6"},{"nodeType":"YulAssignment","src":"30361:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30372:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"30377:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30368:3:6"},"nodeType":"YulFunctionCall","src":"30368:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30361:3:6"}]}]},"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30154:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30162:3:6","type":""}],"src":"30020:366:6"},{"body":{"nodeType":"YulBlock","src":"30563:248:6","statements":[{"nodeType":"YulAssignment","src":"30573:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30585:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"30596:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30581:3:6"},"nodeType":"YulFunctionCall","src":"30581:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30573:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30620:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"30631:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30616:3:6"},"nodeType":"YulFunctionCall","src":"30616:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30639:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"30645:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30635:3:6"},"nodeType":"YulFunctionCall","src":"30635:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30609:6:6"},"nodeType":"YulFunctionCall","src":"30609:47:6"},"nodeType":"YulExpressionStatement","src":"30609:47:6"},{"nodeType":"YulAssignment","src":"30665:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30799:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30673:124:6"},"nodeType":"YulFunctionCall","src":"30673:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30665:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30543:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30558:4:6","type":""}],"src":"30392:419:6"},{"body":{"nodeType":"YulBlock","src":"30923:115:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30945:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"30953:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30941:3:6"},"nodeType":"YulFunctionCall","src":"30941:14:6"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"30957:34:6","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30934:6:6"},"nodeType":"YulFunctionCall","src":"30934:58:6"},"nodeType":"YulExpressionStatement","src":"30934:58:6"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31013:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"31021:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31009:3:6"},"nodeType":"YulFunctionCall","src":"31009:15:6"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"31026:4:6","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31002:6:6"},"nodeType":"YulFunctionCall","src":"31002:29:6"},"nodeType":"YulExpressionStatement","src":"31002:29:6"}]},"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30915:6:6","type":""}],"src":"30817:221:6"},{"body":{"nodeType":"YulBlock","src":"31190:220:6","statements":[{"nodeType":"YulAssignment","src":"31200:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31266:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"31271:2:6","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31207:58:6"},"nodeType":"YulFunctionCall","src":"31207:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31200:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31372:3:6"}],"functionName":{"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulIdentifier","src":"31283:88:6"},"nodeType":"YulFunctionCall","src":"31283:93:6"},"nodeType":"YulExpressionStatement","src":"31283:93:6"},{"nodeType":"YulAssignment","src":"31385:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31396:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"31401:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31392:3:6"},"nodeType":"YulFunctionCall","src":"31392:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31385:3:6"}]}]},"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31178:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31186:3:6","type":""}],"src":"31044:366:6"},{"body":{"nodeType":"YulBlock","src":"31587:248:6","statements":[{"nodeType":"YulAssignment","src":"31597:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31609:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"31620:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31605:3:6"},"nodeType":"YulFunctionCall","src":"31605:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31597:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31644:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"31655:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31640:3:6"},"nodeType":"YulFunctionCall","src":"31640:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31663:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"31669:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31659:3:6"},"nodeType":"YulFunctionCall","src":"31659:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31633:6:6"},"nodeType":"YulFunctionCall","src":"31633:47:6"},"nodeType":"YulExpressionStatement","src":"31633:47:6"},{"nodeType":"YulAssignment","src":"31689:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31823:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31697:124:6"},"nodeType":"YulFunctionCall","src":"31697:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31689:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31567:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31582:4:6","type":""}],"src":"31416:419:6"},{"body":{"nodeType":"YulBlock","src":"31906:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31923:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31946:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"31928:17:6"},"nodeType":"YulFunctionCall","src":"31928:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31916:6:6"},"nodeType":"YulFunctionCall","src":"31916:37:6"},"nodeType":"YulExpressionStatement","src":"31916:37:6"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31894:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"31901:3:6","type":""}],"src":"31841:118:6"},{"body":{"nodeType":"YulBlock","src":"32008:43:6","statements":[{"nodeType":"YulAssignment","src":"32018:27:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32033:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"32040:4:6","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32029:3:6"},"nodeType":"YulFunctionCall","src":"32029:16:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"32018:7:6"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31990:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"32000:7:6","type":""}],"src":"31965:86:6"},{"body":{"nodeType":"YulBlock","src":"32118:51:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32135:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32156:5:6"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"32140:15:6"},"nodeType":"YulFunctionCall","src":"32140:22:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32128:6:6"},"nodeType":"YulFunctionCall","src":"32128:35:6"},"nodeType":"YulExpressionStatement","src":"32128:35:6"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32106:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"32113:3:6","type":""}],"src":"32057:112:6"},{"body":{"nodeType":"YulBlock","src":"32353:367:6","statements":[{"nodeType":"YulAssignment","src":"32363:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32375:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"32386:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32371:3:6"},"nodeType":"YulFunctionCall","src":"32371:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32363:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"32444:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32457:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"32468:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32453:3:6"},"nodeType":"YulFunctionCall","src":"32453:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"32400:43:6"},"nodeType":"YulFunctionCall","src":"32400:71:6"},"nodeType":"YulExpressionStatement","src":"32400:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"32521:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32534:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"32545:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32530:3:6"},"nodeType":"YulFunctionCall","src":"32530:18:6"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"32481:39:6"},"nodeType":"YulFunctionCall","src":"32481:68:6"},"nodeType":"YulExpressionStatement","src":"32481:68:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"32603:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32616:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"32627:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32612:3:6"},"nodeType":"YulFunctionCall","src":"32612:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"32559:43:6"},"nodeType":"YulFunctionCall","src":"32559:72:6"},"nodeType":"YulExpressionStatement","src":"32559:72:6"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"32685:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32698:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"32709:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32694:3:6"},"nodeType":"YulFunctionCall","src":"32694:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"32641:43:6"},"nodeType":"YulFunctionCall","src":"32641:72:6"},"nodeType":"YulExpressionStatement","src":"32641:72:6"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32301:9:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"32313:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"32321:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"32329:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"32337:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32348:4:6","type":""}],"src":"32175:545:6"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function cleanup_t_uint40(value) -> cleaned {\n        cleaned := and(value, 0xffffffffff)\n    }\n\n    function abi_encode_t_uint40_to_t_uint40(value, pos) {\n        mstore(pos, cleanup_t_uint40(value))\n    }\n\n    // struct Safe2LinkModule.Link -> struct Safe2LinkModule.Link\n    function abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0xc0)\n\n        {\n            // pubKey20\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // tokenAddress\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // claimed\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // timestamp\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint40_to_t_uint40(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // account\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xa0))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_Link_$1618_memory_ptr__to_t_struct$_Link_$1618_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    // struct Safe2LinkModule.Link -> struct Safe2LinkModule.Link\n    function abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr(value, pos)  {\n        let tail := add(pos, 0xc0)\n\n        {\n            // pubKey20\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // tokenAddress\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // claimed\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // timestamp\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint40_to_t_uint40(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // account\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xa0))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0xc0)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct Safe2LinkModule.Link[] -> struct Safe2LinkModule.Link[]\n    function abi_encode_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_Link_$1618_memory_ptr_to_t_struct$_Link_$1618_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Link_$1618_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint40_to_t_uint40_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint40(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address_t_bool_t_uint40_t_address__to_t_address_t_uint256_t_address_t_bool_t_uint40_t_address__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint40_to_t_uint40_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_address_to_t_address_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c(memPtr) {\n\n        mstore(add(memPtr, 0), \"LINK INDEX DOES NOT EXIST\")\n\n    }\n\n    function abi_encode_t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a3197ae4ee6ed78be8989e48939ed40485832ccdf4d058214f7ab7021c25059c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988(memPtr) {\n\n        mstore(add(memPtr, 0), \"LINK ALREADY WITHDRAWN\")\n\n    }\n\n    function abi_encode_t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_48bbe0ab7e9938e02421a0c203f661f1f1d78a3d074376e0569fb32b3c728988_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function shift_left_96(value) -> newValue {\n        newValue :=\n\n        shl(96, value)\n\n    }\n\n    function leftAlign_t_uint160(value) -> aligned {\n        aligned := shift_left_96(value)\n    }\n\n    function leftAlign_t_address(value) -> aligned {\n        aligned := leftAlign_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_address(cleanup_t_address(value)))\n    }\n\n    function abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 20)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911(memPtr) {\n\n        mstore(add(memPtr, 0), \"HASHES DO NOT MATCH\")\n\n    }\n\n    function abi_encode_t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e1a30cd4c42edd1c0792ce69ef72dc604839c9ef63672588a40d83abd9e3b911_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d(memPtr) {\n\n        mstore(add(memPtr, 0), \"WRONG SIGNATURE\")\n\n    }\n\n    function abi_encode_t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 15)\n        store_literal_in_memory_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a0d4c4c6eda2b371f654828f49430eb2d701234ca13f124c0f29fa76f0cee9d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_address_payable_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_address_payable_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_address_payable_to_t_address(value))\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_Operation_$1571(value) {\n        if iszero(lt(value, 2)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_Operation_$1571(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_Operation_$1571(value)\n    }\n\n    function convert_t_enum$_Operation_$1571_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_Operation_$1571(value)\n    }\n\n    function abi_encode_t_enum$_Operation_$1571_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_Operation_$1571_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_address_payable_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_t_enum$_Operation_$1571__to_t_address_t_uint256_t_bytes_memory_ptr_t_uint8__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_payable_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack( tail)\n\n        abi_encode_t_enum$_Operation_$1571_to_t_uint8_fromStack(value2,  add(headStart, 96))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586(memPtr) {\n\n        mstore(add(memPtr, 0), \"Could not execute ether transfer\")\n\n    }\n\n    function abi_encode_t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2fae53cac084168982e43888b6e5eff084959ab65d511777b56b4cbb265d2586_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_payable_to_t_address_payable_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address_payable(value))\n    }\n\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_payable_to_t_address_payable_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_rational_0_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))\n    }\n\n    function abi_encode_t_rational_0_by_1_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_0_by_1_to_t_uint256(value))\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_rational_0_by_1_t_bytes_memory_ptr_t_enum$_Operation_$1571__to_t_address_t_uint256_t_bytes_memory_ptr_t_uint8__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_rational_0_by_1_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_enum$_Operation_$1571_to_t_uint8_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function store_literal_in_memory_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709(memPtr) {\n\n        mstore(add(memPtr, 0), \"Could not execute token transfer\")\n\n    }\n\n    function abi_encode_t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00c0b742664159361be6aebbe2af44c4ae7eb95e13260265d1e1cf75d2593709_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature length\")\n\n    }\n\n    function abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 's' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a3f4df7e11610066578063a3f4df7e14610186578063ef51b79d146101a4578063f56e81fa146101c2578063f7b2ec0d146101f2578063ffa1ad74146102225761009e565b806326091678146100a3578063393b6df3146100d357806348d9cb941461010357806355c3d97a14610121578063881d8a4014610151575b600080fd5b6100bd60048036038101906100b8919061152f565b610240565b6040516100ca91906115cd565b60405180910390f35b6100ed60048036038101906100e891906115e8565b6105fb565b6040516100fa91906116dd565b60405180910390f35b61010b610787565b6040516101189190611822565b60405180910390f35b61013b60048036038101906101369190611844565b610936565b60405161014891906118a6565b60405180910390f35b61016b600480360381019061016691906115e8565b610b7f565b60405161017d969594939291906118df565b60405180910390f35b61018e610c49565b60405161019b91906119bf565b60405180910390f35b6101ac610c82565b6040516101b991906118a6565b60405180910390f35b6101dc60048036038101906101d791906119e1565b610c8f565b6040516101e99190611a34565b60405180910390f35b61020c60048036038101906102079190611a4f565b610cea565b6040516102199190611a34565b60405180910390f35b61022a610d03565b60405161023791906119bf565b60405180910390f35b60006001805490508510610289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028090611af7565b60405180910390fd5b60006001868154811061029f5761029e611b17565b5b90600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600015158160600151151514610455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044c90611b92565b60405180910390fd5b610484856040516020016104699190611bfa565b60405160208183030381529060405280519060200120610d3c565b84146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc90611c61565b60405180910390fd5b60006104d18585610cea565b9050816000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053c90611ccd565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff16877fa62bf33e3860a18b08244c1b59b8aa4920be374252eb534e0ab47d5f7a18ca18846020015160405161059091906118a6565b60405180910390a360018088815481106105ad576105ac611b17565b5b906000526020600020906004020160020160146101000a81548160ff0219169083151502179055506105ed8260a001518360400151888560200151610d72565b600192505050949350505050565b61060361128a565b6001828154811061061757610616611b17565b5b90600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561092d57838290600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906107ab565b50505050905090565b600060016040518060c001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020014264ffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548164ffffffffff021916908364ffffffffff16021790555060a08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050503373ffffffffffffffffffffffffffffffffffffffff1660018080549050610b2e9190611d1c565b7fd0b52dbf7f8c29477b6ae9116c857532274475062b33c1f29e0c92f745c1ffbf85604051610b5d91906118a6565b60405180910390a360018080549050610b769190611d1c565b90509392505050565b60018181548110610b8f57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900464ffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b6040518060400160405280601081526020017f53616665324c696e6b204d6f64756c650000000000000000000000000000000081525081565b6000600180549050905090565b60006020528260005260406000206020528160005260406000208181548110610cb757600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610cf78484610fca565b90508091505092915050565b6040518060400160405280600581526020017f302e312e3000000000000000000000000000000000000000000000000000000081525081565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e6b578373ffffffffffffffffffffffffffffffffffffffff1663468721a7838360006040518463ffffffff1660e01b8152600401610de493929190611e5d565b6020604051808303816000875af1158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e279190611ed3565b610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d90611f4c565b60405180910390fd5b610fc4565b60008282604051602401610e80929190611f8d565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508473ffffffffffffffffffffffffffffffffffffffff1663468721a78560008460006040518563ffffffff1660e01b8152600401610f409493929190612035565b6020604051808303816000875af1158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f839190611ed3565b610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb9906120cd565b60405180910390fd5b505b50505050565b6000806000610fd98585610ff1565b91509150610fe681611042565b819250505092915050565b60008060418351036110325760008060006020860151925060408601519150606086015160001a9050611026878285856111a8565b9450945050505061103b565b60006002915091505b9250929050565b6000600481111561105657611055611de6565b5b81600481111561106957611068611de6565b5b03156111a5576001600481111561108357611082611de6565b5b81600481111561109657611095611de6565b5b036110d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cd90612139565b60405180910390fd5b600260048111156110ea576110e9611de6565b5b8160048111156110fd576110fc611de6565b5b0361113d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611134906121a5565b60405180910390fd5b6003600481111561115157611150611de6565b5b81600481111561116457611163611de6565b5b036111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612237565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156111e3576000600391509150611281565b6000600187878787604051600081526020016040526040516112089493929190612282565b6020604051602081039080840390855afa15801561122a573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361127857600060019250925050611281565b80600092509250505b94509492505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600064ffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113328161131f565b811461133d57600080fd5b50565b60008135905061134f81611329565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061138082611355565b9050919050565b61139081611375565b811461139b57600080fd5b50565b6000813590506113ad81611387565b92915050565b6000819050919050565b6113c6816113b3565b81146113d157600080fd5b50565b6000813590506113e3816113bd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61143c826113f3565b810181811067ffffffffffffffff8211171561145b5761145a611404565b5b80604052505050565b600061146e61130b565b905061147a8282611433565b919050565b600067ffffffffffffffff82111561149a57611499611404565b5b6114a3826113f3565b9050602081019050919050565b82818337600083830152505050565b60006114d26114cd8461147f565b611464565b9050828152602081018484840111156114ee576114ed6113ee565b5b6114f98482856114b0565b509392505050565b600082601f830112611516576115156113e9565b5b81356115268482602086016114bf565b91505092915050565b6000806000806080858703121561154957611548611315565b5b600061155787828801611340565b94505060206115688782880161139e565b9350506040611579878288016113d4565b925050606085013567ffffffffffffffff81111561159a5761159961131a565b5b6115a687828801611501565b91505092959194509250565b60008115159050919050565b6115c7816115b2565b82525050565b60006020820190506115e260008301846115be565b92915050565b6000602082840312156115fe576115fd611315565b5b600061160c84828501611340565b91505092915050565b61161e81611375565b82525050565b61162d8161131f565b82525050565b61163c816115b2565b82525050565b600064ffffffffff82169050919050565b61165c81611642565b82525050565b60c0820160008201516116786000850182611615565b50602082015161168b6020850182611624565b50604082015161169e6040850182611615565b5060608201516116b16060850182611633565b5060808201516116c46080850182611653565b5060a08201516116d760a0850182611615565b50505050565b600060c0820190506116f26000830184611662565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c08201600082015161173a6000850182611615565b50602082015161174d6020850182611624565b5060408201516117606040850182611615565b5060608201516117736060850182611633565b5060808201516117866080850182611653565b5060a082015161179960a0850182611615565b50505050565b60006117ab8383611724565b60c08301905092915050565b6000602082019050919050565b60006117cf826116f8565b6117d98185611703565b93506117e483611714565b8060005b838110156118155781516117fc888261179f565b9750611807836117b7565b9250506001810190506117e8565b5085935050505092915050565b6000602082019050818103600083015261183c81846117c4565b905092915050565b60008060006060848603121561185d5761185c611315565b5b600061186b8682870161139e565b935050602061187c86828701611340565b925050604061188d8682870161139e565b9150509250925092565b6118a08161131f565b82525050565b60006020820190506118bb6000830184611897565b92915050565b6118ca81611375565b82525050565b6118d981611642565b82525050565b600060c0820190506118f460008301896118c1565b6119016020830188611897565b61190e60408301876118c1565b61191b60608301866115be565b61192860808301856118d0565b61193560a08301846118c1565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561197a57808201518184015260208101905061195f565b60008484015250505050565b600061199182611940565b61199b818561194b565b93506119ab81856020860161195c565b6119b4816113f3565b840191505092915050565b600060208201905081810360008301526119d98184611986565b905092915050565b6000806000606084860312156119fa576119f9611315565b5b6000611a088682870161139e565b9350506020611a198682870161139e565b9250506040611a2a86828701611340565b9150509250925092565b6000602082019050611a4960008301846118c1565b92915050565b60008060408385031215611a6657611a65611315565b5b6000611a74858286016113d4565b925050602083013567ffffffffffffffff811115611a9557611a9461131a565b5b611aa185828601611501565b9150509250929050565b7f4c494e4b20494e44455820444f4553204e4f5420455849535400000000000000600082015250565b6000611ae160198361194b565b9150611aec82611aab565b602082019050919050565b60006020820190508181036000830152611b1081611ad4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4c494e4b20414c52454144592057495448445241574e00000000000000000000600082015250565b6000611b7c60168361194b565b9150611b8782611b46565b602082019050919050565b60006020820190508181036000830152611bab81611b6f565b9050919050565b60008160601b9050919050565b6000611bca82611bb2565b9050919050565b6000611bdc82611bbf565b9050919050565b611bf4611bef82611375565b611bd1565b82525050565b6000611c068284611be3565b60148201915081905092915050565b7f48415348455320444f204e4f54204d4154434800000000000000000000000000600082015250565b6000611c4b60138361194b565b9150611c5682611c15565b602082019050919050565b60006020820190508181036000830152611c7a81611c3e565b9050919050565b7f57524f4e47205349474e41545552450000000000000000000000000000000000600082015250565b6000611cb7600f8361194b565b9150611cc282611c81565b602082019050919050565b60006020820190508181036000830152611ce681611caa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d278261131f565b9150611d328361131f565b9250828203905081811115611d4a57611d49611ced565b5b92915050565b6000819050919050565b6000611d75611d70611d6b84611355565b611d50565b611355565b9050919050565b6000611d8782611d5a565b9050919050565b6000611d9982611d7c565b9050919050565b611da981611d8e565b82525050565b600082825260208201905092915050565b50565b6000611dd0600083611daf565b9150611ddb82611dc0565b600082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611e2657611e25611de6565b5b50565b6000819050611e3782611e15565b919050565b6000611e4782611e29565b9050919050565b611e5781611e3c565b82525050565b6000608082019050611e726000830186611da0565b611e7f6020830185611897565b8181036040830152611e9081611dc3565b9050611e9f6060830184611e4e565b949350505050565b611eb0816115b2565b8114611ebb57600080fd5b50565b600081519050611ecd81611ea7565b92915050565b600060208284031215611ee957611ee8611315565b5b6000611ef784828501611ebe565b91505092915050565b7f436f756c64206e6f742065786563757465206574686572207472616e73666572600082015250565b6000611f3660208361194b565b9150611f4182611f00565b602082019050919050565b60006020820190508181036000830152611f6581611f29565b9050919050565b6000611f7782611355565b9050919050565b611f8781611f6c565b82525050565b6000604082019050611fa26000830185611f7e565b611faf6020830184611897565b9392505050565b6000819050919050565b6000611fdb611fd6611fd184611fb6565b611d50565b61131f565b9050919050565b611feb81611fc0565b82525050565b600081519050919050565b600061200782611ff1565b6120118185611daf565b935061202181856020860161195c565b61202a816113f3565b840191505092915050565b600060808201905061204a60008301876118c1565b6120576020830186611fe2565b81810360408301526120698185611ffc565b90506120786060830184611e4e565b95945050505050565b7f436f756c64206e6f74206578656375746520746f6b656e207472616e73666572600082015250565b60006120b760208361194b565b91506120c282612081565b602082019050919050565b600060208201905081810360008301526120e6816120aa565b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061212360188361194b565b915061212e826120ed565b602082019050919050565b6000602082019050818103600083015261215281612116565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061218f601f8361194b565b915061219a82612159565b602082019050919050565b600060208201905081810360008301526121be81612182565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061222160228361194b565b915061222c826121c5565b604082019050919050565b6000602082019050818103600083015261225081612214565b9050919050565b612260816113b3565b82525050565b600060ff82169050919050565b61227c81612266565b82525050565b60006080820190506122976000830187612257565b6122a46020830186612273565b6122b16040830185612257565b6122be6060830184612257565b9594505050505056fea2646970667358221220d4cfcae48dcd9cb39e8e8efbdf1eeec788e79274901739cdd0ee4771a47cfb8064736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3F4DF7E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA3F4DF7E EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0xEF51B79D EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0xF56E81FA EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0xF7B2EC0D EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x222 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x26091678 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x393B6DF3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x48D9CB94 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x55C3D97A EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x881D8A40 EQ PUSH2 0x151 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x152F JUMP JUMPDEST PUSH2 0x240 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x15CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x15E8 JUMP JUMPDEST PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x16DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10B PUSH2 0x787 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x1822 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x136 SWAP2 SWAP1 PUSH2 0x1844 JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x148 SWAP2 SWAP1 PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x15E8 JUMP JUMPDEST PUSH2 0xB7F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17D SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x18DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18E PUSH2 0xC49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x19BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AC PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x19E1 JUMP JUMPDEST PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x1A4F JUMP JUMPDEST PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219 SWAP2 SWAP1 PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22A PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x19BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 POP DUP6 LT PUSH2 0x289 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x280 SWAP1 PUSH2 0x1AF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x29F JUMPI PUSH2 0x29E PUSH2 0x1B17 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 ISZERO ISZERO DUP2 PUSH1 0x60 ADD MLOAD ISZERO ISZERO EQ PUSH2 0x455 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x484 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x469 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xD3C JUMP JUMPDEST DUP5 EQ PUSH2 0x4C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0x1C61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4D1 DUP6 DUP6 PUSH2 0xCEA JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x53C SWAP1 PUSH2 0x1CCD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH32 0xA62BF33E3860A18B08244C1B59B8AA4920BE374252EB534E0AB47D5F7A18CA18 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x590 SWAP2 SWAP1 PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 DUP1 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x5AD JUMPI PUSH2 0x5AC PUSH2 0x1B17 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x5ED DUP3 PUSH1 0xA0 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP9 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x603 PUSH2 0x128A JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x617 JUMPI PUSH2 0x616 PUSH2 0x1B17 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x92D JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x7AB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x15 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH5 0xFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH5 0xFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP1 DUP1 SLOAD SWAP1 POP PUSH2 0xB2E SWAP2 SWAP1 PUSH2 0x1D1C JUMP JUMPDEST PUSH32 0xD0B52DBF7F8C29477B6AE9116C857532274475062B33C1F29E0C92F745C1FFBF DUP6 PUSH1 0x40 MLOAD PUSH2 0xB5D SWAP2 SWAP1 PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 DUP1 DUP1 SLOAD SWAP1 POP PUSH2 0xB76 SWAP2 SWAP1 PUSH2 0x1D1C JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xB8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x15 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH5 0xFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x53616665324C696E6B204D6F64756C6500000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP3 POP SWAP3 POP POP SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCF7 DUP5 DUP5 PUSH2 0xFCA JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x302E312E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE6B JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x468721A7 DUP4 DUP4 PUSH1 0x0 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE03 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE27 SWAP2 SWAP1 PUSH2 0x1ED3 JUMP JUMPDEST PUSH2 0xE66 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5D SWAP1 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE80 SWAP3 SWAP2 SWAP1 PUSH2 0x1F8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x468721A7 DUP6 PUSH1 0x0 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF40 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF83 SWAP2 SWAP1 PUSH2 0x1ED3 JUMP JUMPDEST PUSH2 0xFC2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB9 SWAP1 PUSH2 0x20CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFD9 DUP6 DUP6 PUSH2 0xFF1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xFE6 DUP2 PUSH2 0x1042 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x41 DUP4 MLOAD SUB PUSH2 0x1032 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x20 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP PUSH2 0x1026 DUP8 DUP3 DUP6 DUP6 PUSH2 0x11A8 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x103B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1056 JUMPI PUSH2 0x1055 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1069 JUMPI PUSH2 0x1068 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x11A5 JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1083 JUMPI PUSH2 0x1082 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1096 JUMPI PUSH2 0x1095 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x10D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10CD SWAP1 PUSH2 0x2139 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x10EA JUMPI PUSH2 0x10E9 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x10FD JUMPI PUSH2 0x10FC PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x113D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1134 SWAP1 PUSH2 0x21A5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1151 JUMPI PUSH2 0x1150 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1164 JUMPI PUSH2 0x1163 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x11A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x119B SWAP1 PUSH2 0x2237 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x11E3 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1208 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2282 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x122A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1278 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1281 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH5 0xFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1332 DUP2 PUSH2 0x131F JUMP JUMPDEST DUP2 EQ PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x134F DUP2 PUSH2 0x1329 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1380 DUP3 PUSH2 0x1355 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1390 DUP2 PUSH2 0x1375 JUMP JUMPDEST DUP2 EQ PUSH2 0x139B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x13AD DUP2 PUSH2 0x1387 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x13C6 DUP2 PUSH2 0x13B3 JUMP JUMPDEST DUP2 EQ PUSH2 0x13D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x13E3 DUP2 PUSH2 0x13BD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x143C DUP3 PUSH2 0x13F3 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x145B JUMPI PUSH2 0x145A PUSH2 0x1404 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x146E PUSH2 0x130B JUMP JUMPDEST SWAP1 POP PUSH2 0x147A DUP3 DUP3 PUSH2 0x1433 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x149A JUMPI PUSH2 0x1499 PUSH2 0x1404 JUMP JUMPDEST JUMPDEST PUSH2 0x14A3 DUP3 PUSH2 0x13F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D2 PUSH2 0x14CD DUP5 PUSH2 0x147F JUMP JUMPDEST PUSH2 0x1464 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x14EE JUMPI PUSH2 0x14ED PUSH2 0x13EE JUMP JUMPDEST JUMPDEST PUSH2 0x14F9 DUP5 DUP3 DUP6 PUSH2 0x14B0 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1516 JUMPI PUSH2 0x1515 PUSH2 0x13E9 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1526 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x14BF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1549 JUMPI PUSH2 0x1548 PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1557 DUP8 DUP3 DUP9 ADD PUSH2 0x1340 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1568 DUP8 DUP3 DUP9 ADD PUSH2 0x139E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1579 DUP8 DUP3 DUP9 ADD PUSH2 0x13D4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x159A JUMPI PUSH2 0x1599 PUSH2 0x131A JUMP JUMPDEST JUMPDEST PUSH2 0x15A6 DUP8 DUP3 DUP9 ADD PUSH2 0x1501 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15C7 DUP2 PUSH2 0x15B2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15E2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x15BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15FE JUMPI PUSH2 0x15FD PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x160C DUP5 DUP3 DUP6 ADD PUSH2 0x1340 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x161E DUP2 PUSH2 0x1375 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x162D DUP2 PUSH2 0x131F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x163C DUP2 PUSH2 0x15B2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH5 0xFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x165C DUP2 PUSH2 0x1642 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1678 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x168B PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1624 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x169E PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x16B1 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1633 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x16C4 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1653 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x16D7 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x16F2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1662 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x173A PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x174D PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1624 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1760 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x1773 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1633 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1786 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1653 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1799 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1615 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP4 DUP4 PUSH2 0x1724 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17CF DUP3 PUSH2 0x16F8 JUMP JUMPDEST PUSH2 0x17D9 DUP2 DUP6 PUSH2 0x1703 JUMP JUMPDEST SWAP4 POP PUSH2 0x17E4 DUP4 PUSH2 0x1714 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1815 JUMPI DUP2 MLOAD PUSH2 0x17FC DUP9 DUP3 PUSH2 0x179F JUMP JUMPDEST SWAP8 POP PUSH2 0x1807 DUP4 PUSH2 0x17B7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x17E8 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x183C DUP2 DUP5 PUSH2 0x17C4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x185D JUMPI PUSH2 0x185C PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x186B DUP7 DUP3 DUP8 ADD PUSH2 0x139E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x187C DUP7 DUP3 DUP8 ADD PUSH2 0x1340 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x188D DUP7 DUP3 DUP8 ADD PUSH2 0x139E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x18A0 DUP2 PUSH2 0x131F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18BB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1897 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18CA DUP2 PUSH2 0x1375 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x18D9 DUP2 PUSH2 0x1642 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x18F4 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x1901 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x1897 JUMP JUMPDEST PUSH2 0x190E PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x191B PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x15BE JUMP JUMPDEST PUSH2 0x1928 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x18D0 JUMP JUMPDEST PUSH2 0x1935 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x18C1 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x197A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x195F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1991 DUP3 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0x199B DUP2 DUP6 PUSH2 0x194B JUMP JUMPDEST SWAP4 POP PUSH2 0x19AB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x195C JUMP JUMPDEST PUSH2 0x19B4 DUP2 PUSH2 0x13F3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19D9 DUP2 DUP5 PUSH2 0x1986 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19FA JUMPI PUSH2 0x19F9 PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A08 DUP7 DUP3 DUP8 ADD PUSH2 0x139E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1A19 DUP7 DUP3 DUP8 ADD PUSH2 0x139E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1A2A DUP7 DUP3 DUP8 ADD PUSH2 0x1340 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A49 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18C1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A66 JUMPI PUSH2 0x1A65 PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A74 DUP6 DUP3 DUP7 ADD PUSH2 0x13D4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A95 JUMPI PUSH2 0x1A94 PUSH2 0x131A JUMP JUMPDEST JUMPDEST PUSH2 0x1AA1 DUP6 DUP3 DUP7 ADD PUSH2 0x1501 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4C494E4B20494E44455820444F4553204E4F5420455849535400000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AE1 PUSH1 0x19 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1AEC DUP3 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B10 DUP2 PUSH2 0x1AD4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4C494E4B20414C52454144592057495448445241574E00000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B7C PUSH1 0x16 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1B87 DUP3 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BAB DUP2 PUSH2 0x1B6F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BCA DUP3 PUSH2 0x1BB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BDC DUP3 PUSH2 0x1BBF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BF4 PUSH2 0x1BEF DUP3 PUSH2 0x1375 JUMP JUMPDEST PUSH2 0x1BD1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C06 DUP3 DUP5 PUSH2 0x1BE3 JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x48415348455320444F204E4F54204D4154434800000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C4B PUSH1 0x13 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1C56 DUP3 PUSH2 0x1C15 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C7A DUP2 PUSH2 0x1C3E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x57524F4E47205349474E41545552450000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB7 PUSH1 0xF DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1CC2 DUP3 PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CE6 DUP2 PUSH2 0x1CAA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D27 DUP3 PUSH2 0x131F JUMP JUMPDEST SWAP2 POP PUSH2 0x1D32 DUP4 PUSH2 0x131F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1D4A JUMPI PUSH2 0x1D49 PUSH2 0x1CED JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D75 PUSH2 0x1D70 PUSH2 0x1D6B DUP5 PUSH2 0x1355 JUMP JUMPDEST PUSH2 0x1D50 JUMP JUMPDEST PUSH2 0x1355 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D87 DUP3 PUSH2 0x1D5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D99 DUP3 PUSH2 0x1D7C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DA9 DUP2 PUSH2 0x1D8E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD0 PUSH1 0x0 DUP4 PUSH2 0x1DAF JUMP JUMPDEST SWAP2 POP PUSH2 0x1DDB DUP3 PUSH2 0x1DC0 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x1E26 JUMPI PUSH2 0x1E25 PUSH2 0x1DE6 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x1E37 DUP3 PUSH2 0x1E15 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E47 DUP3 PUSH2 0x1E29 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E57 DUP2 PUSH2 0x1E3C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1E72 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1DA0 JUMP JUMPDEST PUSH2 0x1E7F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1897 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1E90 DUP2 PUSH2 0x1DC3 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E9F PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1E4E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1EB0 DUP2 PUSH2 0x15B2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1EBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1ECD DUP2 PUSH2 0x1EA7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EE9 JUMPI PUSH2 0x1EE8 PUSH2 0x1315 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1EF7 DUP5 DUP3 DUP6 ADD PUSH2 0x1EBE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x436F756C64206E6F742065786563757465206574686572207472616E73666572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F36 PUSH1 0x20 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x1F41 DUP3 PUSH2 0x1F00 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F65 DUP2 PUSH2 0x1F29 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F77 DUP3 PUSH2 0x1355 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F87 DUP2 PUSH2 0x1F6C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1FA2 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1F7E JUMP JUMPDEST PUSH2 0x1FAF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1897 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FDB PUSH2 0x1FD6 PUSH2 0x1FD1 DUP5 PUSH2 0x1FB6 JUMP JUMPDEST PUSH2 0x1D50 JUMP JUMPDEST PUSH2 0x131F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FEB DUP2 PUSH2 0x1FC0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2007 DUP3 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x2011 DUP2 DUP6 PUSH2 0x1DAF JUMP JUMPDEST SWAP4 POP PUSH2 0x2021 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x195C JUMP JUMPDEST PUSH2 0x202A DUP2 PUSH2 0x13F3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x204A PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x2057 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1FE2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2069 DUP2 DUP6 PUSH2 0x1FFC JUMP JUMPDEST SWAP1 POP PUSH2 0x2078 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1E4E JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x436F756C64206E6F74206578656375746520746F6B656E207472616E73666572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20B7 PUSH1 0x20 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x20C2 DUP3 PUSH2 0x2081 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20E6 DUP2 PUSH2 0x20AA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2123 PUSH1 0x18 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x212E DUP3 PUSH2 0x20ED JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2152 DUP2 PUSH2 0x2116 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x218F PUSH1 0x1F DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x219A DUP3 PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x21BE DUP2 PUSH2 0x2182 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2221 PUSH1 0x22 DUP4 PUSH2 0x194B JUMP JUMPDEST SWAP2 POP PUSH2 0x222C DUP3 PUSH2 0x21C5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2250 DUP2 PUSH2 0x2214 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2260 DUP2 PUSH2 0x13B3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x227C DUP2 PUSH2 0x2266 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2297 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2257 JUMP JUMPDEST PUSH2 0x22A4 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x22B1 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2257 JUMP JUMPDEST PUSH2 0x22BE PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2257 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 0xCF 0xCA 0xE4 DUP14 0xCD SWAP13 0xB3 SWAP15 DUP15 DUP15 0xFB 0xDF 0x1E 0xEE 0xC7 DUP9 0xE7 SWAP3 PUSH21 0x901739CDD0EE4771A47CFB8064736F6C6343000813 STOP CALLER ","sourceMap":"695:5485:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3318:1256;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5876:106;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6086:90;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2314:631;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1572:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;727:48;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5634:92;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;863:63;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4743:188;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;781:40;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3318:1256;3492:4;3599:5;:12;;;;3590:6;:21;3582:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;3651:17;3671:5;3677:6;3671:13;;;;;;;;:::i;:::-;;;;;;;;;;;;3651:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3719:5;3702:22;;:5;:13;;;:22;;;3694:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3899:76;3955:17;3938:35;;;;;;;;:::i;:::-;;;;;;;;;;;;;3928:46;;;;;;3899:28;:76::i;:::-;3874:21;:101;3853:167;;;;;;;;;;;;:::i;:::-;;;;;;;;;4108:18;4129:44;4139:21;4162:10;4129:9;:44::i;:::-;4108:65;;4205:5;:14;;;4191:28;;:10;:28;;;4183:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;4326:17;4290:54;;4304:6;4290:54;4312:5;:12;;;4290:54;;;;;;:::i;:::-;;;;;;;;4406:4;4382:5;4388:6;4382:13;;;;;;;;:::i;:::-;;;;;;;;;;;;:21;;;:28;;;;;;;;;;;;;;;;;;4448:97;4468:5;:13;;;4484:5;:18;;;4512:17;4532:5;:12;;;4448:8;:97::i;:::-;4563:4;4556:11;;;;3318:1256;;;;;;:::o;5876:106::-;5932:11;;:::i;:::-;5962:5;5968:6;5962:13;;;;;;;;:::i;:::-;;;;;;;;;;;;5955:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5876:106;;;:::o;6086:90::-;6132:13;6164:5;6157:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6086:90;:::o;2314:631::-;2439:7;2480:5;2504:256;;;;;;;;2647:9;2504:256;;;;;;2580:7;2504:256;;;;2541:13;2504:256;;;;;;2614:5;2504:256;;;;;;2729:15;2504:256;;;;;;2683:10;2504:256;;;;;2480:290;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:10;2820:48;;2845:1;2830:5;:12;;;;:16;;;;:::i;:::-;2820:48;2848:7;2820:48;;;;;;:::i;:::-;;;;;;;;2937:1;2922:5;:12;;;;:16;;;;:::i;:::-;2915:23;;2314:631;;;;;:::o;1572:19::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;727:48::-;;;;;;;;;;;;;;;;;;;:::o;5634:92::-;5681:7;5707:5;:12;;;;5700:19;;5634:92;:::o;863:63::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4743:188::-;4828:7;4847:14;4864:37;4878:11;4891:9;4864:13;:37::i;:::-;4847:54;;4918:6;4911:13;;;4743:188;;;;:::o;781:40::-;;;;;;;;;;;;;;;;;;;:::o;7120:396:1:-;7189:15;7389:34;7383:4;7376:48;7450:4;7444;7437:18;7495:4;7489;7479:21;7468:32;;7120:396;;;:::o;4937:570:5:-;5062:1;5045:19;;:5;:19;;;5041:460;;5145:4;:30;;;5176:2;5180:6;5192:19;5145:67;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5137:112;;;;;;;;;;;;:::i;:::-;;;;;;;;;5041:460;;;5280:17;5353:2;5357:6;5300:64;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5280:84;;5386:4;:30;;;5417:5;5424:1;5427:4;5433:19;5386:67;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5378:112;;;;;;;;;;;;:::i;:::-;;;;;;;;;5266:235;5041:460;4937:570;;;;:::o;3661:227:1:-;3739:7;3759:17;3778:18;3800:27;3811:4;3817:9;3800:10;:27::i;:::-;3758:69;;;;3837:18;3849:5;3837:11;:18::i;:::-;3872:9;3865:16;;;;3661:227;;;;:::o;2145:730::-;2226:7;2235:12;2283:2;2263:9;:16;:22;2259:610;;2301:9;2324;2347:7;2599:4;2588:9;2584:20;2578:27;2573:32;;2648:4;2637:9;2633:20;2627:27;2622:32;;2705:4;2694:9;2690:20;2684:27;2681:1;2676:36;2671:41;;2746:25;2757:4;2763:1;2766;2769;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;2818:1;2822:35;2802:56;;;;2145:730;;;;;;:::o;570:511::-;647:20;638:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;634:441;683:7;634:441;743:29;734:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;730:345;;788:34;;;;;;;;;;:::i;:::-;;;;;;;;730:345;852:35;843:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;839:236;;903:41;;;;;;;;;;:::i;:::-;;;;;;;;839:236;974:30;965:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;961:114;;1020:44;;;;;;;;;;:::i;:::-;;;;;;;;961:114;570:511;;:::o;5009:1456::-;5097:7;5106:12;6021:66;6016:1;6008:10;;:79;6004:161;;;6119:1;6123:30;6103:51;;;;;;6004:161;6259:14;6276:24;6286:4;6292:1;6295;6298;6276:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6259:41;;6332:1;6314:20;;:6;:20;;;6310:101;;6366:1;6370:29;6350:50;;;;;;;6310:101;6429:6;6437:20;6421:37;;;;;5009:1456;;;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:6:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:126::-;727:7;767:42;760:5;756:54;745:65;;690:126;;;:::o;822:96::-;859:7;888:24;906:5;888:24;:::i;:::-;877:35;;822:96;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:77::-;1234:7;1263:5;1252:16;;1197:77;;;:::o;1280:122::-;1353:24;1371:5;1353:24;:::i;:::-;1346:5;1343:35;1333:63;;1392:1;1389;1382:12;1333:63;1280:122;:::o;1408:139::-;1454:5;1492:6;1479:20;1470:29;;1508:33;1535:5;1508:33;:::i;:::-;1408:139;;;;:::o;1553:117::-;1662:1;1659;1652:12;1676:117;1785:1;1782;1775:12;1799:102;1840:6;1891:2;1887:7;1882:2;1875:5;1871:14;1867:28;1857:38;;1799:102;;;:::o;1907:180::-;1955:77;1952:1;1945:88;2052:4;2049:1;2042:15;2076:4;2073:1;2066:15;2093:281;2176:27;2198:4;2176:27;:::i;:::-;2168:6;2164:40;2306:6;2294:10;2291:22;2270:18;2258:10;2255:34;2252:62;2249:88;;;2317:18;;:::i;:::-;2249:88;2357:10;2353:2;2346:22;2136:238;2093:281;;:::o;2380:129::-;2414:6;2441:20;;:::i;:::-;2431:30;;2470:33;2498:4;2490:6;2470:33;:::i;:::-;2380:129;;;:::o;2515:307::-;2576:4;2666:18;2658:6;2655:30;2652:56;;;2688:18;;:::i;:::-;2652:56;2726:29;2748:6;2726:29;:::i;:::-;2718:37;;2810:4;2804;2800:15;2792:23;;2515:307;;;:::o;2828:146::-;2925:6;2920:3;2915;2902:30;2966:1;2957:6;2952:3;2948:16;2941:27;2828:146;;;:::o;2980:423::-;3057:5;3082:65;3098:48;3139:6;3098:48;:::i;:::-;3082:65;:::i;:::-;3073:74;;3170:6;3163:5;3156:21;3208:4;3201:5;3197:16;3246:3;3237:6;3232:3;3228:16;3225:25;3222:112;;;3253:79;;:::i;:::-;3222:112;3343:54;3390:6;3385:3;3380;3343:54;:::i;:::-;3063:340;2980:423;;;;;:::o;3422:338::-;3477:5;3526:3;3519:4;3511:6;3507:17;3503:27;3493:122;;3534:79;;:::i;:::-;3493:122;3651:6;3638:20;3676:78;3750:3;3742:6;3735:4;3727:6;3723:17;3676:78;:::i;:::-;3667:87;;3483:277;3422:338;;;;:::o;3766:943::-;3861:6;3869;3877;3885;3934:3;3922:9;3913:7;3909:23;3905:33;3902:120;;;3941:79;;:::i;:::-;3902:120;4061:1;4086:53;4131:7;4122:6;4111:9;4107:22;4086:53;:::i;:::-;4076:63;;4032:117;4188:2;4214:53;4259:7;4250:6;4239:9;4235:22;4214:53;:::i;:::-;4204:63;;4159:118;4316:2;4342:53;4387:7;4378:6;4367:9;4363:22;4342:53;:::i;:::-;4332:63;;4287:118;4472:2;4461:9;4457:18;4444:32;4503:18;4495:6;4492:30;4489:117;;;4525:79;;:::i;:::-;4489:117;4630:62;4684:7;4675:6;4664:9;4660:22;4630:62;:::i;:::-;4620:72;;4415:287;3766:943;;;;;;;:::o;4715:90::-;4749:7;4792:5;4785:13;4778:21;4767:32;;4715:90;;;:::o;4811:109::-;4892:21;4907:5;4892:21;:::i;:::-;4887:3;4880:34;4811:109;;:::o;4926:210::-;5013:4;5051:2;5040:9;5036:18;5028:26;;5064:65;5126:1;5115:9;5111:17;5102:6;5064:65;:::i;:::-;4926:210;;;;:::o;5142:329::-;5201:6;5250:2;5238:9;5229:7;5225:23;5221:32;5218:119;;;5256:79;;:::i;:::-;5218:119;5376:1;5401:53;5446:7;5437:6;5426:9;5422:22;5401:53;:::i;:::-;5391:63;;5347:117;5142:329;;;;:::o;5477:108::-;5554:24;5572:5;5554:24;:::i;:::-;5549:3;5542:37;5477:108;;:::o;5591:::-;5668:24;5686:5;5668:24;:::i;:::-;5663:3;5656:37;5591:108;;:::o;5705:99::-;5776:21;5791:5;5776:21;:::i;:::-;5771:3;5764:34;5705:99;;:::o;5810:95::-;5846:7;5886:12;5879:5;5875:24;5864:35;;5810:95;;;:::o;5911:105::-;5986:23;6003:5;5986:23;:::i;:::-;5981:3;5974:36;5911:105;;:::o;6088:1214::-;6229:4;6224:3;6220:14;6320:4;6313:5;6309:16;6303:23;6339:63;6396:4;6391:3;6387:14;6373:12;6339:63;:::i;:::-;6244:168;6496:4;6489:5;6485:16;6479:23;6515:63;6572:4;6567:3;6563:14;6549:12;6515:63;:::i;:::-;6422:166;6678:4;6671:5;6667:16;6661:23;6697:63;6754:4;6749:3;6745:14;6731:12;6697:63;:::i;:::-;6598:172;6855:4;6848:5;6844:16;6838:23;6874:57;6925:4;6920:3;6916:14;6902:12;6874:57;:::i;:::-;6780:161;7028:4;7021:5;7017:16;7011:23;7047:61;7102:4;7097:3;7093:14;7079:12;7047:61;:::i;:::-;6951:167;7203:4;7196:5;7192:16;7186:23;7222:63;7279:4;7274:3;7270:14;7256:12;7222:63;:::i;:::-;7128:167;6198:1104;6088:1214;;:::o;7308:311::-;7445:4;7483:3;7472:9;7468:19;7460:27;;7497:115;7609:1;7598:9;7594:17;7585:6;7497:115;:::i;:::-;7308:311;;;;:::o;7625:136::-;7714:6;7748:5;7742:12;7732:22;;7625:136;;;:::o;7767:206::-;7888:11;7922:6;7917:3;7910:19;7962:4;7957:3;7953:14;7938:29;;7767:206;;;;:::o;7979:154::-;8068:4;8091:3;8083:11;;8121:4;8116:3;8112:14;8104:22;;7979:154;;;:::o;8205:1204::-;8336:4;8331:3;8327:14;8427:4;8420:5;8416:16;8410:23;8446:63;8503:4;8498:3;8494:14;8480:12;8446:63;:::i;:::-;8351:168;8603:4;8596:5;8592:16;8586:23;8622:63;8679:4;8674:3;8670:14;8656:12;8622:63;:::i;:::-;8529:166;8785:4;8778:5;8774:16;8768:23;8804:63;8861:4;8856:3;8852:14;8838:12;8804:63;:::i;:::-;8705:172;8962:4;8955:5;8951:16;8945:23;8981:57;9032:4;9027:3;9023:14;9009:12;8981:57;:::i;:::-;8887:161;9135:4;9128:5;9124:16;9118:23;9154:61;9209:4;9204:3;9200:14;9186:12;9154:61;:::i;:::-;9058:167;9310:4;9303:5;9299:16;9293:23;9329:63;9386:4;9381:3;9377:14;9363:12;9329:63;:::i;:::-;9235:167;8305:1104;8205:1204;;:::o;9415:267::-;9528:10;9549:90;9635:3;9627:6;9549:90;:::i;:::-;9671:4;9666:3;9662:14;9648:28;;9415:267;;;;:::o;9688:135::-;9780:4;9812;9807:3;9803:14;9795:22;;9688:135;;;:::o;9899:908::-;10062:3;10091:76;10161:5;10091:76;:::i;:::-;10183:108;10284:6;10279:3;10183:108;:::i;:::-;10176:115;;10315:78;10387:5;10315:78;:::i;:::-;10416:7;10447:1;10432:350;10457:6;10454:1;10451:13;10432:350;;;10533:6;10527:13;10560:107;10663:3;10648:13;10560:107;:::i;:::-;10553:114;;10690:82;10765:6;10690:82;:::i;:::-;10680:92;;10492:290;10479:1;10476;10472:9;10467:14;;10432:350;;;10436:14;10798:3;10791:10;;10067:740;;;9899:908;;;;:::o;10813:461::-;11000:4;11038:2;11027:9;11023:18;11015:26;;11087:9;11081:4;11077:20;11073:1;11062:9;11058:17;11051:47;11115:152;11262:4;11253:6;11115:152;:::i;:::-;11107:160;;10813:461;;;;:::o;11280:619::-;11357:6;11365;11373;11422:2;11410:9;11401:7;11397:23;11393:32;11390:119;;;11428:79;;:::i;:::-;11390:119;11548:1;11573:53;11618:7;11609:6;11598:9;11594:22;11573:53;:::i;:::-;11563:63;;11519:117;11675:2;11701:53;11746:7;11737:6;11726:9;11722:22;11701:53;:::i;:::-;11691:63;;11646:118;11803:2;11829:53;11874:7;11865:6;11854:9;11850:22;11829:53;:::i;:::-;11819:63;;11774:118;11280:619;;;;;:::o;11905:118::-;11992:24;12010:5;11992:24;:::i;:::-;11987:3;11980:37;11905:118;;:::o;12029:222::-;12122:4;12160:2;12149:9;12145:18;12137:26;;12173:71;12241:1;12230:9;12226:17;12217:6;12173:71;:::i;:::-;12029:222;;;;:::o;12257:118::-;12344:24;12362:5;12344:24;:::i;:::-;12339:3;12332:37;12257:118;;:::o;12381:115::-;12466:23;12483:5;12466:23;:::i;:::-;12461:3;12454:36;12381:115;;:::o;12502:759::-;12727:4;12765:3;12754:9;12750:19;12742:27;;12779:71;12847:1;12836:9;12832:17;12823:6;12779:71;:::i;:::-;12860:72;12928:2;12917:9;12913:18;12904:6;12860:72;:::i;:::-;12942;13010:2;12999:9;12995:18;12986:6;12942:72;:::i;:::-;13024:66;13086:2;13075:9;13071:18;13062:6;13024:66;:::i;:::-;13100:71;13166:3;13155:9;13151:19;13142:6;13100:71;:::i;:::-;13181:73;13249:3;13238:9;13234:19;13225:6;13181:73;:::i;:::-;12502:759;;;;;;;;;:::o;13267:99::-;13319:6;13353:5;13347:12;13337:22;;13267:99;;;:::o;13372:169::-;13456:11;13490:6;13485:3;13478:19;13530:4;13525:3;13521:14;13506:29;;13372:169;;;;:::o;13547:246::-;13628:1;13638:113;13652:6;13649:1;13646:13;13638:113;;;13737:1;13732:3;13728:11;13722:18;13718:1;13713:3;13709:11;13702:39;13674:2;13671:1;13667:10;13662:15;;13638:113;;;13785:1;13776:6;13771:3;13767:16;13760:27;13609:184;13547:246;;;:::o;13799:377::-;13887:3;13915:39;13948:5;13915:39;:::i;:::-;13970:71;14034:6;14029:3;13970:71;:::i;:::-;13963:78;;14050:65;14108:6;14103:3;14096:4;14089:5;14085:16;14050:65;:::i;:::-;14140:29;14162:6;14140:29;:::i;:::-;14135:3;14131:39;14124:46;;13891:285;13799:377;;;;:::o;14182:313::-;14295:4;14333:2;14322:9;14318:18;14310:26;;14382:9;14376:4;14372:20;14368:1;14357:9;14353:17;14346:47;14410:78;14483:4;14474:6;14410:78;:::i;:::-;14402:86;;14182:313;;;;:::o;14501:619::-;14578:6;14586;14594;14643:2;14631:9;14622:7;14618:23;14614:32;14611:119;;;14649:79;;:::i;:::-;14611:119;14769:1;14794:53;14839:7;14830:6;14819:9;14815:22;14794:53;:::i;:::-;14784:63;;14740:117;14896:2;14922:53;14967:7;14958:6;14947:9;14943:22;14922:53;:::i;:::-;14912:63;;14867:118;15024:2;15050:53;15095:7;15086:6;15075:9;15071:22;15050:53;:::i;:::-;15040:63;;14995:118;14501:619;;;;;:::o;15126:222::-;15219:4;15257:2;15246:9;15242:18;15234:26;;15270:71;15338:1;15327:9;15323:17;15314:6;15270:71;:::i;:::-;15126:222;;;;:::o;15354:652::-;15431:6;15439;15488:2;15476:9;15467:7;15463:23;15459:32;15456:119;;;15494:79;;:::i;:::-;15456:119;15614:1;15639:53;15684:7;15675:6;15664:9;15660:22;15639:53;:::i;:::-;15629:63;;15585:117;15769:2;15758:9;15754:18;15741:32;15800:18;15792:6;15789:30;15786:117;;;15822:79;;:::i;:::-;15786:117;15927:62;15981:7;15972:6;15961:9;15957:22;15927:62;:::i;:::-;15917:72;;15712:287;15354:652;;;;;:::o;16012:175::-;16152:27;16148:1;16140:6;16136:14;16129:51;16012:175;:::o;16193:366::-;16335:3;16356:67;16420:2;16415:3;16356:67;:::i;:::-;16349:74;;16432:93;16521:3;16432:93;:::i;:::-;16550:2;16545:3;16541:12;16534:19;;16193:366;;;:::o;16565:419::-;16731:4;16769:2;16758:9;16754:18;16746:26;;16818:9;16812:4;16808:20;16804:1;16793:9;16789:17;16782:47;16846:131;16972:4;16846:131;:::i;:::-;16838:139;;16565:419;;;:::o;16990:180::-;17038:77;17035:1;17028:88;17135:4;17132:1;17125:15;17159:4;17156:1;17149:15;17176:172;17316:24;17312:1;17304:6;17300:14;17293:48;17176:172;:::o;17354:366::-;17496:3;17517:67;17581:2;17576:3;17517:67;:::i;:::-;17510:74;;17593:93;17682:3;17593:93;:::i;:::-;17711:2;17706:3;17702:12;17695:19;;17354:366;;;:::o;17726:419::-;17892:4;17930:2;17919:9;17915:18;17907:26;;17979:9;17973:4;17969:20;17965:1;17954:9;17950:17;17943:47;18007:131;18133:4;18007:131;:::i;:::-;17999:139;;17726:419;;;:::o;18151:94::-;18184:8;18232:5;18228:2;18224:14;18203:35;;18151:94;;;:::o;18251:::-;18290:7;18319:20;18333:5;18319:20;:::i;:::-;18308:31;;18251:94;;;:::o;18351:100::-;18390:7;18419:26;18439:5;18419:26;:::i;:::-;18408:37;;18351:100;;;:::o;18457:157::-;18562:45;18582:24;18600:5;18582:24;:::i;:::-;18562:45;:::i;:::-;18557:3;18550:58;18457:157;;:::o;18620:256::-;18732:3;18747:75;18818:3;18809:6;18747:75;:::i;:::-;18847:2;18842:3;18838:12;18831:19;;18867:3;18860:10;;18620:256;;;;:::o;18882:169::-;19022:21;19018:1;19010:6;19006:14;18999:45;18882:169;:::o;19057:366::-;19199:3;19220:67;19284:2;19279:3;19220:67;:::i;:::-;19213:74;;19296:93;19385:3;19296:93;:::i;:::-;19414:2;19409:3;19405:12;19398:19;;19057:366;;;:::o;19429:419::-;19595:4;19633:2;19622:9;19618:18;19610:26;;19682:9;19676:4;19672:20;19668:1;19657:9;19653:17;19646:47;19710:131;19836:4;19710:131;:::i;:::-;19702:139;;19429:419;;;:::o;19854:165::-;19994:17;19990:1;19982:6;19978:14;19971:41;19854:165;:::o;20025:366::-;20167:3;20188:67;20252:2;20247:3;20188:67;:::i;:::-;20181:74;;20264:93;20353:3;20264:93;:::i;:::-;20382:2;20377:3;20373:12;20366:19;;20025:366;;;:::o;20397:419::-;20563:4;20601:2;20590:9;20586:18;20578:26;;20650:9;20644:4;20640:20;20636:1;20625:9;20621:17;20614:47;20678:131;20804:4;20678:131;:::i;:::-;20670:139;;20397:419;;;:::o;20822:180::-;20870:77;20867:1;20860:88;20967:4;20964:1;20957:15;20991:4;20988:1;20981:15;21008:194;21048:4;21068:20;21086:1;21068:20;:::i;:::-;21063:25;;21102:20;21120:1;21102:20;:::i;:::-;21097:25;;21146:1;21143;21139:9;21131:17;;21170:1;21164:4;21161:11;21158:37;;;21175:18;;:::i;:::-;21158:37;21008:194;;;;:::o;21208:60::-;21236:3;21257:5;21250:12;;21208:60;;;:::o;21274:142::-;21324:9;21357:53;21375:34;21384:24;21402:5;21384:24;:::i;:::-;21375:34;:::i;:::-;21357:53;:::i;:::-;21344:66;;21274:142;;;:::o;21422:126::-;21472:9;21505:37;21536:5;21505:37;:::i;:::-;21492:50;;21422:126;;;:::o;21554:134::-;21612:9;21645:37;21676:5;21645:37;:::i;:::-;21632:50;;21554:134;;;:::o;21694:147::-;21789:45;21828:5;21789:45;:::i;:::-;21784:3;21777:58;21694:147;;:::o;21847:168::-;21930:11;21964:6;21959:3;21952:19;22004:4;21999:3;21995:14;21980:29;;21847:168;;;;:::o;22021:114::-;;:::o;22141:362::-;22282:3;22303:65;22366:1;22361:3;22303:65;:::i;:::-;22296:72;;22377:93;22466:3;22377:93;:::i;:::-;22495:1;22490:3;22486:11;22479:18;;22141:362;;;:::o;22509:180::-;22557:77;22554:1;22547:88;22654:4;22651:1;22644:15;22678:4;22675:1;22668:15;22695:119;22782:1;22775:5;22772:12;22762:46;;22788:18;;:::i;:::-;22762:46;22695:119;:::o;22820:139::-;22871:7;22900:5;22889:16;;22906:47;22947:5;22906:47;:::i;:::-;22820:139;;;:::o;22965:::-;23027:9;23060:38;23092:5;23060:38;:::i;:::-;23047:51;;22965:139;;;:::o;23110:155::-;23209:49;23252:5;23209:49;:::i;:::-;23204:3;23197:62;23110:155;;:::o;23271:788::-;23540:4;23578:3;23567:9;23563:19;23555:27;;23592:79;23668:1;23657:9;23653:17;23644:6;23592:79;:::i;:::-;23681:72;23749:2;23738:9;23734:18;23725:6;23681:72;:::i;:::-;23800:9;23794:4;23790:20;23785:2;23774:9;23770:18;23763:48;23828:130;23953:4;23828:130;:::i;:::-;23820:138;;23968:84;24048:2;24037:9;24033:18;24024:6;23968:84;:::i;:::-;23271:788;;;;;;:::o;24065:116::-;24135:21;24150:5;24135:21;:::i;:::-;24128:5;24125:32;24115:60;;24171:1;24168;24161:12;24115:60;24065:116;:::o;24187:137::-;24241:5;24272:6;24266:13;24257:22;;24288:30;24312:5;24288:30;:::i;:::-;24187:137;;;;:::o;24330:345::-;24397:6;24446:2;24434:9;24425:7;24421:23;24417:32;24414:119;;;24452:79;;:::i;:::-;24414:119;24572:1;24597:61;24650:7;24641:6;24630:9;24626:22;24597:61;:::i;:::-;24587:71;;24543:125;24330:345;;;;:::o;24681:182::-;24821:34;24817:1;24809:6;24805:14;24798:58;24681:182;:::o;24869:366::-;25011:3;25032:67;25096:2;25091:3;25032:67;:::i;:::-;25025:74;;25108:93;25197:3;25108:93;:::i;:::-;25226:2;25221:3;25217:12;25210:19;;24869:366;;;:::o;25241:419::-;25407:4;25445:2;25434:9;25430:18;25422:26;;25494:9;25488:4;25484:20;25480:1;25469:9;25465:17;25458:47;25522:131;25648:4;25522:131;:::i;:::-;25514:139;;25241:419;;;:::o;25666:104::-;25711:7;25740:24;25758:5;25740:24;:::i;:::-;25729:35;;25666:104;;;:::o;25776:142::-;25879:32;25905:5;25879:32;:::i;:::-;25874:3;25867:45;25776:142;;:::o;25924:364::-;26061:4;26099:2;26088:9;26084:18;26076:26;;26112:87;26196:1;26185:9;26181:17;26172:6;26112:87;:::i;:::-;26209:72;26277:2;26266:9;26262:18;26253:6;26209:72;:::i;:::-;25924:364;;;;;:::o;26294:85::-;26339:7;26368:5;26357:16;;26294:85;;;:::o;26385:158::-;26443:9;26476:61;26494:42;26503:32;26529:5;26503:32;:::i;:::-;26494:42;:::i;:::-;26476:61;:::i;:::-;26463:74;;26385:158;;;:::o;26549:147::-;26644:45;26683:5;26644:45;:::i;:::-;26639:3;26632:58;26549:147;;:::o;26702:98::-;26753:6;26787:5;26781:12;26771:22;;26702:98;;;:::o;26806:373::-;26892:3;26920:38;26952:5;26920:38;:::i;:::-;26974:70;27037:6;27032:3;26974:70;:::i;:::-;26967:77;;27053:65;27111:6;27106:3;27099:4;27092:5;27088:16;27053:65;:::i;:::-;27143:29;27165:6;27143:29;:::i;:::-;27138:3;27134:39;27127:46;;26896:283;26806:373;;;;:::o;27185:680::-;27400:4;27438:3;27427:9;27423:19;27415:27;;27452:71;27520:1;27509:9;27505:17;27496:6;27452:71;:::i;:::-;27533:80;27609:2;27598:9;27594:18;27585:6;27533:80;:::i;:::-;27660:9;27654:4;27650:20;27645:2;27634:9;27630:18;27623:48;27688:76;27759:4;27750:6;27688:76;:::i;:::-;27680:84;;27774;27854:2;27843:9;27839:18;27830:6;27774:84;:::i;:::-;27185:680;;;;;;;:::o;27871:182::-;28011:34;28007:1;27999:6;27995:14;27988:58;27871:182;:::o;28059:366::-;28201:3;28222:67;28286:2;28281:3;28222:67;:::i;:::-;28215:74;;28298:93;28387:3;28298:93;:::i;:::-;28416:2;28411:3;28407:12;28400:19;;28059:366;;;:::o;28431:419::-;28597:4;28635:2;28624:9;28620:18;28612:26;;28684:9;28678:4;28674:20;28670:1;28659:9;28655:17;28648:47;28712:131;28838:4;28712:131;:::i;:::-;28704:139;;28431:419;;;:::o;28856:174::-;28996:26;28992:1;28984:6;28980:14;28973:50;28856:174;:::o;29036:366::-;29178:3;29199:67;29263:2;29258:3;29199:67;:::i;:::-;29192:74;;29275:93;29364:3;29275:93;:::i;:::-;29393:2;29388:3;29384:12;29377:19;;29036:366;;;:::o;29408:419::-;29574:4;29612:2;29601:9;29597:18;29589:26;;29661:9;29655:4;29651:20;29647:1;29636:9;29632:17;29625:47;29689:131;29815:4;29689:131;:::i;:::-;29681:139;;29408:419;;;:::o;29833:181::-;29973:33;29969:1;29961:6;29957:14;29950:57;29833:181;:::o;30020:366::-;30162:3;30183:67;30247:2;30242:3;30183:67;:::i;:::-;30176:74;;30259:93;30348:3;30259:93;:::i;:::-;30377:2;30372:3;30368:12;30361:19;;30020:366;;;:::o;30392:419::-;30558:4;30596:2;30585:9;30581:18;30573:26;;30645:9;30639:4;30635:20;30631:1;30620:9;30616:17;30609:47;30673:131;30799:4;30673:131;:::i;:::-;30665:139;;30392:419;;;:::o;30817:221::-;30957:34;30953:1;30945:6;30941:14;30934:58;31026:4;31021:2;31013:6;31009:15;31002:29;30817:221;:::o;31044:366::-;31186:3;31207:67;31271:2;31266:3;31207:67;:::i;:::-;31200:74;;31283:93;31372:3;31283:93;:::i;:::-;31401:2;31396:3;31392:12;31385:19;;31044:366;;;:::o;31416:419::-;31582:4;31620:2;31609:9;31605:18;31597:26;;31669:9;31663:4;31659:20;31655:1;31644:9;31640:17;31633:47;31697:131;31823:4;31697:131;:::i;:::-;31689:139;;31416:419;;;:::o;31841:118::-;31928:24;31946:5;31928:24;:::i;:::-;31923:3;31916:37;31841:118;;:::o;31965:86::-;32000:7;32040:4;32033:5;32029:16;32018:27;;31965:86;;;:::o;32057:112::-;32140:22;32156:5;32140:22;:::i;:::-;32135:3;32128:35;32057:112;;:::o;32175:545::-;32348:4;32386:3;32375:9;32371:19;32363:27;;32400:71;32468:1;32457:9;32453:17;32444:6;32400:71;:::i;:::-;32481:68;32545:2;32534:9;32530:18;32521:6;32481:68;:::i;:::-;32559:72;32627:2;32616:9;32612:18;32603:6;32559:72;:::i;:::-;32641;32709:2;32698:9;32694:18;32685:6;32641:72;:::i;:::-;32175:545;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1791400","executionCost":"1884","totalCost":"1793284"},"external":{"NAME()":"infinite","VERSION()":"infinite","claimLink(uint256,address,bytes32,bytes)":"infinite","createLink(address,uint256,address)":"infinite","getAllLinks()":"infinite","getLink(uint256)":"infinite","getLinkCount()":"2467","getSigner(bytes32,bytes)":"infinite","links(uint256)":"infinite","tokens(address,address,uint256)":"infinite"},"internal":{"transfer(contract GnosisSafe,address,address payable,uint256)":"infinite"}},"methodIdentifiers":{"NAME()":"a3f4df7e","VERSION()":"ffa1ad74","claimLink(uint256,address,bytes32,bytes)":"26091678","createLink(address,uint256,address)":"55c3d97a","getAllLinks()":"48d9cb94","getLink(uint256)":"393b6df3","getLinkCount()":"ef51b79d","getSigner(bytes32,bytes)":"f7b2ec0d","links(uint256)":"881d8a40","tokens(address,address,uint256)":"f56e81fa"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"}],\"name\":\"LinkEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MessageEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_recipientAddressHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pubKey20\",\"type\":\"address\"}],\"name\":\"createLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLinks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pubKey20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"internalType\":\"struct Safe2LinkModule.Link[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLink\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pubKey20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"internalType\":\"struct Safe2LinkModule.Link\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"links\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pubKey20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimLink(uint256,address,bytes32,bytes)\":{\"params\":{\"_index\":\"uint256 index of the deposit\",\"_recipientAddress\":\"address of the recipient\",\"_recipientAddressHash\":\"bytes32 hash of the recipient address (prefixed with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\",\"_signature\":\"bytes signature of the recipient address (65 bytes)\"},\"returns\":{\"_0\":\"bool true if successful\"}},\"createLink(address,uint256,address)\":{\"details\":\"For token deposits, allowance must be set before calling this function\",\"params\":{\"_amount\":\"uint256 of the amount of tokens being sent (if erc20)\",\"_pubKey20\":\"last 20 bytes of the public key of the deposit signer\",\"_tokenAddress\":\"address of the token being sent. 0x0 for eth\"},\"returns\":{\"_0\":\"uint256 index of the deposit\"}},\"getAllLinks()\":{\"returns\":{\"_0\":\"Links[] array of deposits\"}},\"getLink(uint256)\":{\"params\":{\"_index\":\"uint256 index of the deposit\"},\"returns\":{\"_0\":\"Deposit struct\"}},\"getLinkCount()\":{\"returns\":{\"_0\":\"uint256 number of deposits\"}},\"getSigner(bytes32,bytes)\":{\"params\":{\"messageHash\":\"bytes32 hash of the message\",\"signature\":\"bytes signature of the message\"},\"returns\":{\"_0\":\"address of the signer\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createLink(address,uint256,address)\":{\"notice\":\"Function to make a deposit\"},\"getAllLinks()\":{\"notice\":\"Get all links in contract\"},\"getLink(uint256)\":{\"notice\":\"Simple way to get single deposit\"},\"getLinkCount()\":{\"notice\":\"Simple way to get the total number of deposits\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Safe2LinkModule.sol\":\"Safe2LinkModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x227aa4896ae1018af2afa3128e63223f1ecacb10bc053ad85e700094a4713293\",\"license\":\"LGPL-3.0-only\"},\"contracts/Safe2LinkModule.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./Enum.sol\\\";\\n\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n}\\n\\ncontract Safe2LinkModule  {\\n    string public constant NAME = \\\"Safe2Link Module\\\";\\n    string public constant VERSION = \\\"0.1.0\\\";\\n\\n\\n    // Safe -> Delegate -> Tokens\\n    mapping(address => mapping(address => address[])) public tokens;\\n    // Safe -> Delegates double linked list entry points\\n\\n\\n    struct Link {\\n        address pubKey20; // (20 bytes) last 20 bytes of the hash of the public key for the deposit\\n        uint256 amount; // (32 bytes) amount of the asset being sent\\n        ///// tokenAddress, contractType, tokenId, claimed & timestamp are stored in a single 32 byte word\\n        address tokenAddress; // (20 bytes) address of the asset being sent. 0x0 for eth\\n        bool claimed; // (1 byte) has this deposit been claimed\\n        uint40 timestamp; // ( 5 bytes) timestamp of the deposit\\n        address account; // (20 bytes) address of the sender\\n    }\\n\\n\\n    Link[] public links; // array of deposits\\n\\n\\n    // events\\n    event LinkEvent(\\n        uint256 indexed _index, uint256 _amount, address indexed _senderAddress\\n    );\\n    event WithdrawEvent(\\n        uint256 indexed _index, uint256 _amount, address indexed _recipientAddress\\n    ); \\n\\n    event MessageEvent(string message);\\n\\n\\n\\n    /**\\n     * @notice Function to make a deposit\\n     * @dev For token deposits, allowance must be set before calling this function\\n     * @param _tokenAddress address of the token being sent. 0x0 for eth\\n     * @param _amount uint256 of the amount of tokens being sent (if erc20)\\n     * @param _pubKey20 last 20 bytes of the public key of the deposit signer\\n     * @return uint256 index of the deposit\\n     */\\n    function createLink(\\n        address _tokenAddress,\\n        uint256 _amount,\\n        address _pubKey20\\n    ) public returns (uint256) {\\n\\n\\n     // create link\\n        links.push(\\n            Link({\\n                tokenAddress: _tokenAddress,\\n                amount: _amount,\\n                claimed: false,\\n                pubKey20: _pubKey20,\\n                account: msg.sender,\\n                timestamp: uint40(block.timestamp)\\n            })\\n        );\\n\\n        // emit the deposit event\\n        emit LinkEvent(links.length - 1, _amount, msg.sender);\\n\\n        // return id of new deposit\\n        return links.length - 1;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @param _index uint256 index of the deposit\\n     * @param _recipientAddress address of the recipient\\n     * @param _recipientAddressHash bytes32 hash of the recipient address (prefixed with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n     * @param _signature bytes signature of the recipient address (65 bytes)\\n     * @return bool true if successful\\n     */\\n    function claimLink(\\n        uint256 _index,\\n        address _recipientAddress,\\n        bytes32 _recipientAddressHash,\\n        bytes memory _signature\\n    ) external returns (bool) {\\n        // check that the link exists and that it isn't already withdrawn\\n        require(_index < links.length, \\\"LINK INDEX DOES NOT EXIST\\\");\\n        Link memory _link = links[_index];\\n        require(_link.claimed == false, \\\"LINK ALREADY WITHDRAWN\\\");\\n        // check that the recipientAddress hashes to the same value as recipientAddressHash\\n        require(\\n            _recipientAddressHash == ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_recipientAddress))),\\n            \\\"HASHES DO NOT MATCH\\\"\\n        );\\n        // check that the signer is the same as the one stored in the deposit\\n        address linkSigner = getSigner(_recipientAddressHash, _signature);\\n        require(linkSigner == _link.pubKey20, \\\"WRONG SIGNATURE\\\");\\n\\n        // emit the withdraw event\\n        emit WithdrawEvent(_index, _link.amount, _recipientAddress);\\n\\n        // mark as claimed\\n        links[_index].claimed = true;\\n\\n\\n        // Transfer token\\n        transfer(GnosisSafe(_link.account), _link.tokenAddress, payable(_recipientAddress), _link.amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @param messageHash bytes32 hash of the message\\n     * @param signature bytes signature of the message\\n     * @return address of the signer\\n     */\\n    function getSigner(bytes32 messageHash, bytes memory signature) public pure returns (address) {\\n        address signer = ECDSA.recover(messageHash, signature);\\n        return signer;\\n    }\\n\\n    function transfer(GnosisSafe safe, address token, address payable to, uint256 amount) private {\\n        if (token == address(0)) {\\n            // solium-disable-next-line security/no-send\\n            require(safe.execTransactionFromModule(to, amount, \\\"\\\", Enum.Operation.Call), \\\"Could not execute ether transfer\\\");\\n        } else {\\n            bytes memory data = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, amount);\\n            require(safe.execTransactionFromModule(token, 0, data, Enum.Operation.Call), \\\"Could not execute token transfer\\\");\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice Simple way to get the total number of deposits\\n     * @return uint256 number of deposits\\n     */\\n    function getLinkCount() external view returns (uint256) {\\n        return links.length;\\n    }\\n\\n    /**\\n     * @notice Simple way to get single deposit\\n     * @param _index uint256 index of the deposit\\n     * @return Deposit struct\\n     */\\n    function getLink(uint256 _index) external view returns (Link memory) {\\n        return links[_index];\\n    }\\n\\n    /**\\n     * @notice Get all links in contract\\n     * @return Links[] array of deposits\\n     */\\n    function getAllLinks() external view returns (Link[] memory) {\\n        return links;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xa57dc8ab96a266a5ced02e5baaaed22d5c886c4ab97b65ac8c2c2795f1b2a741\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1605,"contract":"contracts/Safe2LinkModule.sol:Safe2LinkModule","label":"tokens","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"},{"astId":1622,"contract":"contracts/Safe2LinkModule.sol:Safe2LinkModule","label":"links","offset":0,"slot":"1","type":"t_array(t_struct(Link)1618_storage)dyn_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_array(t_struct(Link)1618_storage)dyn_storage":{"base":"t_struct(Link)1618_storage","encoding":"dynamic_array","label":"struct Safe2LinkModule.Link[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_array(t_address)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address[])","numberOfBytes":"32","value":"t_array(t_address)dyn_storage"},"t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => address[]))","numberOfBytes":"32","value":"t_mapping(t_address,t_array(t_address)dyn_storage)"},"t_struct(Link)1618_storage":{"encoding":"inplace","label":"struct Safe2LinkModule.Link","members":[{"astId":1607,"contract":"contracts/Safe2LinkModule.sol:Safe2LinkModule","label":"pubKey20","offset":0,"slot":"0","type":"t_address"},{"astId":1609,"contract":"contracts/Safe2LinkModule.sol:Safe2LinkModule","label":"amount","offset":0,"slot":"1","type":"t_uint256"},{"astId":1611,"contract":"contracts/Safe2LinkModule.sol:Safe2LinkModule","label":"tokenAddress","offset":0,"slot":"2","type":"t_address"},{"astId":1613,"contract":"contracts/Safe2LinkModule.sol:Safe2LinkModule","label":"claimed","offset":20,"slot":"2","type":"t_bool"},{"astId":1615,"contract":"contracts/Safe2LinkModule.sol:Safe2LinkModule","label":"timestamp","offset":21,"slot":"2","type":"t_uint40"},{"astId":1617,"contract":"contracts/Safe2LinkModule.sol:Safe2LinkModule","label":"account","offset":0,"slot":"3","type":"t_address"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint40":{"encoding":"inplace","label":"uint40","numberOfBytes":"5"}}},"userdoc":{"kind":"user","methods":{"createLink(address,uint256,address)":{"notice":"Function to make a deposit"},"getAllLinks()":{"notice":"Get all links in contract"},"getLink(uint256)":{"notice":"Simple way to get single deposit"},"getLinkCount()":{"notice":"Simple way to get the total number of deposits"}},"version":1}}}}}}