{
  "address": "0xaB83F7041C82D5a915E608D887073B6C52a28459",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_senderAddress",
          "type": "address"
        }
      ],
      "name": "LinkEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "MessageEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_recipientAddress",
          "type": "address"
        }
      ],
      "name": "WithdrawEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipientAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_recipientAddressHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "claimLink",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pubKey20",
          "type": "address"
        }
      ],
      "name": "createLink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLinks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pubKey20",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint40",
              "name": "timestamp",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "internalType": "struct Safe2LinkModule.Link[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getLink",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pubKey20",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint40",
              "name": "timestamp",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "internalType": "struct Safe2LinkModule.Link",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLinkCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "links",
      "outputs": [
        {
          "internalType": "address",
          "name": "pubKey20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "timestamp",
          "type": "uint40"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a20d82a3f5e91f7babc3979d40ae30a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"}],\"name\":\"LinkEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MessageEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipientAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_recipientAddressHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pubKey20\",\"type\":\"address\"}],\"name\":\"createLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLinks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pubKey20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"internalType\":\"struct Safe2LinkModule.Link[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLink\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pubKey20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"internalType\":\"struct Safe2LinkModule.Link\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"links\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pubKey20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimLink(uint256,address,bytes32,bytes)\":{\"params\":{\"_index\":\"uint256 index of the deposit\",\"_recipientAddress\":\"address of the recipient\",\"_recipientAddressHash\":\"bytes32 hash of the recipient address (prefixed with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\",\"_signature\":\"bytes signature of the recipient address (65 bytes)\"},\"returns\":{\"_0\":\"bool true if successful\"}},\"createLink(address,uint256,address)\":{\"details\":\"For token deposits, allowance must be set before calling this function\",\"params\":{\"_amount\":\"uint256 of the amount of tokens being sent (if erc20)\",\"_pubKey20\":\"last 20 bytes of the public key of the deposit signer\",\"_tokenAddress\":\"address of the token being sent. 0x0 for eth\"},\"returns\":{\"_0\":\"uint256 index of the deposit\"}},\"getAllLinks()\":{\"returns\":{\"_0\":\"Links[] array of deposits\"}},\"getLink(uint256)\":{\"params\":{\"_index\":\"uint256 index of the deposit\"},\"returns\":{\"_0\":\"Deposit struct\"}},\"getLinkCount()\":{\"returns\":{\"_0\":\"uint256 number of deposits\"}},\"getSigner(bytes32,bytes)\":{\"params\":{\"messageHash\":\"bytes32 hash of the message\",\"signature\":\"bytes signature of the message\"},\"returns\":{\"_0\":\"address of the signer\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createLink(address,uint256,address)\":{\"notice\":\"Function to make a deposit\"},\"getAllLinks()\":{\"notice\":\"Get all links in contract\"},\"getLink(uint256)\":{\"notice\":\"Simple way to get single deposit\"},\"getLinkCount()\":{\"notice\":\"Simple way to get the total number of deposits\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Safe2LinkModule.sol\":\"Safe2LinkModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x227aa4896ae1018af2afa3128e63223f1ecacb10bc053ad85e700094a4713293\",\"license\":\"LGPL-3.0-only\"},\"contracts/Safe2LinkModule.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./Enum.sol\\\";\\n\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n}\\n\\ncontract Safe2LinkModule  {\\n    string public constant NAME = \\\"Safe2Link Module\\\";\\n    string public constant VERSION = \\\"0.1.0\\\";\\n\\n\\n    // Safe -> Delegate -> Tokens\\n    mapping(address => mapping(address => address[])) public tokens;\\n    // Safe -> Delegates double linked list entry points\\n\\n\\n    struct Link {\\n        address pubKey20; // (20 bytes) last 20 bytes of the hash of the public key for the deposit\\n        uint256 amount; // (32 bytes) amount of the asset being sent\\n        ///// tokenAddress, contractType, tokenId, claimed & timestamp are stored in a single 32 byte word\\n        address tokenAddress; // (20 bytes) address of the asset being sent. 0x0 for eth\\n        bool claimed; // (1 byte) has this deposit been claimed\\n        uint40 timestamp; // ( 5 bytes) timestamp of the deposit\\n        address account; // (20 bytes) address of the sender\\n    }\\n\\n\\n    Link[] public links; // array of deposits\\n\\n\\n    // events\\n    event LinkEvent(\\n        uint256 indexed _index, uint256 _amount, address indexed _senderAddress\\n    );\\n    event WithdrawEvent(\\n        uint256 indexed _index, uint256 _amount, address indexed _recipientAddress\\n    ); \\n\\n    event MessageEvent(string message);\\n\\n\\n\\n    /**\\n     * @notice Function to make a deposit\\n     * @dev For token deposits, allowance must be set before calling this function\\n     * @param _tokenAddress address of the token being sent. 0x0 for eth\\n     * @param _amount uint256 of the amount of tokens being sent (if erc20)\\n     * @param _pubKey20 last 20 bytes of the public key of the deposit signer\\n     * @return uint256 index of the deposit\\n     */\\n    function createLink(\\n        address _tokenAddress,\\n        uint256 _amount,\\n        address _pubKey20\\n    ) public returns (uint256) {\\n\\n\\n     // create link\\n        links.push(\\n            Link({\\n                tokenAddress: _tokenAddress,\\n                amount: _amount,\\n                claimed: false,\\n                pubKey20: _pubKey20,\\n                account: msg.sender,\\n                timestamp: uint40(block.timestamp)\\n            })\\n        );\\n\\n        // emit the deposit event\\n        emit LinkEvent(links.length - 1, _amount, msg.sender);\\n\\n        // return id of new deposit\\n        return links.length - 1;\\n    }\\n\\n\\n\\n\\n    /**\\n     * @param _index uint256 index of the deposit\\n     * @param _recipientAddress address of the recipient\\n     * @param _recipientAddressHash bytes32 hash of the recipient address (prefixed with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n     * @param _signature bytes signature of the recipient address (65 bytes)\\n     * @return bool true if successful\\n     */\\n    function claimLink(\\n        uint256 _index,\\n        address _recipientAddress,\\n        bytes32 _recipientAddressHash,\\n        bytes memory _signature\\n    ) external returns (bool) {\\n        // check that the link exists and that it isn't already withdrawn\\n        require(_index < links.length, \\\"LINK INDEX DOES NOT EXIST\\\");\\n        Link memory _link = links[_index];\\n        require(_link.claimed == false, \\\"LINK ALREADY WITHDRAWN\\\");\\n        // check that the recipientAddress hashes to the same value as recipientAddressHash\\n        require(\\n            _recipientAddressHash == ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_recipientAddress))),\\n            \\\"HASHES DO NOT MATCH\\\"\\n        );\\n        // check that the signer is the same as the one stored in the deposit\\n        address linkSigner = getSigner(_recipientAddressHash, _signature);\\n        require(linkSigner == _link.pubKey20, \\\"WRONG SIGNATURE\\\");\\n\\n        // emit the withdraw event\\n        emit WithdrawEvent(_index, _link.amount, _recipientAddress);\\n\\n        // mark as claimed\\n        links[_index].claimed = true;\\n\\n\\n        // Transfer token\\n        transfer(GnosisSafe(_link.account), _link.tokenAddress, payable(_recipientAddress), _link.amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @param messageHash bytes32 hash of the message\\n     * @param signature bytes signature of the message\\n     * @return address of the signer\\n     */\\n    function getSigner(bytes32 messageHash, bytes memory signature) public pure returns (address) {\\n        address signer = ECDSA.recover(messageHash, signature);\\n        return signer;\\n    }\\n\\n    function transfer(GnosisSafe safe, address token, address payable to, uint256 amount) private {\\n        if (token == address(0)) {\\n            // solium-disable-next-line security/no-send\\n            require(safe.execTransactionFromModule(to, amount, \\\"\\\", Enum.Operation.Call), \\\"Could not execute ether transfer\\\");\\n        } else {\\n            bytes memory data = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, amount);\\n            require(safe.execTransactionFromModule(token, 0, data, Enum.Operation.Call), \\\"Could not execute token transfer\\\");\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice Simple way to get the total number of deposits\\n     * @return uint256 number of deposits\\n     */\\n    function getLinkCount() external view returns (uint256) {\\n        return links.length;\\n    }\\n\\n    /**\\n     * @notice Simple way to get single deposit\\n     * @param _index uint256 index of the deposit\\n     * @return Deposit struct\\n     */\\n    function getLink(uint256 _index) external view returns (Link memory) {\\n        return links[_index];\\n    }\\n\\n    /**\\n     * @notice Get all links in contract\\n     * @return Links[] array of deposits\\n     */\\n    function getAllLinks() external view returns (Link[] memory) {\\n        return links;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xa57dc8ab96a266a5ced02e5baaaed22d5c886c4ab97b65ac8c2c2795f1b2a741\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506122fd806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a3f4df7e11610066578063a3f4df7e14610186578063ef51b79d146101a4578063f56e81fa146101c2578063f7b2ec0d146101f2578063ffa1ad74146102225761009e565b806326091678146100a3578063393b6df3146100d357806348d9cb941461010357806355c3d97a14610121578063881d8a4014610151575b600080fd5b6100bd60048036038101906100b8919061152f565b610240565b6040516100ca91906115cd565b60405180910390f35b6100ed60048036038101906100e891906115e8565b6105fb565b6040516100fa91906116dd565b60405180910390f35b61010b610787565b6040516101189190611822565b60405180910390f35b61013b60048036038101906101369190611844565b610936565b60405161014891906118a6565b60405180910390f35b61016b600480360381019061016691906115e8565b610b7f565b60405161017d969594939291906118df565b60405180910390f35b61018e610c49565b60405161019b91906119bf565b60405180910390f35b6101ac610c82565b6040516101b991906118a6565b60405180910390f35b6101dc60048036038101906101d791906119e1565b610c8f565b6040516101e99190611a34565b60405180910390f35b61020c60048036038101906102079190611a4f565b610cea565b6040516102199190611a34565b60405180910390f35b61022a610d03565b60405161023791906119bf565b60405180910390f35b60006001805490508510610289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028090611af7565b60405180910390fd5b60006001868154811061029f5761029e611b17565b5b90600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600015158160600151151514610455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044c90611b92565b60405180910390fd5b610484856040516020016104699190611bfa565b60405160208183030381529060405280519060200120610d3c565b84146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc90611c61565b60405180910390fd5b60006104d18585610cea565b9050816000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053c90611ccd565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff16877fa62bf33e3860a18b08244c1b59b8aa4920be374252eb534e0ab47d5f7a18ca18846020015160405161059091906118a6565b60405180910390a360018088815481106105ad576105ac611b17565b5b906000526020600020906004020160020160146101000a81548160ff0219169083151502179055506105ed8260a001518360400151888560200151610d72565b600192505050949350505050565b61060361128a565b6001828154811061061757610616611b17565b5b90600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561092d57838290600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906107ab565b50505050905090565b600060016040518060c001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020014264ffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548164ffffffffff021916908364ffffffffff16021790555060a08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050503373ffffffffffffffffffffffffffffffffffffffff1660018080549050610b2e9190611d1c565b7fd0b52dbf7f8c29477b6ae9116c857532274475062b33c1f29e0c92f745c1ffbf85604051610b5d91906118a6565b60405180910390a360018080549050610b769190611d1c565b90509392505050565b60018181548110610b8f57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900464ffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b6040518060400160405280601081526020017f53616665324c696e6b204d6f64756c650000000000000000000000000000000081525081565b6000600180549050905090565b60006020528260005260406000206020528160005260406000208181548110610cb757600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610cf78484610fca565b90508091505092915050565b6040518060400160405280600581526020017f302e312e3000000000000000000000000000000000000000000000000000000081525081565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e6b578373ffffffffffffffffffffffffffffffffffffffff1663468721a7838360006040518463ffffffff1660e01b8152600401610de493929190611e5d565b6020604051808303816000875af1158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e279190611ed3565b610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d90611f4c565b60405180910390fd5b610fc4565b60008282604051602401610e80929190611f8d565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508473ffffffffffffffffffffffffffffffffffffffff1663468721a78560008460006040518563ffffffff1660e01b8152600401610f409493929190612035565b6020604051808303816000875af1158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f839190611ed3565b610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb9906120cd565b60405180910390fd5b505b50505050565b6000806000610fd98585610ff1565b91509150610fe681611042565b819250505092915050565b60008060418351036110325760008060006020860151925060408601519150606086015160001a9050611026878285856111a8565b9450945050505061103b565b60006002915091505b9250929050565b6000600481111561105657611055611de6565b5b81600481111561106957611068611de6565b5b03156111a5576001600481111561108357611082611de6565b5b81600481111561109657611095611de6565b5b036110d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cd90612139565b60405180910390fd5b600260048111156110ea576110e9611de6565b5b8160048111156110fd576110fc611de6565b5b0361113d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611134906121a5565b60405180910390fd5b6003600481111561115157611150611de6565b5b81600481111561116457611163611de6565b5b036111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612237565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156111e3576000600391509150611281565b6000600187878787604051600081526020016040526040516112089493929190612282565b6020604051602081039080840390855afa15801561122a573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361127857600060019250925050611281565b80600092509250505b94509492505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600064ffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113328161131f565b811461133d57600080fd5b50565b60008135905061134f81611329565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061138082611355565b9050919050565b61139081611375565b811461139b57600080fd5b50565b6000813590506113ad81611387565b92915050565b6000819050919050565b6113c6816113b3565b81146113d157600080fd5b50565b6000813590506113e3816113bd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61143c826113f3565b810181811067ffffffffffffffff8211171561145b5761145a611404565b5b80604052505050565b600061146e61130b565b905061147a8282611433565b919050565b600067ffffffffffffffff82111561149a57611499611404565b5b6114a3826113f3565b9050602081019050919050565b82818337600083830152505050565b60006114d26114cd8461147f565b611464565b9050828152602081018484840111156114ee576114ed6113ee565b5b6114f98482856114b0565b509392505050565b600082601f830112611516576115156113e9565b5b81356115268482602086016114bf565b91505092915050565b6000806000806080858703121561154957611548611315565b5b600061155787828801611340565b94505060206115688782880161139e565b9350506040611579878288016113d4565b925050606085013567ffffffffffffffff81111561159a5761159961131a565b5b6115a687828801611501565b91505092959194509250565b60008115159050919050565b6115c7816115b2565b82525050565b60006020820190506115e260008301846115be565b92915050565b6000602082840312156115fe576115fd611315565b5b600061160c84828501611340565b91505092915050565b61161e81611375565b82525050565b61162d8161131f565b82525050565b61163c816115b2565b82525050565b600064ffffffffff82169050919050565b61165c81611642565b82525050565b60c0820160008201516116786000850182611615565b50602082015161168b6020850182611624565b50604082015161169e6040850182611615565b5060608201516116b16060850182611633565b5060808201516116c46080850182611653565b5060a08201516116d760a0850182611615565b50505050565b600060c0820190506116f26000830184611662565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c08201600082015161173a6000850182611615565b50602082015161174d6020850182611624565b5060408201516117606040850182611615565b5060608201516117736060850182611633565b5060808201516117866080850182611653565b5060a082015161179960a0850182611615565b50505050565b60006117ab8383611724565b60c08301905092915050565b6000602082019050919050565b60006117cf826116f8565b6117d98185611703565b93506117e483611714565b8060005b838110156118155781516117fc888261179f565b9750611807836117b7565b9250506001810190506117e8565b5085935050505092915050565b6000602082019050818103600083015261183c81846117c4565b905092915050565b60008060006060848603121561185d5761185c611315565b5b600061186b8682870161139e565b935050602061187c86828701611340565b925050604061188d8682870161139e565b9150509250925092565b6118a08161131f565b82525050565b60006020820190506118bb6000830184611897565b92915050565b6118ca81611375565b82525050565b6118d981611642565b82525050565b600060c0820190506118f460008301896118c1565b6119016020830188611897565b61190e60408301876118c1565b61191b60608301866115be565b61192860808301856118d0565b61193560a08301846118c1565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561197a57808201518184015260208101905061195f565b60008484015250505050565b600061199182611940565b61199b818561194b565b93506119ab81856020860161195c565b6119b4816113f3565b840191505092915050565b600060208201905081810360008301526119d98184611986565b905092915050565b6000806000606084860312156119fa576119f9611315565b5b6000611a088682870161139e565b9350506020611a198682870161139e565b9250506040611a2a86828701611340565b9150509250925092565b6000602082019050611a4960008301846118c1565b92915050565b60008060408385031215611a6657611a65611315565b5b6000611a74858286016113d4565b925050602083013567ffffffffffffffff811115611a9557611a9461131a565b5b611aa185828601611501565b9150509250929050565b7f4c494e4b20494e44455820444f4553204e4f5420455849535400000000000000600082015250565b6000611ae160198361194b565b9150611aec82611aab565b602082019050919050565b60006020820190508181036000830152611b1081611ad4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4c494e4b20414c52454144592057495448445241574e00000000000000000000600082015250565b6000611b7c60168361194b565b9150611b8782611b46565b602082019050919050565b60006020820190508181036000830152611bab81611b6f565b9050919050565b60008160601b9050919050565b6000611bca82611bb2565b9050919050565b6000611bdc82611bbf565b9050919050565b611bf4611bef82611375565b611bd1565b82525050565b6000611c068284611be3565b60148201915081905092915050565b7f48415348455320444f204e4f54204d4154434800000000000000000000000000600082015250565b6000611c4b60138361194b565b9150611c5682611c15565b602082019050919050565b60006020820190508181036000830152611c7a81611c3e565b9050919050565b7f57524f4e47205349474e41545552450000000000000000000000000000000000600082015250565b6000611cb7600f8361194b565b9150611cc282611c81565b602082019050919050565b60006020820190508181036000830152611ce681611caa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d278261131f565b9150611d328361131f565b9250828203905081811115611d4a57611d49611ced565b5b92915050565b6000819050919050565b6000611d75611d70611d6b84611355565b611d50565b611355565b9050919050565b6000611d8782611d5a565b9050919050565b6000611d9982611d7c565b9050919050565b611da981611d8e565b82525050565b600082825260208201905092915050565b50565b6000611dd0600083611daf565b9150611ddb82611dc0565b600082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611e2657611e25611de6565b5b50565b6000819050611e3782611e15565b919050565b6000611e4782611e29565b9050919050565b611e5781611e3c565b82525050565b6000608082019050611e726000830186611da0565b611e7f6020830185611897565b8181036040830152611e9081611dc3565b9050611e9f6060830184611e4e565b949350505050565b611eb0816115b2565b8114611ebb57600080fd5b50565b600081519050611ecd81611ea7565b92915050565b600060208284031215611ee957611ee8611315565b5b6000611ef784828501611ebe565b91505092915050565b7f436f756c64206e6f742065786563757465206574686572207472616e73666572600082015250565b6000611f3660208361194b565b9150611f4182611f00565b602082019050919050565b60006020820190508181036000830152611f6581611f29565b9050919050565b6000611f7782611355565b9050919050565b611f8781611f6c565b82525050565b6000604082019050611fa26000830185611f7e565b611faf6020830184611897565b9392505050565b6000819050919050565b6000611fdb611fd6611fd184611fb6565b611d50565b61131f565b9050919050565b611feb81611fc0565b82525050565b600081519050919050565b600061200782611ff1565b6120118185611daf565b935061202181856020860161195c565b61202a816113f3565b840191505092915050565b600060808201905061204a60008301876118c1565b6120576020830186611fe2565b81810360408301526120698185611ffc565b90506120786060830184611e4e565b95945050505050565b7f436f756c64206e6f74206578656375746520746f6b656e207472616e73666572600082015250565b60006120b760208361194b565b91506120c282612081565b602082019050919050565b600060208201905081810360008301526120e6816120aa565b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061212360188361194b565b915061212e826120ed565b602082019050919050565b6000602082019050818103600083015261215281612116565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061218f601f8361194b565b915061219a82612159565b602082019050919050565b600060208201905081810360008301526121be81612182565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061222160228361194b565b915061222c826121c5565b604082019050919050565b6000602082019050818103600083015261225081612214565b9050919050565b612260816113b3565b82525050565b600060ff82169050919050565b61227c81612266565b82525050565b60006080820190506122976000830187612257565b6122a46020830186612273565b6122b16040830185612257565b6122be6060830184612257565b9594505050505056fea2646970667358221220d4cfcae48dcd9cb39e8e8efbdf1eeec788e79274901739cdd0ee4771a47cfb8064736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a3f4df7e11610066578063a3f4df7e14610186578063ef51b79d146101a4578063f56e81fa146101c2578063f7b2ec0d146101f2578063ffa1ad74146102225761009e565b806326091678146100a3578063393b6df3146100d357806348d9cb941461010357806355c3d97a14610121578063881d8a4014610151575b600080fd5b6100bd60048036038101906100b8919061152f565b610240565b6040516100ca91906115cd565b60405180910390f35b6100ed60048036038101906100e891906115e8565b6105fb565b6040516100fa91906116dd565b60405180910390f35b61010b610787565b6040516101189190611822565b60405180910390f35b61013b60048036038101906101369190611844565b610936565b60405161014891906118a6565b60405180910390f35b61016b600480360381019061016691906115e8565b610b7f565b60405161017d969594939291906118df565b60405180910390f35b61018e610c49565b60405161019b91906119bf565b60405180910390f35b6101ac610c82565b6040516101b991906118a6565b60405180910390f35b6101dc60048036038101906101d791906119e1565b610c8f565b6040516101e99190611a34565b60405180910390f35b61020c60048036038101906102079190611a4f565b610cea565b6040516102199190611a34565b60405180910390f35b61022a610d03565b60405161023791906119bf565b60405180910390f35b60006001805490508510610289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028090611af7565b60405180910390fd5b60006001868154811061029f5761029e611b17565b5b90600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600015158160600151151514610455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044c90611b92565b60405180910390fd5b610484856040516020016104699190611bfa565b60405160208183030381529060405280519060200120610d3c565b84146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc90611c61565b60405180910390fd5b60006104d18585610cea565b9050816000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053c90611ccd565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff16877fa62bf33e3860a18b08244c1b59b8aa4920be374252eb534e0ab47d5f7a18ca18846020015160405161059091906118a6565b60405180910390a360018088815481106105ad576105ac611b17565b5b906000526020600020906004020160020160146101000a81548160ff0219169083151502179055506105ed8260a001518360400151888560200151610d72565b600192505050949350505050565b61060361128a565b6001828154811061061757610616611b17565b5b90600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561092d57838290600052602060002090600402016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906107ab565b50505050905090565b600060016040518060c001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020014264ffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548164ffffffffff021916908364ffffffffff16021790555060a08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050503373ffffffffffffffffffffffffffffffffffffffff1660018080549050610b2e9190611d1c565b7fd0b52dbf7f8c29477b6ae9116c857532274475062b33c1f29e0c92f745c1ffbf85604051610b5d91906118a6565b60405180910390a360018080549050610b769190611d1c565b90509392505050565b60018181548110610b8f57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900464ffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b6040518060400160405280601081526020017f53616665324c696e6b204d6f64756c650000000000000000000000000000000081525081565b6000600180549050905090565b60006020528260005260406000206020528160005260406000208181548110610cb757600080fd5b90600052602060002001600092509250509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610cf78484610fca565b90508091505092915050565b6040518060400160405280600581526020017f302e312e3000000000000000000000000000000000000000000000000000000081525081565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e6b578373ffffffffffffffffffffffffffffffffffffffff1663468721a7838360006040518463ffffffff1660e01b8152600401610de493929190611e5d565b6020604051808303816000875af1158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e279190611ed3565b610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d90611f4c565b60405180910390fd5b610fc4565b60008282604051602401610e80929190611f8d565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508473ffffffffffffffffffffffffffffffffffffffff1663468721a78560008460006040518563ffffffff1660e01b8152600401610f409493929190612035565b6020604051808303816000875af1158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f839190611ed3565b610fc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb9906120cd565b60405180910390fd5b505b50505050565b6000806000610fd98585610ff1565b91509150610fe681611042565b819250505092915050565b60008060418351036110325760008060006020860151925060408601519150606086015160001a9050611026878285856111a8565b9450945050505061103b565b60006002915091505b9250929050565b6000600481111561105657611055611de6565b5b81600481111561106957611068611de6565b5b03156111a5576001600481111561108357611082611de6565b5b81600481111561109657611095611de6565b5b036110d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cd90612139565b60405180910390fd5b600260048111156110ea576110e9611de6565b5b8160048111156110fd576110fc611de6565b5b0361113d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611134906121a5565b60405180910390fd5b6003600481111561115157611150611de6565b5b81600481111561116457611163611de6565b5b036111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612237565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156111e3576000600391509150611281565b6000600187878787604051600081526020016040526040516112089493929190612282565b6020604051602081039080840390855afa15801561122a573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361127857600060019250925050611281565b80600092509250505b94509492505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600064ffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113328161131f565b811461133d57600080fd5b50565b60008135905061134f81611329565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061138082611355565b9050919050565b61139081611375565b811461139b57600080fd5b50565b6000813590506113ad81611387565b92915050565b6000819050919050565b6113c6816113b3565b81146113d157600080fd5b50565b6000813590506113e3816113bd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61143c826113f3565b810181811067ffffffffffffffff8211171561145b5761145a611404565b5b80604052505050565b600061146e61130b565b905061147a8282611433565b919050565b600067ffffffffffffffff82111561149a57611499611404565b5b6114a3826113f3565b9050602081019050919050565b82818337600083830152505050565b60006114d26114cd8461147f565b611464565b9050828152602081018484840111156114ee576114ed6113ee565b5b6114f98482856114b0565b509392505050565b600082601f830112611516576115156113e9565b5b81356115268482602086016114bf565b91505092915050565b6000806000806080858703121561154957611548611315565b5b600061155787828801611340565b94505060206115688782880161139e565b9350506040611579878288016113d4565b925050606085013567ffffffffffffffff81111561159a5761159961131a565b5b6115a687828801611501565b91505092959194509250565b60008115159050919050565b6115c7816115b2565b82525050565b60006020820190506115e260008301846115be565b92915050565b6000602082840312156115fe576115fd611315565b5b600061160c84828501611340565b91505092915050565b61161e81611375565b82525050565b61162d8161131f565b82525050565b61163c816115b2565b82525050565b600064ffffffffff82169050919050565b61165c81611642565b82525050565b60c0820160008201516116786000850182611615565b50602082015161168b6020850182611624565b50604082015161169e6040850182611615565b5060608201516116b16060850182611633565b5060808201516116c46080850182611653565b5060a08201516116d760a0850182611615565b50505050565b600060c0820190506116f26000830184611662565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c08201600082015161173a6000850182611615565b50602082015161174d6020850182611624565b5060408201516117606040850182611615565b5060608201516117736060850182611633565b5060808201516117866080850182611653565b5060a082015161179960a0850182611615565b50505050565b60006117ab8383611724565b60c08301905092915050565b6000602082019050919050565b60006117cf826116f8565b6117d98185611703565b93506117e483611714565b8060005b838110156118155781516117fc888261179f565b9750611807836117b7565b9250506001810190506117e8565b5085935050505092915050565b6000602082019050818103600083015261183c81846117c4565b905092915050565b60008060006060848603121561185d5761185c611315565b5b600061186b8682870161139e565b935050602061187c86828701611340565b925050604061188d8682870161139e565b9150509250925092565b6118a08161131f565b82525050565b60006020820190506118bb6000830184611897565b92915050565b6118ca81611375565b82525050565b6118d981611642565b82525050565b600060c0820190506118f460008301896118c1565b6119016020830188611897565b61190e60408301876118c1565b61191b60608301866115be565b61192860808301856118d0565b61193560a08301846118c1565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561197a57808201518184015260208101905061195f565b60008484015250505050565b600061199182611940565b61199b818561194b565b93506119ab81856020860161195c565b6119b4816113f3565b840191505092915050565b600060208201905081810360008301526119d98184611986565b905092915050565b6000806000606084860312156119fa576119f9611315565b5b6000611a088682870161139e565b9350506020611a198682870161139e565b9250506040611a2a86828701611340565b9150509250925092565b6000602082019050611a4960008301846118c1565b92915050565b60008060408385031215611a6657611a65611315565b5b6000611a74858286016113d4565b925050602083013567ffffffffffffffff811115611a9557611a9461131a565b5b611aa185828601611501565b9150509250929050565b7f4c494e4b20494e44455820444f4553204e4f5420455849535400000000000000600082015250565b6000611ae160198361194b565b9150611aec82611aab565b602082019050919050565b60006020820190508181036000830152611b1081611ad4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4c494e4b20414c52454144592057495448445241574e00000000000000000000600082015250565b6000611b7c60168361194b565b9150611b8782611b46565b602082019050919050565b60006020820190508181036000830152611bab81611b6f565b9050919050565b60008160601b9050919050565b6000611bca82611bb2565b9050919050565b6000611bdc82611bbf565b9050919050565b611bf4611bef82611375565b611bd1565b82525050565b6000611c068284611be3565b60148201915081905092915050565b7f48415348455320444f204e4f54204d4154434800000000000000000000000000600082015250565b6000611c4b60138361194b565b9150611c5682611c15565b602082019050919050565b60006020820190508181036000830152611c7a81611c3e565b9050919050565b7f57524f4e47205349474e41545552450000000000000000000000000000000000600082015250565b6000611cb7600f8361194b565b9150611cc282611c81565b602082019050919050565b60006020820190508181036000830152611ce681611caa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d278261131f565b9150611d328361131f565b9250828203905081811115611d4a57611d49611ced565b5b92915050565b6000819050919050565b6000611d75611d70611d6b84611355565b611d50565b611355565b9050919050565b6000611d8782611d5a565b9050919050565b6000611d9982611d7c565b9050919050565b611da981611d8e565b82525050565b600082825260208201905092915050565b50565b6000611dd0600083611daf565b9150611ddb82611dc0565b600082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611e2657611e25611de6565b5b50565b6000819050611e3782611e15565b919050565b6000611e4782611e29565b9050919050565b611e5781611e3c565b82525050565b6000608082019050611e726000830186611da0565b611e7f6020830185611897565b8181036040830152611e9081611dc3565b9050611e9f6060830184611e4e565b949350505050565b611eb0816115b2565b8114611ebb57600080fd5b50565b600081519050611ecd81611ea7565b92915050565b600060208284031215611ee957611ee8611315565b5b6000611ef784828501611ebe565b91505092915050565b7f436f756c64206e6f742065786563757465206574686572207472616e73666572600082015250565b6000611f3660208361194b565b9150611f4182611f00565b602082019050919050565b60006020820190508181036000830152611f6581611f29565b9050919050565b6000611f7782611355565b9050919050565b611f8781611f6c565b82525050565b6000604082019050611fa26000830185611f7e565b611faf6020830184611897565b9392505050565b6000819050919050565b6000611fdb611fd6611fd184611fb6565b611d50565b61131f565b9050919050565b611feb81611fc0565b82525050565b600081519050919050565b600061200782611ff1565b6120118185611daf565b935061202181856020860161195c565b61202a816113f3565b840191505092915050565b600060808201905061204a60008301876118c1565b6120576020830186611fe2565b81810360408301526120698185611ffc565b90506120786060830184611e4e565b95945050505050565b7f436f756c64206e6f74206578656375746520746f6b656e207472616e73666572600082015250565b60006120b760208361194b565b91506120c282612081565b602082019050919050565b600060208201905081810360008301526120e6816120aa565b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061212360188361194b565b915061212e826120ed565b602082019050919050565b6000602082019050818103600083015261215281612116565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061218f601f8361194b565b915061219a82612159565b602082019050919050565b600060208201905081810360008301526121be81612182565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061222160228361194b565b915061222c826121c5565b604082019050919050565b6000602082019050818103600083015261225081612214565b9050919050565b612260816113b3565b82525050565b600060ff82169050919050565b61227c81612266565b82525050565b60006080820190506122976000830187612257565b6122a46020830186612273565b6122b16040830185612257565b6122be6060830184612257565b9594505050505056fea2646970667358221220d4cfcae48dcd9cb39e8e8efbdf1eeec788e79274901739cdd0ee4771a47cfb8064736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimLink(uint256,address,bytes32,bytes)": {
        "params": {
          "_index": "uint256 index of the deposit",
          "_recipientAddress": "address of the recipient",
          "_recipientAddressHash": "bytes32 hash of the recipient address (prefixed with \"\\x19Ethereum Signed Message:\\n32\")",
          "_signature": "bytes signature of the recipient address (65 bytes)"
        },
        "returns": {
          "_0": "bool true if successful"
        }
      },
      "createLink(address,uint256,address)": {
        "details": "For token deposits, allowance must be set before calling this function",
        "params": {
          "_amount": "uint256 of the amount of tokens being sent (if erc20)",
          "_pubKey20": "last 20 bytes of the public key of the deposit signer",
          "_tokenAddress": "address of the token being sent. 0x0 for eth"
        },
        "returns": {
          "_0": "uint256 index of the deposit"
        }
      },
      "getAllLinks()": {
        "returns": {
          "_0": "Links[] array of deposits"
        }
      },
      "getLink(uint256)": {
        "params": {
          "_index": "uint256 index of the deposit"
        },
        "returns": {
          "_0": "Deposit struct"
        }
      },
      "getLinkCount()": {
        "returns": {
          "_0": "uint256 number of deposits"
        }
      },
      "getSigner(bytes32,bytes)": {
        "params": {
          "messageHash": "bytes32 hash of the message",
          "signature": "bytes signature of the message"
        },
        "returns": {
          "_0": "address of the signer"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createLink(address,uint256,address)": {
        "notice": "Function to make a deposit"
      },
      "getAllLinks()": {
        "notice": "Get all links in contract"
      },
      "getLink(uint256)": {
        "notice": "Simple way to get single deposit"
      },
      "getLinkCount()": {
        "notice": "Simple way to get the total number of deposits"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2317,
        "contract": "contracts/Safe2LinkModule.sol:Safe2LinkModule",
        "label": "tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 2334,
        "contract": "contracts/Safe2LinkModule.sol:Safe2LinkModule",
        "label": "links",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Link)2330_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Link)2330_storage)dyn_storage": {
        "base": "t_struct(Link)2330_storage",
        "encoding": "dynamic_array",
        "label": "struct Safe2LinkModule.Link[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_struct(Link)2330_storage": {
        "encoding": "inplace",
        "label": "struct Safe2LinkModule.Link",
        "members": [
          {
            "astId": 2319,
            "contract": "contracts/Safe2LinkModule.sol:Safe2LinkModule",
            "label": "pubKey20",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2321,
            "contract": "contracts/Safe2LinkModule.sol:Safe2LinkModule",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2323,
            "contract": "contracts/Safe2LinkModule.sol:Safe2LinkModule",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2325,
            "contract": "contracts/Safe2LinkModule.sol:Safe2LinkModule",
            "label": "claimed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2327,
            "contract": "contracts/Safe2LinkModule.sol:Safe2LinkModule",
            "label": "timestamp",
            "offset": 21,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 2329,
            "contract": "contracts/Safe2LinkModule.sol:Safe2LinkModule",
            "label": "account",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}